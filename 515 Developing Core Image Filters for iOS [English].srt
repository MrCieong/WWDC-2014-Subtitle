1
00:00:13,026 --> 00:00:17,055
good afternoon everyone my name is
Alexander Ehmann and

2
00:00:17,055 --> 00:00:20,116
talk to you about developing custom car
image kernels and filters

3
00:00:21,016 --> 00:00:24,074
on I O S let's start with a little bit
history

4
00:00:24,074 --> 00:00:27,093
I'm we've been able to write custom
kernels on

5
00:00:27,093 --> 00:00:32,312
Mac OS 10 sense 2005 with the advent of
core image

6
00:00:33,149 --> 00:00:36,230
and now but I was a we're gonna show you
how you can do that

7
00:00:36,023 --> 00:00:39,025
I'm are embedded devices

8
00:00:39,025 --> 00:00:42,934
so the main motivation why would you
wanna write custom kernels

9
00:00:43,159 --> 00:00:46,440
well you can there are we although we
provide many many

10
00:00:46,044 --> 00:00:50,069
built in card for kernels and filters
there are situations where

11
00:00:50,069 --> 00:00:53,092
you can use an existing setup filters or
some combination of to create the effect

12
00:00:53,092 --> 00:00:53,961
your trainer

13
00:00:54,789 --> 00:00:57,855
achieve so if you're trying to do
something such as a hot pixels affect

14
00:00:58,449 --> 00:00:59,472
everything yet a fact which is

15
00:00:59,679 --> 00:01:03,190
example we're gonna go into complete
details a bit later on that something

16
00:01:03,019 --> 00:01:05,198
you would have been able to do without
writing a custom kernel

17
00:01:05,369 --> 00:01:09,250
or if you want to create some sorta
interesting distortions such as the

18
00:01:09,025 --> 00:01:12,084
trustee deformation that we showed how
to do in our talk two years ago

19
00:01:12,084 --> 00:01:15,893
that also would have been possible but
now Iowa State with custom kernels it is

20
00:01:16,649 --> 00:01:21,220
so let's talk a little bit about our
agenda first offer gonna start about

21
00:01:21,022 --> 00:01:24,116
we can talk about the some some core
concepts involved in image processing

22
00:01:25,016 --> 00:01:26,058
how to use court image

23
00:01:26,058 --> 00:01:29,103
more than gonna go through a whole
series of examples

24
00:01:30,003 --> 00:01:33,092
on how to write custom kernels your own

25
00:01:33,119 --> 00:01:36,420
net organs been a majority of our time
today and then at the very end we're

26
00:01:36,042 --> 00:01:38,241
gonna talk about some pot from
differences in between

27
00:01:38,619 --> 00:01:41,770
OS 10 anti-western what you need to keep
in mind when you're writing

28
00:01:41,077 --> 00:01:45,706
kernels for I your target so

29
00:01:46,399 --> 00:01:50,920
key concept and its get some from eighty
if you're here for the earlier talking

30
00:01:50,092 --> 00:01:51,461
to go this really quickly

31
00:01:52,289 --> 00:01:55,390
I'm and explain how koreans works

32
00:01:55,039 --> 00:01:58,578
so if you had for example a input image
the original image on the left and you

33
00:01:58,929 --> 00:01:59,780
want to play

34
00:01:59,078 --> 00:02:03,037
sepia tone filter you could easily do
that according to issue

35
00:02:03,739 --> 00:02:07,755
apply much more complicated effects and
create arbitrary photographs are not

36
00:02:07,899 --> 00:02:08,930
just necessarily daisy chaining

37
00:02:09,209 --> 00:02:13,970
images up in this manner but also
creating more complicated graphs

38
00:02:13,097 --> 00:02:16,366
and these are all lightweight objects

39
00:02:17,239 --> 00:02:21,230
that eventually get combined together
and

40
00:02:21,023 --> 00:02:24,034
each one of these filters can be
represented by

41
00:02:24,034 --> 00:02:28,049
some number of kernels and internally
work or image does

42
00:02:28,049 --> 00:02:32,105
is it will combine is all too in into
one program such that we minimize the

43
00:02:33,005 --> 00:02:36,082
number the media buffers that you might
have and maximize performance which is

44
00:02:36,082 --> 00:02:36,133
our goal

45
00:02:37,033 --> 00:02:40,049
so

46
00:02:40,049 --> 00:02:42,137
let's talk about the classes they're
gonna be dealing with today and again if

47
00:02:43,037 --> 00:02:45,040
you were here earlier you gotta the
brief comes to this already

48
00:02:45,067 --> 00:02:48,078
first class were gonna deal with the CI
colonel which is what we're gonna spend

49
00:02:48,078 --> 00:02:49,127
most of our time working on today

50
00:02:50,027 --> 00:02:53,069
and it represents the

51
00:02:53,069 --> 00:02:56,102
I'm the object that encapsulates the

52
00:02:57,002 --> 00:03:00,047
kernel that you'll be writing to drive
dude to interact with your image

53
00:03:00,047 --> 00:03:03,129
and is written in our core image colonel
language which is based on your cell

54
00:03:04,029 --> 00:03:08,034
next object is a CI filter which you
used to

55
00:03:08,034 --> 00:03:11,042
drive the prime matters the I

56
00:03:11,042 --> 00:03:15,077
colonel and it has any number of inputs
making the images and its numbers are

57
00:03:15,077 --> 00:03:15,163
co-directors

58
00:03:16,063 --> 00:03:21,139
and one output which is a new output
image we don't have a CIA image

59
00:03:22,039 --> 00:03:26,072
which is different from other images you
may have seen moderate other API's

60
00:03:26,072 --> 00:03:29,083
because it's an immutable object in only
represents the recipe for the image that

61
00:03:29,083 --> 00:03:30,094
doesn't actually contain any

62
00:03:30,094 --> 00:03:35,101
real data it's just a recipe for how to
produce the final result and its also

63
00:03:36,064 --> 00:03:39,068
the cart based on Cartesian coordinates
nor lower left corner

64
00:03:39,068 --> 00:03:43,068
and may have infinite bound so it's not
necessarily a bounded wrecked it can be

65
00:03:43,068 --> 00:03:43,151
infinite as well

66
00:03:44,051 --> 00:03:49,063
the final object ever gonna be dealing
with is a CI contact

67
00:03:49,063 --> 00:03:53,063
Missy I context is the object that you
use to

68
00:03:53,063 --> 00:03:58,068
render all your images your CIA images
whether that be to a CD image rav4

69
00:03:58,068 --> 00:04:01,347
to an eagle context or whatever other
destination you desire

70
00:04:01,959 --> 00:04:06,230
so let's take a look at how you might do
this if you're dealing with

71
00:04:06,023 --> 00:04:09,038
standard C++ code in dealing with I

72
00:04:09,038 --> 00:04:12,867
just you know trying to produce some new
output image given some some bucket have

73
00:04:13,209 --> 00:04:13,780
bites

74
00:04:13,078 --> 00:04:17,134
so you would typically write some for
loop over on the roseanne imagine then

75
00:04:18,034 --> 00:04:21,613
iterate over all the columns and then
for each

76
00:04:21,919 --> 00:04:25,550
input pixel input buffer I J produce
some

77
00:04:25,055 --> 00:04:28,149
you run your honor them here indicated
by process pixel and create some new

78
00:04:29,049 --> 00:04:33,468
output value and put that into your
result

79
00:04:33,909 --> 00:04:37,710
what we like to do with a requirement is
abstract all that for loop away for you

80
00:04:37,071 --> 00:04:38,640
and have it such that

81
00:04:39,279 --> 00:04:42,930
all you need to do is concentrate on

82
00:04:42,093 --> 00:04:45,852
your core algorithm when this case
process pixel and we will take care

83
00:04:46,689 --> 00:04:50,080
are running that in a parallel fashion
for you on the Jeep you in running it as

84
00:04:50,008 --> 00:04:52,527
often as possible

85
00:04:52,599 --> 00:04:55,667
now in order to UCI colonel you need to
rate you need to subclass

86
00:04:56,279 --> 00:04:59,292
from CI filter and CI filters gonna tell
us

87
00:04:59,409 --> 00:05:02,413
given some number of let Satan is there
is your more

88
00:05:02,449 --> 00:05:05,710
input images and some parameters how to
apply that

89
00:05:05,071 --> 00:05:08,900
colonel onto your input image

90
00:05:09,539 --> 00:05:13,400
and produce one new output image

91
00:05:13,004 --> 00:05:17,069
sup let's take a look at the workflow
and I West

92
00:05:18,005 --> 00:05:21,010
and if you've you've written colonels
sorry the written filters on a

93
00:05:21,055 --> 00:05:24,204
I O S around a stop in the past this is
gonna sound very similar you

94
00:05:24,699 --> 00:05:28,300
but we've got a new think so first
things first create a CA input image

95
00:05:28,003 --> 00:05:32,078
with RCA input image then we supply CI
filter

96
00:05:33,005 --> 00:05:35,734
we're going to get our output image
eventually once we're done running CI

97
00:05:35,779 --> 00:05:35,874
filter

98
00:05:36,729 --> 00:05:40,080
and then we have our open image we can
display it as I said earlier using

99
00:05:40,008 --> 00:05:40,074
either

100
00:05:40,074 --> 00:05:44,253
a CG image or rendering a CJ major Eagle
context

101
00:05:44,919 --> 00:05:47,980
what's new and we're going to talk about
today is how you create those kernels

102
00:05:48,529 --> 00:05:51,535
and how you apply the parameters that
you have from your filter to the kernel

103
00:05:52,129 --> 00:05:55,133
to get your your final output

104
00:05:55,169 --> 00:05:59,206
so talk about what exists currently Inc
or image

105
00:05:59,539 --> 00:06:02,604
right now when I was eight we have 115
built-in

106
00:06:03,189 --> 00:06:06,990
filters take a little closer detail

107
00:06:06,099 --> 00:06:10,118
closer look at this we can see that
they're actually from this 102 said 115

108
00:06:11,009 --> 00:06:12,053
there are 78

109
00:06:12,449 --> 00:06:15,502
which are actually just purely modifying
the color

110
00:06:15,979 --> 00:06:19,038
above the images there are another 27

111
00:06:19,569 --> 00:06:22,575
which are pure geometry distortions

112
00:06:22,629 --> 00:06:26,678
and then their final 7 that arc
convolutions

113
00:06:27,119 --> 00:06:30,201
which brings us to our next point what
is the enemy ICI colonel

114
00:06:30,939 --> 00:06:35,002
and I Wes so when I O S and on the west
end we now have a CI colonel class

115
00:06:35,569 --> 00:06:38,657
but I O S we now have two new classes

116
00:06:39,449 --> 00:06:42,550
that allow for greater performance and
specializations of

117
00:06:42,055 --> 00:06:45,264
CI colonel and allow us to do higher
performance

118
00:06:45,759 --> 00:06:48,806
optimizations then week when we do
currently elsewhere

119
00:06:49,229 --> 00:06:52,360
I'm so we have a CI color colonel and
see I work colonel

120
00:06:52,036 --> 00:06:56,495
I wanna talk about all three those today
in order of difficulty

121
00:06:56,819 --> 00:06:59,823
so let's look at little deeper into the
interface for what is the icon looks

122
00:07:00,219 --> 00:07:02,330
like NBC there are really only two
methods

123
00:07:02,033 --> 00:07:05,962
that we care about the first one is to
create a colonel you call colonel with

124
00:07:06,259 --> 00:07:07,298
string

125
00:07:07,649 --> 00:07:10,674
and then to create a new CIA image after
having run your kernel

126
00:07:10,899 --> 00:07:15,270
you call apply with extent and a few
other parameters and again it's

127
00:07:15,027 --> 00:07:18,049
it's important to remember that calling
apply

128
00:07:18,049 --> 00:07:21,093
doesn't actually render anything it's
just a recipe so you can daisy-chain

129
00:07:21,093 --> 00:07:22,032
ease up

130
00:07:22,869 --> 00:07:25,907
create whatever graph you want no work
is performed until the last moment when

131
00:07:26,249 --> 00:07:29,330
you actually need those pixels

132
00:07:29,033 --> 00:07:34,022
so what is CI colonels language well
it's based on GLSL

133
00:07:34,319 --> 00:07:38,324
and it has extensions for imaging so to
deal with piling in

134
00:07:38,369 --> 00:07:42,210
um all kinds of other optimizations we
put in

135
00:07:42,021 --> 00:07:45,690
it also all the inputs and outputs are
floats so

136
00:07:45,879 --> 00:07:48,916
frilly easy is let's now take a look at

137
00:07:49,249 --> 00:07:53,271
what is involved in writing it's the eye
color colonel

138
00:07:53,469 --> 00:07:57,476
so as I was saying all the inputs for
see eye color colonel are going to be

139
00:07:58,169 --> 00:08:01,200
flow data and that doesn't it does
regardless of what your input data is

140
00:08:01,479 --> 00:08:02,110
whether it's

141
00:08:02,011 --> 00:08:05,210
RGB eight or 16 bit and sore flow data
it will

142
00:08:05,309 --> 00:08:09,314
come into the kernel as flow data as
affect for

143
00:08:09,809 --> 00:08:14,811
and the output from every CI filter is
also gonna be effect for

144
00:08:15,009 --> 00:08:18,096
so let's take a look at the simplest
possible example we could come up with

145
00:08:18,879 --> 00:08:21,945
which actually does nothing to this is a
no up it just takes an input

146
00:08:22,539 --> 00:08:25,558
in this case is going to be an
underscore underscore sample and you can

147
00:08:25,729 --> 00:08:27,820
see we just returned which is
effectively just affect for

148
00:08:28,639 --> 00:08:32,750
and we just returned estar RGBA so if we
were to apply this filter to the input

149
00:08:32,075 --> 00:08:33,127
image on the left

150
00:08:34,027 --> 00:08:38,050
we get the exact same image on the upper

151
00:08:38,005 --> 00:08:40,794
I can make things a little more
interesting and just swap the reading

152
00:08:41,289 --> 00:08:43,710
greenhouse is a very simple process

153
00:08:43,071 --> 00:08:46,260
we just take are red channel think

154
00:08:46,899 --> 00:08:50,935
but in the location of the where the
Greenwise and take the green channel

155
00:08:51,259 --> 00:08:54,347
and put in location with a red was and
if we were to apply this kernel

156
00:08:55,139 --> 00:08:58,720
to our input image we get a new output
image and you can clearly see that the

157
00:08:58,072 --> 00:08:58,941
Makrana Feb

158
00:08:59,589 --> 00:09:03,910
for round has changed colors and same
thing for the

159
00:09:03,091 --> 00:09:06,770
green we can make things a little more
interesting and was so what it looks

160
00:09:07,589 --> 00:09:08,610
like when you actually wanna

161
00:09:08,061 --> 00:09:11,970
have an input parameter that controls
how much of this affect it supplied

162
00:09:12,519 --> 00:09:16,538
so here we have a new variable called
amount that supplied its

163
00:09:16,709 --> 00:09:21,290
using our kernel damages use a mix
function to do linear interpolation

164
00:09:21,029 --> 00:09:22,128
between

165
00:09:22,389 --> 00:09:25,480
the original unmodified pixel value

166
00:09:25,048 --> 00:09:28,137
are final destination value as if it was
at value 1.0

167
00:09:29,037 --> 00:09:32,676
in any input value amount it was going
to be something that goes between 0&1

168
00:09:33,009 --> 00:09:37,230
and if we were to apply this colonel in
very the value between 0&1 interactively

169
00:09:37,023 --> 00:09:40,322
we get very quickly a

170
00:09:40,529 --> 00:09:44,170
you know I'm animated blending between
these two

171
00:09:44,017 --> 00:09:47,111
extreme images and that's pretty much
all you need to do to write a color

172
00:09:48,011 --> 00:09:49,040
colonel on

173
00:09:49,139 --> 00:09:53,190
I O S

174
00:09:53,019 --> 00:09:56,228
the next thing we need to do months
we've done we've done our working

175
00:09:56,399 --> 00:10:00,470
colonel and running a sec colonel is we
need to subclass EI filter in order to

176
00:10:00,047 --> 00:10:01,073
drive that colonel

177
00:10:01,073 --> 00:10:04,080
so in this case we derive from CI filter
we've created a new filter called swype

178
00:10:05,043 --> 00:10:06,124
red green filter

179
00:10:07,024 --> 00:10:10,055
with it has two properties first
property being the input image that

180
00:10:10,055 --> 00:10:11,074
we're going to be working on

181
00:10:11,074 --> 00:10:15,130
and second property is the input amount
so how much of that

182
00:10:16,003 --> 00:10:19,102
I'm 101 we want to go

183
00:10:19,399 --> 00:10:22,498
so we'll take a look at the methods that
were gonna be implementing today

184
00:10:23,389 --> 00:10:25,980
first things first we're going to be
using us throughout our our presentation

185
00:10:25,098 --> 00:10:27,129
today we're gonna have a convenience
function for creating a colonel such

186
00:10:28,029 --> 00:10:29,105
that we don't recreate these kernels

187
00:10:30,005 --> 00:10:33,724
at every frame because we don't want to
do that we're gonna have a custom

188
00:10:33,769 --> 00:10:35,420
attributes method which

189
00:10:35,042 --> 00:10:38,331
is oftentimes used to drive you elements
such as what we signed

190
00:10:38,709 --> 00:10:42,220
carnage fun house earlier the previous
talk

191
00:10:42,022 --> 00:10:45,931
and the method that you absolutely must
implement which is output image and

192
00:10:46,129 --> 00:10:46,134
that's

193
00:10:46,629 --> 00:10:50,240
we take all your input parameters and
you drive your kernel to producing up

194
00:10:50,024 --> 00:10:52,067
with image

195
00:10:52,067 --> 00:10:56,536
so let's take a look at the actual
implementation

196
00:10:57,139 --> 00:11:00,990
as you can see creating cycle a colonel
is just some guy calling cycle a colonel

197
00:11:00,099 --> 00:11:02,106
colonel with string and passing along
are

198
00:11:03,006 --> 00:11:07,097
kernel code next thing we need to do is
call self

199
00:11:07,097 --> 00:11:10,124
my kernel and then we apply that

200
00:11:11,024 --> 00:11:14,063
and we pass into arguments the input
image which maps to the first parameter

201
00:11:14,279 --> 00:11:16,060
var colonel

202
00:11:16,006 --> 00:11:19,225
an ample amount which maps to our second
parameter or chrome

203
00:11:19,279 --> 00:11:22,350
and that is literally all we need to do
to create a custom color colonel

204
00:11:22,035 --> 00:11:27,097
and I West so now let's look at a
slightly more complicated example

205
00:11:27,097 --> 00:11:31,129
where we in addition to modifying colors

206
00:11:32,029 --> 00:11:35,198
I'm we in we also use position to
determine

207
00:11:35,459 --> 00:11:38,610
how much of an effect should be applied
to let's pretend we wanted to do having

208
00:11:38,061 --> 00:11:42,094
an effect take the image on the left

209
00:11:42,094 --> 00:11:45,673
buy produce a new image on the right
that look like it had been

210
00:11:46,519 --> 00:11:50,180
I am being added try his case

211
00:11:50,018 --> 00:11:53,407
you can see that the we want the pixels
at the Center the image to remain on

212
00:11:53,569 --> 00:11:53,665
modified

213
00:11:54,529 --> 00:11:58,541
and as we go further out towards the
corners at the image we want those to be

214
00:11:58,649 --> 00:12:02,692
as dark as possible forget to get those
as being like value between

215
00:12:03,079 --> 00:12:10,079
10 and we're gonna be linearly
interpolating

216
00:12:10,439 --> 00:12:14,680
along along that vector

217
00:12:14,068 --> 00:12:17,097
so if we were to look at what an image
look like if we were to create

218
00:12:17,097 --> 00:12:20,102
that zero to one mapping for the entire
image

219
00:12:21,047 --> 00:12:24,026
we get this great image in the middle
here and if we take our image on the

220
00:12:24,449 --> 00:12:28,420
left and we multiply the red green blue
values by that

221
00:12:28,042 --> 00:12:31,061
new computed value we would get our
vignette effect and it's really that

222
00:12:31,061 --> 00:12:32,080
simple

223
00:12:32,008 --> 00:12:37,037
for now let's take a look at how we use
position information inside a colonel

224
00:12:37,829 --> 00:12:40,842
her to the signature for a colonel we're
gonna go over through each step but how

225
00:12:40,959 --> 00:12:41,053
we would create a simple

226
00:12:41,899 --> 00:12:44,924
color kernel that depends on position so

227
00:12:45,149 --> 00:12:48,620
as I mentioned earlier CIA images may or
may not be

228
00:12:48,062 --> 00:12:51,068
have a 0-0 origin in this case you can
see that

229
00:12:51,068 --> 00:12:54,116
the image is not your thing and what we
need to do is find out where the center

230
00:12:55,016 --> 00:12:57,695
the images because every pixel that's
gonna get dark and

231
00:12:57,839 --> 00:13:01,900
is with respect to the center so we need
to know how far away we r

232
00:13:02,449 --> 00:13:05,451
annexing we can do is we can take the
size the image and just

233
00:13:05,649 --> 00:13:08,704
divide that into you and we have
affected it takes us from the lower left

234
00:13:09,199 --> 00:13:11,870
corner the image

235
00:13:11,087 --> 00:13:14,106
to the center and then if we add these
two factors together we have a new

236
00:13:14,889 --> 00:13:16,907
vector called

237
00:13:17,069 --> 00:13:20,094
I'm Center offset

238
00:13:20,319 --> 00:13:26,420
which takes us from the origin the image
to the Center in our Image

239
00:13:26,042 --> 00:13:29,074
we then gonna keep you warm or value
which may be passing into our

240
00:13:29,074 --> 00:13:32,150
colonel which is the extend to the image
divided by two

241
00:13:33,005 --> 00:13:37,704
and that's going to be the longest
length love any point in our Image

242
00:13:38,199 --> 00:13:41,990
and we're gonna be dividing values by
that such we can determine how much the

243
00:13:41,099 --> 00:13:43,104
effect needs to be applied

244
00:13:44,049 --> 00:13:48,050
so as I was saying earlier we have many
extensions inside halfcourt much to do

245
00:13:48,005 --> 00:13:48,834
with imaging

246
00:13:49,329 --> 00:13:52,385
one of them is called escort and this is
gonna tell you

247
00:13:52,889 --> 00:13:55,927
which current pixel you're trying to
render

248
00:13:56,269 --> 00:13:59,293
in global space so

249
00:13:59,509 --> 00:14:02,810
what we need to do is figure out how far
away from the center is

250
00:14:02,081 --> 00:14:05,166
every single desk or that's gonna get
evaluated miss functional get called on

251
00:14:06,066 --> 00:14:07,162
every single fragment you're trying to
render

252
00:14:08,062 --> 00:14:11,066
in the image so you can see here

253
00:14:11,066 --> 00:14:13,995
it's a simple matter of just subtracting
one factor from the other we just take

254
00:14:14,589 --> 00:14:15,730
that court

255
00:14:15,073 --> 00:14:20,078
mine a center of said we get a new
factor called back from center

256
00:14:21,023 --> 00:14:24,031
so inside the kernel is what it looks
like

257
00:14:24,031 --> 00:14:26,990
where they're going to get the link for
that Victor with call distance in this

258
00:14:27,269 --> 00:14:29,220
case

259
00:14:29,022 --> 00:14:32,086
we computed darkening amount by doing
distance divided by radius which is like

260
00:14:32,086 --> 00:14:34,875
half a bar diagonal a direct original
rectangle

261
00:14:35,649 --> 00:14:38,730
one minus that is going to give us are
darkening amount

262
00:14:38,073 --> 00:14:41,862
and then finally week call we return
effect for

263
00:14:42,519 --> 00:14:47,430
that takes our input sample s multiplies
the RGB value but I talking about

264
00:14:47,043 --> 00:14:51,118
and maintains alpha as its and having
any effect

265
00:14:52,018 --> 00:14:56,847
to now let's take a look at what we need
to do in objective-c lawn

266
00:14:57,009 --> 00:15:01,980
first things first the DOD was tempered
demand definition we're gonna talk live

267
00:15:01,098 --> 00:15:02,105
in more detail what that means in a bit

268
00:15:03,068 --> 00:15:07,267
but this is how much what what is the
extent to the output image gonna be in

269
00:15:07,879 --> 00:15:07,962
this case it's

270
00:15:08,709 --> 00:15:12,600
are open image is the same size are
input image

271
00:15:12,006 --> 00:15:16,011
thats constant where they're gonna
compute are radius

272
00:15:17,001 --> 00:15:22,063
and then creative ektu which takes us to
the center of the image

273
00:15:22,072 --> 00:15:26,099
and then all we need to do is call self
my kernel apply with extent

274
00:15:26,099 --> 00:15:29,141
DOD and then pass in an array of
arguments which

275
00:15:30,041 --> 00:15:34,010
again you can see the input image match
is the first parameter of our kernel

276
00:15:34,379 --> 00:15:38,160
center of that matches the second
parameter

277
00:15:38,016 --> 00:15:41,049
and radius matches that their brains
that's how we pass parameters from

278
00:15:41,049 --> 00:15:45,378
objective-c land into are colonel
language like

279
00:15:45,819 --> 00:15:49,360
so let's talk a little bit more about
may have definition

280
00:15:49,036 --> 00:15:52,047
oftentimes the meaning definition is
equal to the input image size:

281
00:15:52,047 --> 00:15:55,106
but there are situations when asked not
to be the case so if for example we have

282
00:15:55,529 --> 00:15:56,790
to input images

283
00:15:56,079 --> 00:15:59,104
and we were doing at source over you can
imagine that if

284
00:16:00,004 --> 00:16:03,043
either one of these images didn't have a
0-0 origin

285
00:16:03,043 --> 00:16:06,182
the output image he would want to create
would be larger

286
00:16:06,569 --> 00:16:09,608
and he would want to take the Union over
those two and that we all we need to

287
00:16:09,959 --> 00:16:10,800
think about what

288
00:16:10,008 --> 00:16:14,032
are the non-zero pixels that your
kernels gonna be producing by taking a

289
00:16:15,004 --> 00:16:16,343
given set of

290
00:16:16,379 --> 00:16:20,050
input images and that is what the domain
of definition is

291
00:16:20,005 --> 00:16:23,016
and as a primary you have to always
specify

292
00:16:23,016 --> 00:16:26,695
and that's really I need to know about
how to write color colonels

293
00:16:26,839 --> 00:16:30,720
hi Wes now the talk about work colonels

294
00:16:30,072 --> 00:16:33,079
it's our second subclass RCI colonel

295
00:16:33,079 --> 00:16:37,068
and let you do Juma tree modifications
to an image

296
00:16:37,779 --> 00:16:40,790
so in addition to specifying arlyne

297
00:16:40,889 --> 00:16:43,978
you as an indigent specifying DOD you
also need to specify an hour Weimer

298
00:16:44,779 --> 00:16:45,784
explain what that is in a minute

299
00:16:46,279 --> 00:16:49,550
let's take a look at the workflow
workflow is basically that you getting

300
00:16:49,055 --> 00:16:49,904
input position

301
00:16:50,399 --> 00:16:53,350
and you're asked to produce and you
output position and those are good both

302
00:16:53,035 --> 00:16:55,092
gonna be victims

303
00:16:55,092 --> 00:16:58,561
so let's once again look at the simplest
example which is

304
00:16:59,389 --> 00:17:03,426
a kernel that does nothing just returns
dust court

305
00:17:03,759 --> 00:17:07,620
if we were to apply that colonel to our
input image no change

306
00:17:07,062 --> 00:17:11,501
so we were to look at a random pics on
our image will we need to think about is

307
00:17:12,059 --> 00:17:15,140
in our output image where does that
pixel come from

308
00:17:15,014 --> 00:17:18,030
in our input image not as the equation
we need to come up with

309
00:17:18,003 --> 00:17:21,084
in this case you can see that is just
identity there's no change which is why

310
00:17:22,011 --> 00:17:24,093
we can just returned escort

311
00:17:24,093 --> 00:17:27,132
let's take us like the more interesting
example where

312
00:17:28,032 --> 00:17:31,048
instead of just returning desk or two
we're gonna flip the image around

313
00:17:31,048 --> 00:17:34,070
the center ovett in this case

314
00:17:34,007 --> 00:17:38,056
should be fairly clear but if we look at
a pixel near the shoulder this woman

315
00:17:39,019 --> 00:17:43,048
on the right and the output image the
where we need to read from any input

316
00:17:43,048 --> 00:17:44,137
image is not the same location

317
00:17:45,037 --> 00:17:48,126
instead we're gonna be reading for a
different location the y value won't be

318
00:17:49,026 --> 00:17:49,087
changing

319
00:17:49,087 --> 00:17:53,133
but the x value is different so desk or
dot why is fine desk or Dynex needs to

320
00:17:54,033 --> 00:17:55,034
change

321
00:17:55,043 --> 00:17:59,075
how do we do that well we have an Excel
you discord rx we know what the with the

322
00:17:59,075 --> 00:18:01,142
images we can pass and as a parameter to
our kernel

323
00:18:02,042 --> 00:18:05,137
and using that we can do image with
minus X

324
00:18:06,037 --> 00:18:09,068
in that gives us the location in our
region input image from where we want to

325
00:18:09,068 --> 00:18:09,149
read

326
00:18:10,049 --> 00:18:13,072
and if we do that you can see that
colonel above

327
00:18:13,072 --> 00:18:16,091
mirror axe that's all we need to apply

328
00:18:16,091 --> 00:18:20,145
adjusted escort image with minus X for X
Gordon and return the same value in wine

329
00:18:21,045 --> 00:18:21,102
we getting

330
00:18:22,002 --> 00:18:27,020
in the mirror in effect

331
00:18:27,002 --> 00:18:30,055
so let's take a look at what we need to
do in objective-c

332
00:18:30,073 --> 00:18:34,074
so now instead of cream colour kernel we
create issue I work colonel

333
00:18:34,074 --> 00:18:37,166
we pass along source code we had earlier

334
00:18:38,066 --> 00:18:41,111
and then we call apply and now apply to
see has

335
00:18:42,011 --> 00:18:46,012
one additional primary need to pass
which is an R Y call back

336
00:18:46,021 --> 00:18:49,103
nominee were the next thing we're gonna
do is talk about what is in our I call

337
00:18:50,003 --> 00:18:52,014
back and why do we need to do that for
kernels

338
00:18:52,014 --> 00:18:55,082
and why it's important so

339
00:18:55,082 --> 00:18:58,139
our life stands for regional interest
the basic idea is that

340
00:18:59,039 --> 00:19:02,122
internally car images going to tile your
image and perform

341
00:19:03,022 --> 00:19:07,076
smaller renders such that we can deal
with larger images and do things

342
00:19:07,076 --> 00:19:11,121
optimally on the Jeep you now as I'm
sure you can imagine

343
00:19:12,021 --> 00:19:15,086
what we need to do or producing a
rectangle it's a rectangle five-year

344
00:19:15,086 --> 00:19:18,093
is determined where the data in the
original input image comes from

345
00:19:18,093 --> 00:19:21,192
such that we can load that and we can
figure that out our own

346
00:19:22,092 --> 00:19:25,159
and you need to help us provide provide
that information for us

347
00:19:26,059 --> 00:19:29,080
and you do that by providing an hour why
call back which is the additional primer

348
00:19:29,008 --> 00:19:30,039
that you need to specify

349
00:19:31,011 --> 00:19:34,043
for a walk colonel so in this case

350
00:19:34,043 --> 00:19:37,087
should be fairly obvious if we take our
merit colonel that if we look at the

351
00:19:37,087 --> 00:19:39,104
rectangle on the output image

352
00:19:40,004 --> 00:19:44,100
in the rectangle on the input image that
the weep over the arc our court system

353
00:19:45,000 --> 00:19:46,008
already once again

354
00:19:46,008 --> 00:19:49,046
we can see that the width of the
rectangle is unchanging the height of

355
00:19:49,046 --> 00:19:50,141
the rectangle is unchanging

356
00:19:51,041 --> 00:19:55,113
the origin while the rectangle in
changing but we do have a new origin

357
00:19:56,013 --> 00:20:00,014
so we need to do given an output
rectangle five on the right

358
00:20:00,023 --> 00:20:02,116
we need to figure out where the one on
the left in the input image comes from

359
00:20:03,016 --> 00:20:03,089
is compute

360
00:20:03,089 --> 00:20:06,161
a new rectangle a new origin and that
simply equal to the image with

361
00:20:07,061 --> 00:20:11,063
plus sorry minus the origin

362
00:20:11,063 --> 00:20:15,082
and the with the the rectangle that
we're going to try to render and that is

363
00:20:15,082 --> 00:20:18,129
basically all we need to do for our why
function

364
00:20:19,029 --> 00:20:22,091
so now let's take a look at a little
more detail

365
00:20:22,091 --> 00:20:26,114
are mere colonel now it in this case
rest art of writing a check that I

366
00:20:27,014 --> 00:20:27,086
mentioned earlier we

367
00:20:27,086 --> 00:20:30,167
that CIA images may be a definite extent
and in order to keep the kernel little

368
00:20:31,067 --> 00:20:32,073
sample

369
00:20:32,073 --> 00:20:35,121
arm word we decided to just show you
what looks like a few

370
00:20:36,021 --> 00:20:39,072
are dealing with flipping around the
center the image in this case

371
00:20:39,072 --> 00:20:41,134
it doesn't deal with images that have
infinite extent so we're just gonna

372
00:20:42,034 --> 00:20:42,106
return of

373
00:20:43,006 --> 00:20:47,024
this wouldn't be a difficult market in
to make but 21 for doing a slight

374
00:20:47,024 --> 00:20:50,119
so first things first sight or open
image writer for the american we're

375
00:20:51,019 --> 00:20:53,056
gonna make sure we're not dealing with
an image in infinite extent

376
00:20:53,056 --> 00:20:56,092
where then gonna get a few parameters
that were gonna be reusing

377
00:20:56,092 --> 00:20:59,125
so first thing first we gonna created a
fine

378
00:21:00,025 --> 00:21:03,063
transform that moves are image

379
00:21:03,063 --> 00:21:06,075
to the origin and then

380
00:21:06,075 --> 00:21:09,083
applies that translation

381
00:21:09,083 --> 00:21:13,119
onto the image to create a new output
image within our apply our American on

382
00:21:14,019 --> 00:21:17,083
and once we're done we create a new
translation the news it back to where it

383
00:21:17,083 --> 00:21:18,083
was in our case

384
00:21:18,083 --> 00:21:20,140
we're looking at places like there was
no actual translation but if the image

385
00:21:21,004 --> 00:21:22,005
was 900

386
00:21:22,041 --> 00:21:25,057
we would have had to do that it's
oftentimes easier to think of

387
00:21:25,057 --> 00:21:28,151
a colonel in terms of how would this be
either when its image is centered or

388
00:21:29,051 --> 00:21:33,074
it was 800 and then do the work about
moving the image

389
00:21:33,074 --> 00:21:37,101
I in Objective C Robin is to do it in
the kernel

390
00:21:38,001 --> 00:21:42,043
so let's take a look a slightly more
complicated

391
00:21:42,043 --> 00:21:46,065
colonel so let's pretend you have any
input image or some input video

392
00:21:46,065 --> 00:21:49,142
indecisiveness image was 1024 by 768

393
00:21:50,042 --> 00:21:53,079
but what you really wanted was an image
that was

394
00:21:53,079 --> 00:21:56,116
wider and was a I'm in the

395
00:21:57,016 --> 00:22:02,111
with a 1280 so we can do that with an
anamorphic stretch

396
00:22:03,011 --> 00:22:06,085
and we're gonna do that by maintaining
the center the image in just stretching

397
00:22:06,085 --> 00:22:06,149
it out

398
00:22:07,049 --> 00:22:12,100
further as you get away for the way from
the center

399
00:22:13,000 --> 00:22:16,034
I should be fairly clear that

400
00:22:16,034 --> 00:22:19,057
based on his vector field that

401
00:22:19,057 --> 00:22:24,076
some the vet y values for this car can
change as well Roenicke modifying values

402
00:22:24,076 --> 00:22:24,137
an axe

403
00:22:25,037 --> 00:22:30,045
so we can think about this problem
purely in terms of X values

404
00:22:30,045 --> 00:22:33,088
so let's take a look at libitum af

405
00:22:33,088 --> 00:22:36,175
it helps oftentimes they have in verbal
functions and let's take a look at how

406
00:22:37,075 --> 00:22:37,140
we're gonna

407
00:22:38,004 --> 00:22:42,021
model this problem in our my head so
let's pretend we have an input value X

408
00:22:42,057 --> 00:22:42,108
and some

409
00:22:43,008 --> 00:22:46,015
output value after backs

410
00:22:46,015 --> 00:22:48,101
if we weren't modify and we're gonna
users with respect to the center the

411
00:22:49,001 --> 00:22:49,040
image

412
00:22:49,004 --> 00:22:51,079
all the all these matters can be with
back to senator mitchell gonna go from

413
00:22:52,015 --> 00:22:53,099
minus whatever to do with over two

414
00:22:53,099 --> 00:22:58,164
if we were not to modify the scale this
image of we were taking an input image

415
00:22:59,064 --> 00:23:03,072
size you know 1024 by 768 producing 1024
by 768

416
00:23:03,072 --> 00:23:07,126
we just have identity so slope of one

417
00:23:08,026 --> 00:23:11,042
some input value X I is gonna producing
new same

418
00:23:11,042 --> 00:23:14,047
the same value on the y-axis FFXI

419
00:23:14,092 --> 00:23:17,119
musical tax I but we want instead is
that as

420
00:23:18,019 --> 00:23:21,114
as we get further away from the center
the image we want are points to be moved

421
00:23:22,014 --> 00:23:23,043
more

422
00:23:23,043 --> 00:23:27,086
and we can do that by creating a curve
like this which maintains a slow curve 1

423
00:23:27,086 --> 00:23:30,133
through Center the image

424
00:23:31,033 --> 00:23:34,059
an equation for this is just X over

425
00:23:34,059 --> 00:23:37,063
one minus absolute value of x overcame
talk about

426
00:23:37,063 --> 00:23:40,134
that K content in a moment and this is
the exact same

427
00:23:41,034 --> 00:23:44,036
equation there were gonna used to
compute the DOD your domain a definition

428
00:23:44,036 --> 00:23:47,057
that we spoke about earlier

429
00:23:47,057 --> 00:23:51,058
so now if we take that equation we put a
source values X into it we get a new

430
00:23:51,067 --> 00:23:52,079
destination the UX

431
00:23:52,079 --> 00:23:57,123
which shows how far away we moved

432
00:23:58,023 --> 00:24:01,071
in this case that the equation is really
handy because it's very easy to invert

433
00:24:01,071 --> 00:24:04,144
so for isolate the value back to the
previous equation from source to death

434
00:24:05,044 --> 00:24:08,140
we get a new equation called s to source
a fax which would just be

435
00:24:09,004 --> 00:24:12,023
one over sorry X over one

436
00:24:12,059 --> 00:24:16,110
plus absolute value of X over K

437
00:24:17,001 --> 00:24:20,007
and this is the function that we're
gonna be using interm

438
00:24:20,016 --> 00:24:25,038
internally in our colonel and our WiMAX

439
00:24:25,038 --> 00:24:28,043
because I said earlier you always have
to think in terms of where does this

440
00:24:28,088 --> 00:24:29,116
pixel come from in the

441
00:24:30,016 --> 00:24:34,027
input cell

442
00:24:34,027 --> 00:24:37,119
how we can to K it's relatively simple
matter we just do desired weight on his

443
00:24:38,019 --> 00:24:40,036
case 1280 divided by Amber with 12

444
00:24:40,036 --> 00:24:44,043
1024 we get some scale value became
value was just able to enter with

445
00:24:44,043 --> 00:24:44,142
divided by one

446
00:24:45,042 --> 00:24:48,120
minus one over scale and then if we were
to

447
00:24:49,002 --> 00:24:53,038
plug these values into our equations is
he that source the desktop 1024

448
00:24:53,056 --> 00:24:56,099
we give us $12.80 and s2 source of 1280
would give us

449
00:24:56,099 --> 00:25:00,174
1024 so all the math works out

450
00:25:01,074 --> 00:25:04,153
now what are the kernel look like

451
00:25:05,053 --> 00:25:09,055
relatively simple to get to reuse our
equation we talked about earlier

452
00:25:09,055 --> 00:25:12,060
first things first we're gonna
translated such that were working with

453
00:25:13,005 --> 00:25:14,005
respect to the center

454
00:25:14,005 --> 00:25:17,092
within our player equation and then
translated back and that's all we need

455
00:25:17,092 --> 00:25:19,188
to do to create an amorphous stretch

456
00:25:20,088 --> 00:25:24,092
but we do have to specify R Y function
let's talk about

457
00:25:24,092 --> 00:25:27,107
what in our life function might look
like for this

458
00:25:28,007 --> 00:25:32,063
colonel so if we have an input rectangle
are

459
00:25:32,063 --> 00:25:36,088
we're gonna be asked to produce some new
input rectangle our prime

460
00:25:36,088 --> 00:25:39,088
so for a given rectangle try to render

461
00:25:39,088 --> 00:25:42,116
word as the rectangle in the input image
come from now if you didn't have an

462
00:25:43,016 --> 00:25:45,040
invertible function you can always
return something larger

463
00:25:45,004 --> 00:25:48,015
but that might hurt you if you were
trying to

464
00:25:48,051 --> 00:25:51,065
deal with very large images so it's
helpful to try to get this to be as

465
00:25:51,065 --> 00:25:52,110
often as possible

466
00:25:53,001 --> 00:25:56,038
in this case we have easily readable
function so we're gonna be able to do

467
00:25:56,047 --> 00:25:58,052
this exactly

468
00:25:58,097 --> 00:26:01,148
so let's take a look at the left again
nothing changes in wind so we need to

469
00:26:02,048 --> 00:26:02,055
worry about is

470
00:26:03,018 --> 00:26:07,022
what's happening along the x-axis so we
have our left point which is what are

471
00:26:07,058 --> 00:26:08,131
the original tax

472
00:26:09,031 --> 00:26:13,106
from original input are I'm up a
rectangle we want to find out where r

473
00:26:14,006 --> 00:26:17,094
Prime is we just needed put it to our
equation for destination to source only

474
00:26:17,094 --> 00:26:18,096
get a new left point prime

475
00:26:19,014 --> 00:26:22,068
min if we look at the point at the other
end of our

476
00:26:22,068 --> 00:26:25,115
input rectangle are so which is able to
our dot

477
00:26:26,015 --> 00:26:29,081
origin %ah tax plus the width of the
rectangle work early trying to render

478
00:26:29,081 --> 00:26:32,128
we can put that through our same
equation in getting new

479
00:26:33,028 --> 00:26:37,063
right point prime

480
00:26:37,063 --> 00:26:40,152
should be fairly obvious we have all the
information we need now to produce

481
00:26:41,052 --> 00:26:44,070
the rectangle for our why function

482
00:26:44,007 --> 00:26:47,080
image is going to be computed by
calculating a new with which is equal to

483
00:26:48,043 --> 00:26:52,142
right point prime minus the point prime
and then we just returning new rectangle

484
00:26:53,042 --> 00:26:56,139
which has the left point prime as its
origin

485
00:26:57,039 --> 00:27:01,053
the same origin why that we had for the
input a new with

486
00:27:01,053 --> 00:27:06,110
and the same height not tell you would
provide your R Y

487
00:27:07,001 --> 00:27:10,005
function for this colonel

488
00:27:10,005 --> 00:27:15,056
so let's take a look at how we get to
reuse our

489
00:27:16,001 --> 00:27:20,030
cold once again from our kernel we have
our equation

490
00:27:20,003 --> 00:27:23,082
and if you look at the code here now
we're back in objective-c land

491
00:27:24,009 --> 00:27:27,032
and we got to reuse the exact same math
just

492
00:27:27,032 --> 00:27:31,040
written in C is that have CI's colonel
language

493
00:27:31,004 --> 00:27:34,027
win create a function that just does the
equivalent to what we shown in the

494
00:27:34,063 --> 00:27:35,112
previous slide into a code

495
00:27:36,012 --> 00:27:39,106
and returns a new rectangle given three
input parameters

496
00:27:40,006 --> 00:27:43,010
are input rectangle are a float

497
00:27:43,001 --> 00:27:49,013
center and I'm f load all UK which is
our constant the equation

498
00:27:49,022 --> 00:27:52,057
the may have definition similarly can
reuse the same after we talked about

499
00:27:52,057 --> 00:27:52,148
earlier

500
00:27:53,048 --> 00:27:56,099
and instead of using the odometer
one-plus

501
00:27:56,099 --> 00:28:00,144
absolute value of x-over k we use one -6
over K but it's exactly the same

502
00:28:01,044 --> 00:28:03,063
otherwise

503
00:28:03,063 --> 00:28:06,095
and we can take that same to a coating
applied to

504
00:28:06,095 --> 00:28:10,119
any given input rectangle are to figure
out what the output rectangle

505
00:28:11,019 --> 00:28:14,085
our prime would be that we were
producing given a certain scale

506
00:28:14,085 --> 00:28:18,086
center to now let's take a look at the
output image map it

507
00:28:18,095 --> 00:28:21,177
which is what we used to drive our car
loan

508
00:28:22,077 --> 00:28:25,134
we took a few three-factor 33 contest
ever gonna pass into a colonel in its

509
00:28:26,034 --> 00:28:27,035
oftentimes

510
00:28:27,044 --> 00:28:30,120
good to compute what whatever as much as
we can outside the kernel if it's a

511
00:28:31,002 --> 00:28:33,069
constant and isn't changing on a per
fragment basis

512
00:28:33,087 --> 00:28:36,156
so in this case we have our a value k
then we can compute

513
00:28:37,056 --> 00:28:40,107
in objective-c landed get computer just
wants which is great

514
00:28:41,007 --> 00:28:44,028
and we're gonna compete the center which
also can we can compute outside the

515
00:28:44,028 --> 00:28:44,096
colonel

516
00:28:44,096 --> 00:28:47,180
and then finally the DOD which is what
are the output pixels that we're gonna

517
00:28:48,008 --> 00:28:49,076
backs rendering

518
00:28:50,048 --> 00:28:53,117
and then all we need to do is call a
plywood extent on the kernel that we

519
00:28:54,017 --> 00:28:54,098
created

520
00:28:54,098 --> 00:28:57,156
given id the DOD and now we have in our
why call back

521
00:28:58,056 --> 00:29:01,060
is a book called back that has three
permanent that we passin

522
00:29:01,096 --> 00:29:05,168
Inc wrecked center and K wrecked is
given to us in the case of

523
00:29:06,068 --> 00:29:10,083
8 work colonel index is always gonna be
able to Europe is only one image

524
00:29:10,083 --> 00:29:12,178
we'll talk later about other examples
about how the business little more

525
00:29:13,078 --> 00:29:14,091
complicated

526
00:29:14,091 --> 00:29:18,115
and finally we pass are two parameters
Corps Colonel centering K

527
00:29:19,015 --> 00:29:22,020
and that's all we need to do so

528
00:29:22,002 --> 00:29:25,085
earlier a little more function it's
useful for dealing with you I lamented

529
00:29:26,003 --> 00:29:26,065
that is the

530
00:29:26,065 --> 00:29:31,090
custom attributes method

531
00:29:31,009 --> 00:29:34,040
a custom after his matted let's return a
dictionary

532
00:29:35,021 --> 00:29:38,044
for the whole budget key such as what is
this filter gonna diss what's his

533
00:29:38,044 --> 00:29:39,045
display name

534
00:29:39,054 --> 00:29:41,125
what kinda categories as it applied to
so for example this is a distortion

535
00:29:42,025 --> 00:29:42,103
effect

536
00:29:43,003 --> 00:29:47,012
would apply equally well on video or
still images eccentrics her up

537
00:29:47,012 --> 00:29:50,051
and then for each input parameter you
can talk about

538
00:29:50,051 --> 00:29:54,057
what are its limits in this will help us
automatically put up you I for your

539
00:29:54,057 --> 00:29:56,120
element so if you're using it in the
context of something like

540
00:29:57,002 --> 00:30:01,096
CI fun how's it would be very easy to
just interact with your kernel

541
00:30:02,014 --> 00:30:05,035
sup thats all have to saying

542
00:30:05,035 --> 00:30:08,046
so far about color kernels and more
colonels

543
00:30:08,046 --> 00:30:12,141
let's do a brief over you so in case a
collar colonels

544
00:30:13,041 --> 00:30:16,085
we have 0 or an input images

545
00:30:16,085 --> 00:30:20,094
the input type is going to be an
underscore underscore sample

546
00:30:20,094 --> 00:30:23,102
which is effectively just affect for

547
00:30:24,074 --> 00:30:28,075
the output type: is going to be a vet
for

548
00:30:28,075 --> 00:30:31,117
you do have to specify a domain and
definition audio de

549
00:30:32,017 --> 00:30:35,055
and you do not have to specify a

550
00:30:35,055 --> 00:30:38,058
regional interest function

551
00:30:38,085 --> 00:30:42,116
in the case of a work colonel was only
ever one image the you'll be modifying

552
00:30:43,016 --> 00:30:46,074
you can get to that location near cali
trying to render by calling the function

553
00:30:46,074 --> 00:30:47,119
test corner

554
00:30:48,019 --> 00:30:51,115
which is gonna give you affect you the
output image

555
00:30:52,015 --> 00:30:55,049
is basically just gonna be a pic to
location once again

556
00:30:55,049 --> 00:30:58,051
you have to specify DOD and

557
00:30:58,069 --> 00:31:02,106
a region of interest function

558
00:31:03,006 --> 00:31:06,050
the next thing we're going to talk about
is the more general purpose colonels

559
00:31:06,005 --> 00:31:09,101
which are just see I colonels and they
have the properties listed below

560
00:31:10,046 --> 00:31:12,124
and on that note I'm headed off to tony
has been explained that and a lot more

561
00:31:13,024 --> 00:31:13,101
detail

562
00:31:14,001 --> 00:31:20,060
thank you

563
00:31:20,006 --> 00:31:23,017
thank you Alex good afternoon everyone
my name is Tony

564
00:31:23,071 --> 00:31:26,083
and what I wanna talk what now is the
third and final typeof

565
00:31:26,083 --> 00:31:30,148
colonels car general kernels

566
00:31:31,048 --> 00:31:34,063
so here they're going to the three types
occur knows we supported OS

567
00:31:34,063 --> 00:31:37,096
and what we've seen so far are the first
two color and work

568
00:31:37,096 --> 00:31:40,097
which allow you to implement the
majority of voters with that little cold

569
00:31:41,006 --> 00:31:42,008
as possible

570
00:31:42,026 --> 00:31:45,064
and out a third type car general Carlos
basically complete the set by allowing

571
00:31:45,064 --> 00:31:50,087
you to implement any kind of doctor

572
00:31:50,087 --> 00:31:53,174
so when we did need to rate the general
kernel well it simply whenever you

573
00:31:54,074 --> 00:31:56,080
cannot express Yorker know as either a
color

574
00:31:57,034 --> 00:32:00,035
or a warp one thin air could be that

575
00:32:00,044 --> 00:32:03,051
your car needs multiple samples I love
your input image

576
00:32:03,051 --> 00:32:06,060
so for example any type of player a
convolution filter would be

577
00:32:06,006 --> 00:32:10,047
that colonel and if I concur a second
scenario would be that you colonel

578
00:32:11,001 --> 00:32:14,040
contains a defendant text you read and
by that what I mean is

579
00:32:14,004 --> 00:32:17,046
you have to sample from in image a in
order to you

580
00:32:17,082 --> 00:32:20,170
determine where to sample from image be
and in a moment we'll take a look at a

581
00:32:21,007 --> 00:32:24,056
couple examples that illustrate the fair
use cases

582
00:32:25,019 --> 00:32:28,077
the first let's just go over some basic
principles behind general colonels

583
00:32:28,077 --> 00:32:31,092
if you recall this diagram earlier for
college her nose

584
00:32:31,092 --> 00:32:34,139
this shows that you can have one or more
input image images

585
00:32:35,039 --> 00:32:38,136
your kernel along with an open image but
the key difference here is that

586
00:32:39,036 --> 00:32:39,118
incentive

587
00:32:40,018 --> 00:32:43,022
each input you colonel being just
individual

588
00:32:43,022 --> 00:32:47,096
color sample we actually getting fed is
a sampler object from which you can take

589
00:32:47,096 --> 00:32:48,148
as many samples as you like

590
00:32:49,048 --> 00:32:53,048
and order them however you need so let's
take a look at how you would have to go

591
00:32:53,048 --> 00:32:53,080
about

592
00:32:53,008 --> 00:32:57,015
reading a general kernel so here we have
a very simple kernel that effectively

593
00:32:58,005 --> 00:32:59,016
does nothing

594
00:32:59,061 --> 00:33:03,075
it takes an input image as a sampler
samples from it

595
00:33:03,075 --> 00:33:06,150
and returns the color unaltered but in
order sample from this

596
00:33:07,005 --> 00:33:10,090
input image you have to provide their
corn in it in them for space

597
00:33:11,035 --> 00:33:14,090
and not invest nations face and there
are several reasons why the two faces

598
00:33:14,009 --> 00:33:14,092
are different

599
00:33:15,073 --> 00:33:18,094
want to be your input images pout but at
the very minimum

600
00:33:18,094 --> 00:33:23,097
the sampler spaces in the corner space
that's between their own one

601
00:33:24,024 --> 00:33:28,025
but instead of having a card escort and
sampler transform every single time

602
00:33:28,034 --> 00:33:33,036
you kid also conveniently call another
CR language extension call center court

603
00:33:33,036 --> 00:33:37,063
and d2 pieces over kernel functions are
actually affect me insane

604
00:33:37,063 --> 00:33:40,114
in fact Impala the exact same colonel
program

605
00:33:41,014 --> 00:33:44,069
the name I wonder why would you sell to
transform when you can just call center

606
00:33:44,069 --> 00:33:46,163
court in rate less code

607
00:33:47,063 --> 00:33:50,085
let's imagine have a kernel here that
she does something and

608
00:33:50,085 --> 00:33:53,127
in this case it's just gonna apply a of
set up two pixels in a vertical

609
00:33:54,027 --> 00:33:55,091
direction

610
00:33:55,091 --> 00:33:57,122
and let's walk through what would happen
in this at this kinda weird to be

611
00:33:58,022 --> 00:33:59,090
executed

612
00:33:59,009 --> 00:34:02,031
so say we have an input image here
that's just 600 pixels wide by four

613
00:34:03,012 --> 00:34:03,093
hundred

614
00:34:03,093 --> 00:34:06,126
in your destination space and we're just
gonna render that out to you with the

615
00:34:07,026 --> 00:34:09,029
exact same dimensions

616
00:34:09,056 --> 00:34:12,149
anything to them it's input image not
pilot our sample faces just gonna be

617
00:34:13,049 --> 00:34:17,126
normal in NOLA cornett between with the
range of 0 to 1 in both axes

618
00:34:18,026 --> 00:34:21,103
and let imagine word asked to render out
the specs on the center

619
00:34:22,003 --> 00:34:25,086
which has a value 300 index and 200 why

620
00:34:25,086 --> 00:34:28,145
in the first call to Southlake Wardle
actually transform this tie you over to

621
00:34:29,045 --> 00:34:29,077
South

622
00:34:29,077 --> 00:34:32,110
space interview about 0.5 0.5

623
00:34:33,001 --> 00:34:36,050
and then if you would apply that of that
in that space

624
00:34:36,149 --> 00:34:39,175
you get a value of $0 play five and 2.5

625
00:34:39,409 --> 00:34:42,482
and as you can tell you end up something
from outside the image

626
00:34:43,139 --> 00:34:47,166
and the result you get will be incorrect
instead where you wanna write

627
00:34:47,409 --> 00:34:50,820
is occur know that looks like this so
again let's walk through what would

628
00:34:50,082 --> 00:34:50,124
happen

629
00:34:51,024 --> 00:34:54,923
in this case for the colonel was
executed you gonna for Scott death board

630
00:34:55,139 --> 00:34:57,660
which will give you a value of the 100
and 200

631
00:34:57,066 --> 00:35:00,068
and then you can apply the of that in
that space

632
00:35:00,086 --> 00:35:03,147
and you get a value of 302 002 then you
gonna

633
00:35:04,047 --> 00:35:07,132
cost down to transform with that and
I'll give you a buyout 0.5

634
00:35:08,032 --> 00:35:11,115
and 0.5 05 anything and how this will
give you the correct

635
00:35:12,015 --> 00:35:15,022
location sample from so this is

636
00:35:15,022 --> 00:35:20,044
the right way to apply an offset in your
sample

637
00:35:20,044 --> 00:35:23,070
so now that we got the basics of the way
let's take a look at the examples that

638
00:35:23,007 --> 00:35:27,008
are a little bit more interesting first
one gonna look at

639
00:35:27,071 --> 00:35:30,154
is a motion blur filter and this is an
example where you colonel at requires

640
00:35:31,054 --> 00:35:32,107
multiple samples

641
00:35:33,007 --> 00:35:36,054
so imagine we had an input image like
this and a colonel

642
00:35:36,054 --> 00:35:39,100
we're going to compute the average up
and samples along a bi directional

643
00:35:40,000 --> 00:35:41,002
vector

644
00:35:41,002 --> 00:35:44,015
and in this particular example we're
just gonna play a horizontal

645
00:35:44,033 --> 00:35:47,104
motion blur interview to run this kernel
on all the pics Elizabeth image

646
00:35:48,004 --> 00:35:51,004
you would get a result the looks like
that

647
00:35:51,004 --> 00:35:55,051
let's take a look at what the kernel
function for this would look like

648
00:35:55,051 --> 00:35:58,065
so here we're gonna define our motion
blur turnout

649
00:35:58,065 --> 00:36:01,124
a motion blur and return it back for
it's going to take to our units the

650
00:36:02,024 --> 00:36:03,029
first one is your input image

651
00:36:03,074 --> 00:36:07,080
at the sampler and velocity vector that
would describe that direction in which

652
00:36:07,008 --> 00:36:09,026
you want a blur

653
00:36:09,098 --> 00:36:12,106
and we're gonna arbitrarily defined
number of samples to take

654
00:36:13,006 --> 00:36:16,007
in each direction in this case every 10
but which

655
00:36:16,007 --> 00:36:20,051
but it may be larger depending on what
your Mac Miller radius is

656
00:36:20,051 --> 00:36:23,112
then we're going to declare variable s
to a kingly dollar samples

657
00:36:24,012 --> 00:36:26,097
and we're gonna first guard escort to
get the current destination at the

658
00:36:26,097 --> 00:36:27,163
location a rendering to you

659
00:36:28,063 --> 00:36:33,099
and we're going to slide of that at the
update and improve life for the better

660
00:36:33,099 --> 00:36:35,183
then we're going to loop through
starting with one and the people of the

661
00:36:36,083 --> 00:36:36,156
vector

662
00:36:37,056 --> 00:36:41,078
take ten samples along the way plenty of
that in each iteration

663
00:36:41,078 --> 00:36:44,080
take the center pixel which means which
corresponds to death for

664
00:36:44,098 --> 00:36:47,105
and then take another ten samples on the
other direction

665
00:36:48,068 --> 00:36:51,153
and what you got all your samples
accumulated you just need to average

666
00:36:52,053 --> 00:36:52,136
tomorrow and we

667
00:36:53,036 --> 00:36:56,090
and that will give your final result

668
00:36:56,009 --> 00:36:59,077
so again you would put this all together
with the Seattle to subclass

669
00:37:00,058 --> 00:37:03,063
to initialize that colonel with that we
just saw is costly I Curnow

670
00:37:04,008 --> 00:37:07,055
colonel with string and after the source
that we just that we saw

671
00:37:07,055 --> 00:37:10,062
earlier in the previous slide and that
string could either be hardcoded in your

672
00:37:11,025 --> 00:37:11,121
objectives the file

673
00:37:12,021 --> 00:37:15,021
or loaded from a follow up this

674
00:37:15,021 --> 00:37:18,120
and then you're a fitness function for
this case are filter has two parameters

675
00:37:19,002 --> 00:37:25,059
input radius and an inferred angle from
which you can drive your velocity vector

676
00:37:25,077 --> 00:37:28,143
and then you just call apply on that car
no giving at those arguments

677
00:37:29,043 --> 00:37:32,046
as well as a DOD and region event risk
other functions

678
00:37:32,073 --> 00:37:34,165
which was the in a moment but first
let's take a look at how to cope with

679
00:37:35,065 --> 00:37:38,078
the DOD for the softer

680
00:37:38,078 --> 00:37:41,092
so again here's the input image with a
given extent

681
00:37:41,092 --> 00:37:44,151
and if you were to focus on the pixels
that are just outside the edges that

682
00:37:45,051 --> 00:37:48,063
image these pixels were initially clear
but because

683
00:37:48,063 --> 00:37:51,101
those pixels and up sampling inside the
image

684
00:37:52,001 --> 00:37:55,040
when the filters applied to let you
become non clear pixels

685
00:37:55,004 --> 00:37:58,049
into your domain to definition here is
basically bandito

686
00:37:58,085 --> 00:38:01,085
up in both directions that

687
00:38:01,085 --> 00:38:04,169
is that distance of the velocity vector
in this case this is just the

688
00:38:05,069 --> 00:38:08,091
along the x-direction but for the
general case your

689
00:38:08,091 --> 00:38:12,125
the expression they can use for your DOD
it's just that

690
00:38:13,025 --> 00:38:16,110
similarly for the our ally if you dare
consider

691
00:38:17,001 --> 00:38:20,007
a region that we need to render to
that's all I can

692
00:38:20,016 --> 00:38:23,039
in blue and focus on one at the edges

693
00:38:23,039 --> 00:38:26,054
above the this region and imagine if you
do

694
00:38:26,054 --> 00:38:29,063
you needed to render out that pic so in
a kernel we

695
00:38:29,063 --> 00:38:32,081
sample along the by directional vector

696
00:38:32,081 --> 00:38:35,150
and take and number of samples along
that vector

697
00:38:36,005 --> 00:38:39,047
you end up with the region that you
would need for the input image that

698
00:38:39,092 --> 00:38:40,157
corresponds to the region

699
00:38:41,057 --> 00:38:44,091
red and so again the our ally

700
00:38:44,091 --> 00:38:47,096
call back function would have an
expression that that is in this case the

701
00:38:48,041 --> 00:38:49,084
same as your DOD

702
00:38:49,084 --> 00:38:55,126
and the reason for that is because your
blog I know its metric in all directions

703
00:38:56,026 --> 00:38:59,089
but now that's take the fat one step
further imagine you had

704
00:38:59,089 --> 00:39:02,141
this input image where'd you do not want
applied the motion blur

705
00:39:03,041 --> 00:39:06,098
uniformly across the entire image
instead what you wanted

706
00:39:06,098 --> 00:39:10,111
keep the vehicle understand it's Nathan
Sharpe and blur out the background of

707
00:39:11,011 --> 00:39:12,026
the image

708
00:39:12,026 --> 00:39:15,026
and a topic that you don't wanna apply
the blur

709
00:39:15,026 --> 00:39:18,095
in the same direction tropics those said
you want to learn about radially

710
00:39:18,095 --> 00:39:21,181
to achieve an effect that looks like
this

711
00:39:22,081 --> 00:39:25,087
console when we'd imagine this images
the

712
00:39:25,087 --> 00:39:28,128
camera that anchored to the car at this
traveling for the road and the picture

713
00:39:29,028 --> 00:39:31,037
was snapped and you get a blurry
background

714
00:39:32,018 --> 00:39:36,037
and so in order to this effect what yet
you need is a mask image

715
00:39:36,037 --> 00:39:39,132
that not only masses of the vehicle but
provides a vector field that describes

716
00:39:40,032 --> 00:39:40,124
your perfect so

717
00:39:41,024 --> 00:39:45,100
their velocity slept through the street
on the filter step-by-step to see how we

718
00:39:46,000 --> 00:39:47,062
would implement it

719
00:39:47,062 --> 00:39:50,108
they start with your input image and you
gonna generate a math from that

720
00:39:51,008 --> 00:39:55,015
to Matt got the images the pictures they
do not want later

721
00:39:55,015 --> 00:39:59,103
and then using that emit mask image you
can generate a

722
00:40:00,003 --> 00:40:04,010
vector field that would describe on a
per pixel basis the velocity that you

723
00:40:04,073 --> 00:40:05,089
want to clear your

724
00:40:05,089 --> 00:40:08,100
apply a motion blur and in this case the

725
00:40:09,000 --> 00:40:12,026
velocity vectors are encoded in the red
and green channel for this image

726
00:40:12,026 --> 00:40:16,115
and the pixel that a great basically
represents is there a velocity vector

727
00:40:17,015 --> 00:40:21,068
now you can that's you can generate this
mask image either offline

728
00:40:21,068 --> 00:40:24,089
or you can even write a color current
generate this image

729
00:40:24,089 --> 00:40:26,184
let the scene for the exact as this
example that we already have this mask

730
00:40:27,084 --> 00:40:28,123
image

731
00:40:29,023 --> 00:40:33,077
then you know colonel where you need to
do first is read from this mask image

732
00:40:33,077 --> 00:40:36,119
to get your velocity vector and then

733
00:40:37,019 --> 00:40:40,104
you with sample from your input image
and apply the same motion blur fact that

734
00:40:41,004 --> 00:40:41,095
we had just saw

735
00:40:41,095 --> 00:40:44,169
using that for pics a velocity vector
endeavor to run that colonel

736
00:40:45,069 --> 00:40:48,148
that will give you the resulting image
that we just saw

737
00:40:49,048 --> 00:40:53,092
so let's see how you implement this
kernel function

738
00:40:53,092 --> 00:40:56,115
so here again was the motion blur kernel
that we saw earlier and the nice thing

739
00:40:57,015 --> 00:40:58,069
about the as Colonel language

740
00:40:58,069 --> 00:41:01,143
is you can reuse this function in the
new kernel by converting it into a

741
00:41:02,043 --> 00:41:03,056
helper function

742
00:41:03,056 --> 00:41:05,149
and the function had the exact thing
called that we thought earlier line if

743
00:41:06,049 --> 00:41:07,123
the kernel keyword:

744
00:41:08,023 --> 00:41:10,104
and then you can just layer on top of
that your new kernel function that we

745
00:41:11,004 --> 00:41:11,012
have

746
00:41:11,084 --> 00:41:14,169
call motion blur with math which in this
case were taken input image

747
00:41:15,069 --> 00:41:19,134
as well as a mask image and a parameter
car radio style specify your bachelor

748
00:41:20,034 --> 00:41:21,090
radius

749
00:41:21,009 --> 00:41:24,033
an anchor know the first thing you do is
read from that nafta Mitch

750
00:41:25,014 --> 00:41:29,021
which will contain the back to feel NRG
channels

751
00:41:29,021 --> 00:41:32,053
and because those guys are stored in a
range of zero to one you need to do

752
00:41:32,053 --> 00:41:32,146
normalize it

753
00:41:33,046 --> 00:41:36,705
to range between -1 and positive one

754
00:41:37,119 --> 00:41:40,260
what you got that directional vector you
just multiply that with radius to get a

755
00:41:40,026 --> 00:41:42,059
velocity vector

756
00:41:42,059 --> 00:41:45,070
and then you just past the velocity
vector into that motion blur helper

757
00:41:45,007 --> 00:41:45,073
function

758
00:41:46,036 --> 00:41:49,041
and I would do that calculation for you
and give you the final result

759
00:41:49,086 --> 00:41:53,143
that you what and again you put this all
together with the I thought a subclass

760
00:41:54,043 --> 00:41:58,068
which here is actually very similar to
the first example that we just saw

761
00:41:58,068 --> 00:42:01,076
the difference here the difference here
is the flight a change in the DOD

762
00:42:02,048 --> 00:42:02,937
calculation

763
00:42:03,369 --> 00:42:07,530
where instead of a velocity vector we
have it we just have an interest rather

764
00:42:07,053 --> 00:42:12,058
that basically represents the maximum
velocity vector in your vector field

765
00:42:12,058 --> 00:42:15,072
and the other difference here is when
you apply the Cournot

766
00:42:15,072 --> 00:42:18,096
the are like other function actually

767
00:42:18,096 --> 00:42:21,105
need index parameter and is the first
example where we see that because we

768
00:42:22,086 --> 00:42:24,091
have more than one input images

769
00:42:24,091 --> 00:42:29,093
first take a look at what are like our
battles for that looks like

770
00:42:30,011 --> 00:42:32,063
what such pretty straightforward you
just need to check the index parameter

771
00:42:32,063 --> 00:42:33,072
for which

772
00:42:33,072 --> 00:42:36,075
your for which there are lies being
called for

773
00:42:36,075 --> 00:42:39,142
and it the index is equal to 0 that
corresponds to our input image

774
00:42:40,042 --> 00:42:44,491
and you returned the same expression
that we saw earlier but if the next

775
00:42:44,869 --> 00:42:48,740
in the index is equal to 1 that caused
by three masked image

776
00:42:48,074 --> 00:42:52,142
and for this is that even more simply
just return the same incorrect because

777
00:42:53,042 --> 00:42:56,136
we just take one sample from a mask
image using Southport

778
00:42:57,036 --> 00:43:01,067
and so that maps 121 to the same
location

779
00:43:01,067 --> 00:43:04,075
so as you can see from these two
examples we can implement

780
00:43:05,047 --> 00:43:08,144
any kind of filter using general
colonels the matter how complex they are

781
00:43:09,044 --> 00:43:11,127
and the reason for that is because there
was designed to be a death of Lazcano

782
00:43:12,027 --> 00:43:13,036
type

783
00:43:13,036 --> 00:43:17,050
that had the exact same language syntax
and semantics as those 10

784
00:43:17,005 --> 00:43:20,030
and as a and as a byproduct that you can
actually the port the agenda colonels

785
00:43:20,075 --> 00:43:21,101
back and forth between the

786
00:43:22,001 --> 00:43:25,053
two platforms with very little effort
and in fact I love the new

787
00:43:25,053 --> 00:43:27,110
felt new built-in filters that they've
been mentioned earlier we're actually

788
00:43:28,001 --> 00:43:29,038
ported over to I'll with

789
00:43:29,047 --> 00:43:33,059
using general colonels namely the class
the social filter

790
00:43:33,059 --> 00:43:36,074
and the histogram display filter

791
00:43:36,074 --> 00:43:38,166
thought the great flexibility that
general colonels offer you there are

792
00:43:39,066 --> 00:43:39,118
some

793
00:43:40,018 --> 00:43:43,059
performance American Federation to keep
in mind

794
00:43:43,059 --> 00:43:46,115
with respect to performance one thing
you should be aware of his

795
00:43:47,015 --> 00:43:50,080
in order to get path after object your a
general kernel

796
00:43:50,008 --> 00:43:54,043
we have to render out each input image
to an intermediate buffers

797
00:43:55,015 --> 00:43:58,016
and so effectively each input image to
your

798
00:43:58,016 --> 00:44:02,045
the actor no at the next to render past
your photograph

799
00:44:02,045 --> 00:44:04,099
and because we need to render out
intermedia buffers you may need to

800
00:44:04,099 --> 00:44:08,111
decide what format is most appropriate
for a different situation

801
00:44:09,011 --> 00:44:12,045
in the case of your work in space being
no by your color badge

802
00:44:12,045 --> 00:44:15,099
and is off you can just safely use the a
bit

803
00:44:15,099 --> 00:44:19,108
RGBA format without worrying about any
quantization errors

804
00:44:20,008 --> 00:44:24,011
being introduced in your by image
pipeline but in the case of your working

805
00:44:24,011 --> 00:44:27,040
space being the default DirectSound 09

806
00:44:27,004 --> 00:44:31,006
you can use the default a bit format but
that would require

807
00:44:31,042 --> 00:44:34,128
a conversion from the near to as RGB
space when writing out the intermediate

808
00:44:35,028 --> 00:44:35,099
buffer

809
00:44:35,099 --> 00:44:38,133
and vice versa when reading back from
the internet for

810
00:44:39,033 --> 00:44:43,090
alternatively and this is new in our
state is the ability to specify a 16-bit

811
00:44:43,009 --> 00:44:44,061
Apple format

812
00:44:45,042 --> 00:44:49,061
so you can do that and not and avoid
having to incur the costs the conversion

813
00:44:49,061 --> 00:44:52,064
at everything a pic so but it would
require twice the amount memory

814
00:44:52,064 --> 00:44:57,125
so the right choice will ultimately
depend on what your requirements are

815
00:44:58,025 --> 00:45:01,057
now with these considerations in mind
you should

816
00:45:01,057 --> 00:45:04,078
be careful not to you think that every
type a filter needs

817
00:45:04,078 --> 00:45:08,140
the be implemented with the general
kernel even if it's a complex one

818
00:45:09,004 --> 00:45:13,008
consider for example a square
kaleidoscope

819
00:45:13,044 --> 00:45:16,102
filter which by the way is very similar
to the cloud of smoke filter on the

820
00:45:17,002 --> 00:45:17,067
photo booth

821
00:45:17,067 --> 00:45:20,155
but instead of rigging triangles we just
everything squares

822
00:45:21,055 --> 00:45:25,138
and like so so at first glance you might
think that this filter

823
00:45:26,038 --> 00:45:29,082
would need a general kernel because it
contains both at geometric

824
00:45:29,082 --> 00:45:30,145
transformation

825
00:45:31,045 --> 00:45:34,066
that works the space that you're
something from as well as a

826
00:45:34,066 --> 00:45:38,070
color cuando as well as the color fall
off

827
00:45:38,007 --> 00:45:41,048
and so you cannot represent this colonel
with either a war for a color

828
00:45:42,011 --> 00:45:45,105
colonel so you can use the general
kernel which is fine

829
00:45:46,005 --> 00:45:49,076
but will see in this case that you
actually don't have to

830
00:45:49,076 --> 00:45:52,118
let's see if there's a better way to
implement the

831
00:45:53,018 --> 00:45:57,035
if you to break down this filter in two
stages you notice that the first aid is

832
00:45:57,035 --> 00:45:57,554
just

833
00:45:57,869 --> 00:46:01,130
the geometric transformation

834
00:46:01,013 --> 00:46:04,036
for which you can just supply a worker
no

835
00:46:04,036 --> 00:46:08,115
and then the second stage is the color
fall off or attenuation from the center

836
00:46:09,015 --> 00:46:13,020
and for that you can apply a color
colonel

837
00:46:13,002 --> 00:46:16,033
and so in this example you can see that
you can just came together a war been a

838
00:46:16,051 --> 00:46:16,149
color Curnow

839
00:46:17,049 --> 00:46:20,067
energy and get the same effect and this
is actually the

840
00:46:20,067 --> 00:46:23,090
better way to implement still ther for
some other reason for some of the

841
00:46:23,009 --> 00:46:25,040
advantages that we heard earlier

842
00:46:26,021 --> 00:46:30,064
with using the specialized colonel types

843
00:46:30,064 --> 00:46:34,140
so here the here's the kernel code
kernel function for the worker no

844
00:46:35,004 --> 00:46:37,070
but in in the interest the time-warner
I'm not gonna bother walking through all

845
00:46:38,006 --> 00:46:39,079
the math that's involved in this

846
00:46:39,079 --> 00:46:42,105
but I recommend that you review this on
your own later or even

847
00:46:43,005 --> 00:46:45,096
copy and paste it into your own custom
filter to cancer convince yourself that

848
00:46:45,096 --> 00:46:48,101
it all works correctly

849
00:46:49,001 --> 00:46:52,073
similarly this is the kinda function for
the college girl which you can review at

850
00:46:52,073 --> 00:46:53,094
your leisure

851
00:46:53,094 --> 00:46:56,123
but assuming we have the two kinda
functions re-written let that you take a

852
00:46:57,023 --> 00:47:00,064
look at how you would put them all
together

853
00:47:00,064 --> 00:47:03,090
the you start with the input image and
the first thing is to apply the worker

854
00:47:03,009 --> 00:47:04,054
no

855
00:47:05,035 --> 00:47:08,127
and Avira run that for all the pics
those you would get your intermediate

856
00:47:09,027 --> 00:47:09,072
image

857
00:47:09,072 --> 00:47:13,105
which has the geometric transformation
and for this example the

858
00:47:14,005 --> 00:47:17,057
DOD for the filters actually an infinite
wrecked because

859
00:47:17,057 --> 00:47:21,120
the repeating squares extend out
indefinitely in all directions

860
00:47:22,002 --> 00:47:24,089
and the are like our back porch for
function for this is actually very

861
00:47:25,007 --> 00:47:27,029
simple as just a constant threat

862
00:47:27,029 --> 00:47:31,034
that is defined by this little orange
rectangle

863
00:47:31,034 --> 00:47:34,063
in the intimate into an image

864
00:47:34,369 --> 00:47:37,060
and that's because all the pixels that
need to be rendered just beneath the

865
00:47:37,006 --> 00:47:37,099
sample from that

866
00:47:37,099 --> 00:47:40,172
volatile region and then the next step

867
00:47:41,072 --> 00:47:44,075
is to apply your color colonel

868
00:47:45,002 --> 00:47:49,005
passing at input the result from your
work or no

869
00:47:49,005 --> 00:47:52,040
and the result that you get after
applying that is final result that you

870
00:47:52,004 --> 00:47:52,071
white

871
00:47:53,007 --> 00:47:56,042
and again the DOD for your final result
is internet because to

872
00:47:56,042 --> 00:47:59,134
worker no image was also Internet

873
00:48:00,034 --> 00:48:03,129
so the key takeaway from all this is you
should only write a general kernel

874
00:48:04,029 --> 00:48:08,122
when needed namely that the scenarios we
saw with the motion blur examples

875
00:48:09,022 --> 00:48:12,060
but if you're not sure you can also rate
a general

876
00:48:12,006 --> 00:48:15,040
initially for rapid prototyping but then
you should try replacing it with some

877
00:48:15,094 --> 00:48:17,100
combination up or pink color colonels

878
00:48:18,000 --> 00:48:22,064
to get the for the second better
performance and/or memory usage

879
00:48:22,064 --> 00:48:25,090
and with that I'm gonna head back over
to Alex just this a few hours before we

880
00:48:25,009 --> 00:48:25,090
wrap up

881
00:48:26,071 --> 00:48:32,076
take it

882
00:48:32,076 --> 00:48:35,110
you doing okay so

883
00:48:36,001 --> 00:48:39,047
let's quickly talk about platform
differences

884
00:48:39,056 --> 00:48:42,091
I have some good news there's only one
slide impact

885
00:48:42,091 --> 00:48:45,125
the platform differences they actually
aren't that dramatic

886
00:48:46,025 --> 00:48:49,394
there are some slight differences for
example what kinda renders are supported

887
00:48:49,619 --> 00:48:53,740
also the colonel language NIOS

888
00:48:53,074 --> 00:48:56,102
a mouse control floor so you can
expressed more complicated

889
00:48:57,002 --> 00:49:01,018
things in the language we have three
kinds of classes

890
00:49:01,018 --> 00:49:04,030
to do I kernels on iowa's whereas on

891
00:49:04,003 --> 00:49:08,042
question we have just one you cannot
specify a

892
00:49:08,069 --> 00:49:11,131
samper mode on I was but you can always
10

893
00:49:12,031 --> 00:49:16,047
filter shape is different it's only a
rectangle on I A West purses /a

894
00:49:16,047 --> 00:49:20,073
filter shape on West Ham pero i Function
the

895
00:49:20,073 --> 00:49:24,166
on iowa's is done via block pointer
whereas on the west end it's done

896
00:49:25,066 --> 00:49:29,072
as a I'm selector

897
00:49:29,072 --> 00:49:32,109
from the filter and then there are some
tiny tiny differences

898
00:49:33,009 --> 00:49:36,056
a CI filter set the faults gets called

899
00:49:36,056 --> 00:49:40,074
automatically on a West whereas on
always 10 you need to do that explicitly

900
00:49:40,074 --> 00:49:41,146
on your own

901
00:49:42,046 --> 00:49:45,052
and then finally the custom attributes
method is a class method on

902
00:49:46,006 --> 00:49:49,085
class method on I O S and as an instant
method instance method

903
00:49:49,085 --> 00:49:52,108
on West End so

904
00:49:53,008 --> 00:49:56,104
let's talk about what we learned today
first things first

905
00:49:57,004 --> 00:50:00,007
we learned how to right color warp

906
00:50:00,007 --> 00:50:04,056
and general purpose kernels

907
00:50:04,119 --> 00:50:07,310
we went through a number of examples
that showed you

908
00:50:07,031 --> 00:50:10,077
how to start thinking about what are the
main definition is for your kernel

909
00:50:10,077 --> 00:50:13,094
and then also how to rate a region of
interest function

910
00:50:13,094 --> 00:50:17,096
and what's great about the way we've
implemented things and I wes is that

911
00:50:18,014 --> 00:50:21,019
you we are gonna force you to write an R
Y

912
00:50:21,019 --> 00:50:24,025
function when you have to and so it's
not

913
00:50:24,025 --> 00:50:27,088
something that you can accidentally
forget to do so

914
00:50:27,088 --> 00:50:30,109
we think that's a great plus mery
function

915
00:50:31,009 --> 00:50:34,026
one thing I would like for you to
remember is that it is really important

916
00:50:34,026 --> 00:50:35,071
for you to do this if you want to get

917
00:50:35,071 --> 00:50:40,114
good performance when dealing with very
large images

918
00:50:41,014 --> 00:50:44,099
and then finally we talked about
platform differences very briefly

919
00:50:44,099 --> 00:50:48,145
time between I O S and West End

920
00:50:49,045 --> 00:50:52,090
some on that note I would like to invite
you all to

921
00:50:52,009 --> 00:50:56,054
you have any additional questions you
can email Allen Schaeffer

922
00:50:57,035 --> 00:51:00,058
we have some resources that DTS

923
00:51:00,058 --> 00:51:03,065
and there's also the their forms which
we all look at

924
00:51:03,065 --> 00:51:06,163
to see if anyone have questions with
core image

925
00:51:07,063 --> 00:51:09,090
there are a few additional sessions
which may be of interest to you if

926
00:51:09,009 --> 00:51:10,010
you're

927
00:51:10,091 --> 00:51:13,097
interested in writing colonels have your
own including the introducing for a

928
00:51:14,051 --> 00:51:15,099
frameworks

929
00:51:15,099 --> 00:51:18,145
I'm which took place earlier today and

930
00:51:19,045 --> 00:51:22,103
david stockman earlier that took place
I'm

931
00:51:23,003 --> 00:51:26,082
just right here we're really looking
forward to

932
00:51:26,082 --> 00:51:29,101
seeing all the effects you are going to
create using

933
00:51:30,001 --> 00:51:33,063
custom kernels and hope you enjoy using
them on I always say

934
00:51:33,063 --> 00:51:35,071
thank you very much once again I hope
you enjoy the rest the conference

