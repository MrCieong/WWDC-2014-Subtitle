1
00:00:11,065 --> 00:00:13,076
my name is David Hayward and welcomed

2
00:00:13,076 --> 00:00:15,081
first up to discussions today

3
00:00:15,081 --> 00:00:18,179
or image in we'll be talking today about
what's new in core image on both

4
00:00:19,079 --> 00:00:23,082
iowa's and West End so what is

5
00:00:24,009 --> 00:00:29,027
core image core image is a fast easy
flexible framework for doing image

6
00:00:29,027 --> 00:00:29,105
processing

7
00:00:30,005 --> 00:00:33,060
and it supports oliver supported devices
on both

8
00:00:33,006 --> 00:00:36,051
ISL s and OS 10 it's also used by

9
00:00:37,005 --> 00:00:40,034
several of our key applications such as
photos

10
00:00:40,079 --> 00:00:43,600
and on both platforms and allows you to
get very

11
00:00:43,006 --> 00:00:47,092
good performance results and very
flexible output for those of you who may

12
00:00:48,046 --> 00:00:48,092
be

13
00:00:48,092 --> 00:00:51,115
new to core image I just wanna take a
few slides to talk about some of the key

14
00:00:52,015 --> 00:00:54,022
concepts could also be relevant for that

15
00:00:54,022 --> 00:00:57,057
press the discussion today the first of

16
00:00:57,057 --> 00:01:00,081
filters core image filters ally to
perform per

17
00:01:00,081 --> 00:01:03,168
pixel operations on an image no simple
example

18
00:01:04,068 --> 00:01:08,083
you have an original image and you want
to apply it sepia tone filter to it

19
00:01:08,083 --> 00:01:12,622
and you get a resulting image policy
that's fun but where things start to get

20
00:01:13,369 --> 00:01:14,373
interesting is where you

21
00:01:14,409 --> 00:01:18,090
combine multiple filters neither chains
or complex graphs

22
00:01:18,009 --> 00:01:22,056
and here an example you can see a very
interesting result you can get by just

23
00:01:22,056 --> 00:01:26,102
training three filters together sepia
tone prosecutor rotation to turn it into

24
00:01:27,002 --> 00:01:28,021
a plutonium age

25
00:01:28,039 --> 00:01:33,700
plus contrast to make it more dramatic
one thing to keep in mind is these

26
00:01:33,007 --> 00:01:34,206
intermediate images

27
00:01:34,899 --> 00:01:38,810
are actually like we'd object so there
need not necessarily even be memory

28
00:01:38,081 --> 00:01:41,200
associated with these have any
significant paramount

29
00:01:41,929 --> 00:01:45,020
another thing that's important to keep
in mind is

30
00:01:45,002 --> 00:01:49,101
each filter may have one or more
colonels Associated

31
00:01:49,119 --> 00:01:52,350
so these kernels are the actual
algorithm that implements

32
00:01:52,035 --> 00:01:56,224
filters affect and one of the great
things about core image

33
00:01:56,539 --> 00:02:00,590
is we can take these colonels and
concatenate them into programs

34
00:02:00,059 --> 00:02:04,178
and this allows us runtime: to minimize
the amount of intermediate results

35
00:02:04,709 --> 00:02:08,330
and with some great a compiler
technology on

36
00:02:08,033 --> 00:02:11,048
both at the image processing and at a
lower level compiler level

37
00:02:11,048 --> 00:02:14,102
were able to get the best possible
performance have a complex crash

38
00:02:15,002 --> 00:02:18,066
so that's the basics in terms of how it
works

39
00:02:18,066 --> 00:02:21,130
these are the four key object types that
you need to be familiar with if you want

40
00:02:22,003 --> 00:02:22,912
to use core image

41
00:02:23,209 --> 00:02:26,211
the first which will be talking about a
lot today SCI colonel

42
00:02:26,409 --> 00:02:29,414
and this represents a program that's
written in sea ice

43
00:02:29,459 --> 00:02:33,470
work or images colonel language second
object type is a

44
00:02:33,569 --> 00:02:36,575
CI filter and this is an object that has

45
00:02:36,629 --> 00:02:39,780
on mutable input parameters and those
parameters can be

46
00:02:39,078 --> 00:02:43,090
images are numbers are vectors are other
types and it also

47
00:02:43,009 --> 00:02:46,106
arm allows you to use one or more
colonels to create a new image based on

48
00:02:47,087 --> 00:02:48,626
the current state at the output

49
00:02:49,409 --> 00:02:53,360
at the input parameters third

50
00:02:53,036 --> 00:02:57,135
key type is a CIA image and this is an
immutable object that represents the rep

51
00:02:57,459 --> 00:02:58,370
receipt recipe

52
00:02:58,037 --> 00:03:02,246
to produce an image just the active
creating an image does not necessarily

53
00:03:02,579 --> 00:03:06,750
and do any real work the actual work
occurs when you render a CIA mission to

54
00:03:06,075 --> 00:03:07,234
a CI context

55
00:03:07,909 --> 00:03:12,480
and that's the object through which you
render results so those are the basics

56
00:03:12,048 --> 00:03:16,112
when I wanna talk about today's what's
new in core images here we have a lot to

57
00:03:17,012 --> 00:03:17,661
talk about

58
00:03:17,769 --> 00:03:21,200
we have a bunch of new things that are
on iowa's for example

59
00:03:21,002 --> 00:03:24,077
we have are most requested feature which
is custom CI colonels

60
00:03:24,095 --> 00:03:28,117
we also are like talk about how you can
do photo editing extensions using Core

61
00:03:29,017 --> 00:03:29,064
Image

62
00:03:29,064 --> 00:03:32,089
and also how we can now support large
images on West

63
00:03:32,089 --> 00:03:35,175
we also offer made some improvements to
have a GP render is used

64
00:03:36,075 --> 00:03:39,079
we also has an API monetization

65
00:03:40,015 --> 00:03:43,884
we have some new built-in filters we
have some UCI detectors

66
00:03:44,019 --> 00:03:47,290
and then last time we talk about some
new things that we have on me

67
00:03:47,029 --> 00:03:50,448
on Mac OS 10 side on

68
00:03:50,709 --> 00:03:55,718
improve raw support and how to use a
second cheap you sup

69
00:03:55,799 --> 00:03:58,857
first and most interesting i think is
custom CI kernels and I'll ass as I

70
00:03:59,379 --> 00:04:00,290
mention this has been our

71
00:04:00,029 --> 00:04:05,050
top requested feature encore image
already has 115 great built-in filters

72
00:04:05,005 --> 00:04:05,078
on iowa's

73
00:04:06,023 --> 00:04:09,152
but now you can easily create your own
so this is a

74
00:04:09,359 --> 00:04:12,450
terrific feature for developers when
you're

75
00:04:12,045 --> 00:04:16,454
writing CI are kernels on IRS you can
use the same CI colonel language that he

76
00:04:16,859 --> 00:04:19,900
you stay on OS 10 there are few
extensions

77
00:04:20,269 --> 00:04:23,630
on which allow making typical of are
colonels even easier

78
00:04:23,063 --> 00:04:26,070
and we'll talk about that and much more
detail in our next presentation

79
00:04:26,007 --> 00:04:29,081
work in your RCI colonels live

80
00:04:30,044 --> 00:04:33,047
well they can live in your application
the kernel code can either

81
00:04:33,074 --> 00:04:36,140
be a text resource or it can just be in
a string if you'd like

82
00:04:37,004 --> 00:04:42,008
are the kernel is are wrapped up in a CI
filter subclass that you provide

83
00:04:42,044 --> 00:04:45,102
that applies a colonel's to produce an
output image

84
00:04:46,002 --> 00:04:49,019
another great place for your custom CI
colonels to go is

85
00:04:49,019 --> 00:04:52,091
inside a nap extension for example photo
editing extensions

86
00:04:52,091 --> 00:04:55,098
can you see I kernels and CI filters
across as very effectively

87
00:04:56,061 --> 00:05:02,103
and you can use them to modify our your
photos or videos

88
00:05:03,003 --> 00:05:06,003
so again we'll be talking our next
presentation

89
00:05:06,003 --> 00:05:10,042
in much more detail about how to use CI
colonels I less but let me just give you

90
00:05:10,069 --> 00:05:11,076
a little teaser now

91
00:05:11,139 --> 00:05:15,157
were how simple it is here we haven't
just basically two lines of code

92
00:05:15,319 --> 00:05:18,940
how do you say a custom CI colonel we
created in a string

93
00:05:18,094 --> 00:05:21,165
which has some CI encore image our
source code in it

94
00:05:22,065 --> 00:05:26,864
this is a very simple are colonel that
takes a pixel value an inverter

95
00:05:27,449 --> 00:05:30,502
and you'll notice it's actually
subtracting it not from one but from the

96
00:05:30,979 --> 00:05:31,610
alpha value

97
00:05:31,061 --> 00:05:34,370
that's the correct way to invert if
you've got preoccupied data

98
00:05:34,919 --> 00:05:38,966
which is what coronet receives once you
have the program written

99
00:05:39,389 --> 00:05:43,220
then all you need to do is create a RCI
colonel object from not

100
00:05:43,022 --> 00:05:48,053
string and then apply it you can specify
two things one is the

101
00:05:48,053 --> 00:05:51,077
are the resulting extent of the produced
image

102
00:05:51,077 --> 00:05:54,078
and also the arguments that will be
passed

103
00:05:54,087 --> 00:05:57,159
to that colonel in this particular
example there's only a single argument

104
00:05:58,059 --> 00:05:59,608
which is the input image

105
00:06:00,139 --> 00:06:03,620
and so as a result our arguments part
down below

106
00:06:03,062 --> 00:06:08,141
arm is just an array with a single image
in

107
00:06:08,699 --> 00:06:11,560
so to give you a little bit of idea what
that looks like in practice I have a

108
00:06:11,056 --> 00:06:12,061
quick demo

109
00:06:12,061 --> 00:06:16,068
this is a fine example that we wrote

110
00:06:16,068 --> 00:06:18,155
and it's kind of an example of something
that you wouldn't we would necessarily

111
00:06:19,055 --> 00:06:21,137
has a built-in filter

112
00:06:22,037 --> 00:06:25,084
see but it would be funny for

113
00:06:25,084 --> 00:06:28,169
presentation like this so we have an
application called cock or image from

114
00:06:29,069 --> 00:06:29,162
house

115
00:06:30,062 --> 00:06:33,096
and this allows you to explore all the
built-in filters

116
00:06:33,096 --> 00:06:36,555
and also allows you to seek some sample
code for how to write

117
00:06:37,419 --> 00:06:41,530
our custom CI colonels so the image
starts out as gray

118
00:06:41,053 --> 00:06:44,812
the first thing we need to do is provide
a an image to start with and we're gonna

119
00:06:45,289 --> 00:06:49,020
say that we want the video feed to come
in and

120
00:06:49,002 --> 00:06:52,077
on-demand out a filter and you can see
we're seeing a list of all the filters

121
00:06:52,077 --> 00:06:52,169
that are

122
00:06:53,069 --> 00:06:58,448
park or image and we created one down
here called WC 2014

123
00:06:59,069 --> 00:07:02,780
and hope you can see this I can kinda
waiting for the camera

124
00:07:02,078 --> 00:07:06,457
arm what we're doing here is actually on
algorithmically

125
00:07:07,159 --> 00:07:11,430
taking the luminance from the video feed
and then using not to control the size

126
00:07:11,043 --> 00:07:12,782
of a geometry geometrically

127
00:07:13,169 --> 00:07:16,190
power generated rounded rectangle

128
00:07:16,379 --> 00:07:19,610
on and we can change the size of that on

129
00:07:19,061 --> 00:07:23,270
larger or smaller or we can change the
amount of the rounded

130
00:07:23,819 --> 00:07:27,750
radius here sexual easier to see

131
00:07:27,075 --> 00:07:30,096
that it's a video feed when it's smaller
but it looks

132
00:07:30,096 --> 00:07:33,395
more called

133
00:07:34,259 --> 00:07:38,690
so I'm and we're getting 30 frames per
second on that which is probably the

134
00:07:38,069 --> 00:07:38,828
frame rate have

135
00:07:39,449 --> 00:07:42,930
the have the camera so that's our

136
00:07:42,093 --> 00:07:46,802
a short example and we'll have that code
available for talent at some point soon

137
00:07:47,639 --> 00:07:51,642
so again that's custom CI colonels and
please come to our second session to see

138
00:07:51,669 --> 00:07:57,180
all week learn about that are the next
thing about to talk about briefly is the

139
00:07:57,018 --> 00:08:00,084
our photo editing extensions on iowa's
their hold talks on that

140
00:08:00,084 --> 00:08:03,102
this year to be that easy I'd like to
talk a little bit

141
00:08:04,002 --> 00:08:07,030
on about how that works in relationship
to core image

142
00:08:07,003 --> 00:08:10,272
so here's just a little short video
run-through of what how this works in

143
00:08:10,569 --> 00:08:11,970
practice

144
00:08:11,097 --> 00:08:14,153
I we have image user went at they

145
00:08:15,053 --> 00:08:18,472
product elicit extensions we picked the
core image 1

146
00:08:18,949 --> 00:08:21,974
and this particular core image-based
extension has two sliders

147
00:08:22,199 --> 00:08:25,860
one is the amount a sepia tone which we
can slide

148
00:08:25,086 --> 00:08:30,365
and we're getting very good frame rates
to the screen as we do this

149
00:08:31,139 --> 00:08:35,390
and then the second slider is a vignette
amount so it starts out with a large

150
00:08:35,039 --> 00:08:37,131
radius and if you bring the radius mall
are you get more

151
00:08:38,031 --> 00:08:41,114
have the vignette a fact as you can down

152
00:08:42,014 --> 00:08:45,090
and all this is happening right now on
display sized image

153
00:08:45,009 --> 00:08:48,438
later on when you hit save it's applied
on a full-size image

154
00:08:49,329 --> 00:08:53,800
which is 12 megapixel image in this case
and it goes back into your library with

155
00:08:53,008 --> 00:08:54,021
your at

156
00:08:54,093 --> 00:08:58,130
so that's how it looks in practice I'm
not to go into too much detail on how to

157
00:08:59,003 --> 00:09:02,035
occur despite me some good advice here
our first of

158
00:09:02,062 --> 00:09:05,135
you can start to create a photo editing
extension by going into the templates

159
00:09:06,035 --> 00:09:10,264
in Xcode I will also provide some sample
sample code as well so that a good

160
00:09:10,579 --> 00:09:11,581
starting point

161
00:09:11,779 --> 00:09:14,730
on but as I said I wanted to talk a bit
about how you can you score image

162
00:09:14,073 --> 00:09:14,164
effectively

163
00:09:15,064 --> 00:09:19,573
within photo editing extensions is
basically three steps

164
00:09:20,149 --> 00:09:23,450
the first step is one year extension is
initialized

165
00:09:23,045 --> 00:09:27,684
what you want to do is you wanna ass the
editing input object for display size

166
00:09:28,089 --> 00:09:33,000
image initially that a UI image object
in from that you can create a CG image

167
00:09:33,000 --> 00:09:36,149
and then from now to see i image on that

168
00:09:36,149 --> 00:09:38,690
sounds like a couple steps but it's
actually those are just lightweight

169
00:09:38,069 --> 00:09:39,148
rappers

170
00:09:39,769 --> 00:09:43,880
once you've created that CIA image we're
gonna store that in a property for our

171
00:09:43,088 --> 00:09:47,107
our delegate and everything it's good
time to do it at that time is to create

172
00:09:48,007 --> 00:09:51,966
your view that you can be rendering into
we recommend using a Goku

173
00:09:52,029 --> 00:09:55,084
and also create a CI context that is
associated with that

174
00:09:55,579 --> 00:09:59,655
without you and it's good to store that
away in a property as well

175
00:10:00,339 --> 00:10:03,670
step 2 is on what you do every time the
user

176
00:10:03,067 --> 00:10:07,085
makes it added in your extensions every
time the slider moves

177
00:10:07,085 --> 00:10:11,112
and this is very simple what you do is
you recall the display size CIA image

178
00:10:12,012 --> 00:10:14,014
that we created in step 1

179
00:10:14,014 --> 00:10:17,087
we apply the filters to correspond to
the slider adjustments

180
00:10:17,087 --> 00:10:21,125
so in the previous example was are the
sepia tone filter and the

181
00:10:22,025 --> 00:10:26,054
vignette effect filter and in with you
change together you get the output image

182
00:10:26,279 --> 00:10:27,297
from that

183
00:10:27,459 --> 00:10:30,541
and then you're gonna draw that using
the CI context that we also created in

184
00:10:31,279 --> 00:10:36,291
Sep point and step three is what happens
when the user clicks the Done button

185
00:10:36,399 --> 00:10:39,860
and it's a slightly different because in
this case you want to apply the effect

186
00:10:39,086 --> 00:10:40,149
on the full-size image

187
00:10:41,049 --> 00:10:44,138
so what we have here as we can have the
adding input object for its

188
00:10:45,038 --> 00:10:49,047
full-sized image URL from that we create
a CIA image

189
00:10:49,389 --> 00:10:53,490
can we apply the filters to this as well
now for most part this is the same as we

190
00:10:53,049 --> 00:10:54,051
did in step 2

191
00:10:54,069 --> 00:10:57,398
some parameters however such as radius
is may need to be scaled

192
00:10:58,019 --> 00:11:02,000
arm in accordance the fact that you're
now working on a full-size image

193
00:11:02,000 --> 00:11:05,087
once you on have chained together your
filters you ask the output image

194
00:11:05,087 --> 00:11:09,746
and then you on the way this API works
as you return a CD image so you can do

195
00:11:10,529 --> 00:11:12,300
that very easily work or image

196
00:11:12,003 --> 00:11:15,102
you ask a CI context to create a sea
change

197
00:11:15,399 --> 00:11:20,440
and this will work even on the full-size
image

198
00:11:20,044 --> 00:11:23,057
so that brings me to the next subject i
wanna talk about today which is working

199
00:11:23,057 --> 00:11:23,112
on

200
00:11:24,012 --> 00:11:28,161
large images on iowa's so we made some
great improvements here in

201
00:11:28,269 --> 00:11:31,313
addition to the supporting kernels as I
think our second key thing that we've

202
00:11:31,709 --> 00:11:34,480
added this year on iowa's

203
00:11:34,048 --> 00:11:38,129
so now you can we are full support for
images that are larger than the Jeep you

204
00:11:39,029 --> 00:11:40,448
text her limits

205
00:11:40,709 --> 00:11:44,190
and this means the input images can now
be larger than 4k

206
00:11:44,019 --> 00:11:47,044
and output renders can be larger than 4k

207
00:11:47,044 --> 00:11:50,051
we refer to this as large images but in
practice

208
00:11:50,051 --> 00:11:53,067
4k images are not that large these days
many ever

209
00:11:53,067 --> 00:11:57,091
devices cameras heard bigger than that
so this is actually really critical

210
00:11:57,091 --> 00:12:00,144
feature to support this size image as
well

211
00:12:01,044 --> 00:12:04,693
the way we achieve this automatically is
that we have on a Mac tiling support

212
00:12:05,089 --> 00:12:06,180
cordage

213
00:12:06,018 --> 00:12:09,049
and this among other things leverages
some great improvements that were made

214
00:12:09,049 --> 00:12:10,062
an image I O

215
00:12:10,062 --> 00:12:14,079
and their J pegged to improve how Dakota
encoder works

216
00:12:14,079 --> 00:12:17,111
and also there's some great features and
core image

217
00:12:18,011 --> 00:12:22,036
our language that allow supporting have
large image is well

218
00:12:22,036 --> 00:12:25,045
let me talk about that last item in a
little bit detail so the CI colonel

219
00:12:26,026 --> 00:12:26,034
language

220
00:12:27,006 --> 00:12:30,032
allows your kernels to just work
automatically regardless of whether

221
00:12:30,032 --> 00:12:30,911
tiling

222
00:12:31,199 --> 00:12:35,060
happens or how at what size it happens
so this is a great feature that makes

223
00:12:35,006 --> 00:12:36,345
reading see i've

224
00:12:36,399 --> 00:12:39,850
colonels very flexible the way

225
00:12:39,085 --> 00:12:42,100
this is achieved by toukie extensions if

226
00:12:43,000 --> 00:12:46,016
have in our language and these are
available both on OS

227
00:12:46,016 --> 00:12:50,024
can and on I lessnau the first is a
function called discordant

228
00:12:50,024 --> 00:12:53,047
heard escort and that allow score image

229
00:12:53,047 --> 00:12:57,666
to support tiled output automatically
basically allows your kernel to see the

230
00:12:58,089 --> 00:12:58,164
desk corner

231
00:12:58,839 --> 00:13:02,180
can in the native images space even
though we may only be rendering

232
00:13:02,018 --> 00:13:05,032
a given Tyler time

233
00:13:05,032 --> 00:13:08,094
similarly there's a a function called
samper transform

234
00:13:08,094 --> 00:13:11,100
and that allow score image to support
tiling have large

235
00:13:12,000 --> 00:13:15,047
input images automatically so this is

236
00:13:15,047 --> 00:13:18,082
the two key things about the CI colonel
language that I'm

237
00:13:18,082 --> 00:13:23,105
talk about much more detail in our
second presentation

238
00:13:24,005 --> 00:13:28,041
so another great thing about our large
image support is how we work together

239
00:13:28,041 --> 00:13:31,770
with RCG image rest and how we get some
great

240
00:13:32,139 --> 00:13:36,110
improvements on Iowa State by being lazy

241
00:13:36,011 --> 00:13:39,860
so one thing to keep in mind is if you
have a small input CD image that you

242
00:13:39,959 --> 00:13:41,041
create a CIA image from

243
00:13:41,779 --> 00:13:45,791
then the image is fully decoded at the
time you call CIA image

244
00:13:45,899 --> 00:13:50,660
in it a CD image and that's actually
usually the right thing to do for small

245
00:13:50,066 --> 00:13:51,073
images

246
00:13:51,073 --> 00:13:54,162
on because you may be using at image
multiple times and you want to

247
00:13:55,062 --> 00:13:58,118
take the performance impact

248
00:13:59,018 --> 00:14:03,797
decoding the tape at once early however
for large images

249
00:14:03,959 --> 00:14:08,027
that's not a good strategy because you
don't wanna require all that memory

250
00:14:08,639 --> 00:14:12,690
to be up for that trip back to be
compressed unless you know you need

251
00:14:13,149 --> 00:14:16,205
so if you have a large input CG image

252
00:14:16,709 --> 00:14:20,420
that image not a pic image behind that
siege GNH

253
00:14:20,042 --> 00:14:26,081
is decoded only as needed when you
costly I context render

254
00:14:26,459 --> 00:14:29,670
so that's a very important detail

255
00:14:29,067 --> 00:14:32,166
on similarly when you're producing a CG
image

256
00:14:32,769 --> 00:14:36,600
out as a output a CIA image when you
call

257
00:14:36,006 --> 00:14:39,615
RCI context great CD image if the output
CG images

258
00:14:40,209 --> 00:14:44,730
small the image is fully rigged rendered
when CG images called

259
00:14:44,073 --> 00:14:47,622
however if you're producing a large CG
image as an output

260
00:14:48,279 --> 00:14:51,820
such as an example other for extensions

261
00:14:51,082 --> 00:14:54,971
on image is only rendered as needed when
the CG image

262
00:14:55,709 --> 00:14:59,070
is rendered this is also important
because

263
00:14:59,007 --> 00:15:04,030
a very common situation as you pass a CG
image to CG image destination finalize

264
00:15:04,003 --> 00:15:08,005
to encoded back into shape

265
00:15:08,032 --> 00:15:12,086
so what all this means is that if you
have a very large a pic

266
00:15:12,086 --> 00:15:16,065
you can take that large Jay pag decoder
apply filter to it

267
00:15:16,839 --> 00:15:20,570
Henry encode it back into a Jay pag with
minimal memory

268
00:15:20,057 --> 00:15:24,496
and great performance and this is a huge
win for core image on iowa's

269
00:15:25,009 --> 00:15:28,380
so let's take a quick example you
applying a sepia tone

270
00:15:28,038 --> 00:15:31,547
affect to a 4k by six KJ pack

271
00:15:31,889 --> 00:15:35,970
200 mega by Syed image that on Iowa 7
took seventeen seconds

272
00:15:36,699 --> 00:15:40,680
to decode apply the filter and
reincarnate as a jetpack

273
00:15:40,068 --> 00:15:46,124
Iowa State that's one second and

274
00:15:47,024 --> 00:15:50,048
and just as important I wes is the
memory high-water mark

275
00:15:50,048 --> 00:15:53,147
because I can really force your
application into a unhappy place

276
00:15:54,047 --> 00:15:58,098
and are high water mark on Iowa 7 was
200 megabytes which makes sense we have

277
00:15:58,098 --> 00:15:58,767
a source

278
00:15:59,649 --> 00:16:03,100
image was fully decompressed and we need
to produce a whole new image which is

279
00:16:03,001 --> 00:16:04,730
the same size

280
00:16:04,829 --> 00:16:11,829
however because we now have tiling are
high water mark is now 25 megabytes

281
00:16:15,509 --> 00:16:20,040
and just to summarize when I was 7 be
worked on the full image at a time

282
00:16:20,004 --> 00:16:23,050
and because it was largely of headies
SEP render

283
00:16:23,005 --> 00:16:26,022
I'll ass 8 we have automatic tiling

284
00:16:26,067 --> 00:16:31,069
and as a result we can use the GPO which
is a huge win

285
00:16:31,087 --> 00:16:34,179
sup we've also made some other
improvements to how GP rendering works

286
00:16:35,079 --> 00:16:36,498
for core image on high last

287
00:16:37,209 --> 00:16:40,212
which are come important so

288
00:16:40,509 --> 00:16:44,190
are your application sometimes the
surrender in the background often either

289
00:16:44,019 --> 00:16:47,048
when the app is is transitioning to
background or when it's fully in a

290
00:16:47,048 --> 00:16:48,157
background state

291
00:16:48,589 --> 00:16:53,100
on I was seven that is supported however
all background renders used to slower

292
00:16:53,001 --> 00:16:57,039
core image CP rendering power on Iowa
State we have an improvement in this

293
00:16:57,048 --> 00:17:00,217
regard which is that renders that occur
within a short time a switching to

294
00:17:00,649 --> 00:17:01,880
background

295
00:17:01,088 --> 00:17:06,537
will now use the faster GP render now
into service with a lower GP priority

296
00:17:07,329 --> 00:17:11,140
an advantage that is that any foreground
renders that happen at that time

297
00:17:11,014 --> 00:17:14,042
will not be a have any performance
impact on because

298
00:17:14,042 --> 00:17:17,101
core image will be using a lower
priority render so this is another great

299
00:17:18,001 --> 00:17:20,036
advantage

300
00:17:20,036 --> 00:17:23,038
there are some restrictions on this our
Jeep you usage

301
00:17:23,038 --> 00:17:26,070
it is not allowed if you use CI context
raw image

302
00:17:26,007 --> 00:17:29,066
in rec from wrecked because in that case
core mission is to render into the

303
00:17:30,029 --> 00:17:30,097
client's

304
00:17:30,097 --> 00:17:33,186
on legal context however any of the
other internet it's called

305
00:17:34,086 --> 00:17:37,101
calling create CG image or render to see
the pics a buffer

306
00:17:38,001 --> 00:17:44,002
are rendered a bitmap will all work in
this way

307
00:17:44,011 --> 00:17:47,078
are another great improvement we have is
oftentimes he wondered

308
00:17:47,078 --> 00:17:50,114
do rendering in the foreground when you
wrap it in the foreground

309
00:17:51,014 --> 00:17:55,065
but do it are from a secondary Fred in a
plight manner

310
00:17:55,065 --> 00:17:58,128
so if your application is showing one
thing and then doing something on a

311
00:17:59,028 --> 00:17:59,121
secondary thread

312
00:18:00,021 --> 00:18:03,082
using Core Image I was seven that
required

313
00:18:03,082 --> 00:18:06,129
care in order to avoid nor for that

314
00:18:07,029 --> 00:18:11,111
secondary thread to avoid causing
glitches for the foreground thread

315
00:18:12,011 --> 00:18:16,013
and across the only sure-fire way to
avoid that was to use core images slower

316
00:18:16,013 --> 00:18:19,034
CP render on Iowa State we have a new

317
00:18:19,034 --> 00:18:22,091
feature which is secondary thread can
now render

318
00:18:22,091 --> 00:18:25,150
arm into a context that has had this new
option specified

319
00:18:26,005 --> 00:18:29,083
to see i context priority request low

320
00:18:30,028 --> 00:18:34,052
any idea now is that context renders
using that now context

321
00:18:34,052 --> 00:18:38,088
well not interrupt on any foreground
higher priority renders

322
00:18:38,088 --> 00:18:41,135
this is also great for application so
this

323
00:18:42,035 --> 00:18:45,132
much bring me some final thoughts on the
according to CP rendering

324
00:18:46,032 --> 00:18:49,045
basically there is three key reasons why
we

325
00:18:49,045 --> 00:18:52,098
an app would need to use CPU render on
Iowa 7

326
00:18:52,098 --> 00:18:55,186
for example the CPU are render issues
when

327
00:18:56,086 --> 00:18:59,109
are Jeep you text her limits were
exceeded

328
00:19:00,009 --> 00:19:03,037
well starting on Iowa State that's no
longer limit

329
00:19:03,037 --> 00:19:06,088
in Cornish so that's not a reason
anymore some early

330
00:19:06,088 --> 00:19:09,139
are the application might needed to
render briefly on in the point in the

331
00:19:10,039 --> 00:19:10,124
background

332
00:19:11,024 --> 00:19:14,087
that's also been improved in iowa say

333
00:19:14,087 --> 00:19:17,092
and lastly if your application wanted to
render from a secondary

334
00:19:18,037 --> 00:19:22,075
thread one in the foreground you might
have used the CPU render and now that

335
00:19:22,075 --> 00:19:24,083
it's no longer

336
00:19:24,083 --> 00:19:28,084
a limitation so I met some great ways to
keep us on

337
00:19:28,084 --> 00:19:33,095
core image is much faster Jeep you
rendering pap

338
00:19:33,095 --> 00:19:36,101
the next subject to my talk about this
afternoon is about some

339
00:19:37,001 --> 00:19:40,023
API modernization made both on arstan

340
00:19:40,023 --> 00:19:43,076
and on high last is a small communities
but they are open

341
00:19:43,076 --> 00:19:47,135
and total are first of our core image
doctor subclasses

342
00:19:48,035 --> 00:19:51,037
on a West End can now use properties
survivors

343
00:19:51,055 --> 00:19:54,083
are it said one thing to be aware of is
that

344
00:19:54,083 --> 00:19:57,174
core image filter subclasses I do not
need to release

345
00:19:58,074 --> 00:20:01,149
are the object associated with input
I've ours are properties

346
00:20:02,049 --> 00:20:07,051
on so it's a little bit non-standard as
a class in that regard

347
00:20:07,069 --> 00:20:10,070
by supporting properties that means a
code that used to look like this where

348
00:20:10,079 --> 00:20:10,122
you have

349
00:20:11,022 --> 00:20:14,054
output image equals filter are value for
key

350
00:20:14,054 --> 00:20:17,054
Casey I output image key can now

351
00:20:17,054 --> 00:20:20,059
be a little cleaner and just look like
out image because filter

352
00:20:20,059 --> 00:20:23,118
dot output image

353
00:20:24,018 --> 00:20:27,111
we also have our convenience method if
you I want to create a filter

354
00:20:28,011 --> 00:20:31,036
and also said a buncha parameters all in
one fell swoop

355
00:20:31,036 --> 00:20:34,045
this can be now done by saying filter
filter with name

356
00:20:34,045 --> 00:20:38,059
and then specify some parameters at the
same time

357
00:20:38,059 --> 00:20:41,136
and in those primaries are a dictionary
where you can specify all the inputs and

358
00:20:42,036 --> 00:20:42,118
1

359
00:20:43,018 --> 00:20:46,020
convenient manner

360
00:20:46,038 --> 00:20:50,051
is it even slightly simpler case which
is are very are commonly is about where

361
00:20:50,051 --> 00:20:53,054
one of your inputs as an input image in
you just want to

362
00:20:53,054 --> 00:20:56,063
get the output of the filter so this
means you can

363
00:20:56,063 --> 00:20:59,076
apply filter to an image with the setup
parameters without even creating a

364
00:20:59,076 --> 00:21:03,095
filter object

365
00:21:03,095 --> 00:21:05,176
lastly what are the common questions we
get from developers is how do I

366
00:21:06,076 --> 00:21:06,173
correctly

367
00:21:07,073 --> 00:21:10,147
orient my image so the orientation is
correctly upright

368
00:21:11,047 --> 00:21:14,105
and the ass tentative specification has
a

369
00:21:15,005 --> 00:21:19,061
setup a possible values that tell how
the image should be flipped a rotated

370
00:21:19,061 --> 00:21:22,153
and me provided a code snippet in the
past for that but

371
00:21:23,053 --> 00:21:26,089
much easier is that we provided an API
for that now

372
00:21:26,089 --> 00:21:29,105
in Iowa State and I was 10 so on

373
00:21:30,005 --> 00:21:34,077
simplest way of calling it is to say are
image by applying orientation

374
00:21:34,077 --> 00:21:37,173
and that gives you back in new image and
again you're specifying an integer

375
00:21:38,073 --> 00:21:39,082
orientation value

376
00:21:40,063 --> 00:21:44,081
on as an alternative to doing the same
thing we also have an API that allows

377
00:21:44,081 --> 00:21:45,122
you to get back to

378
00:21:46,022 --> 00:21:49,027
a fine transform that is equivalent to
that

379
00:21:49,027 --> 00:21:52,095
and the reason why that's useful is
usually or hitting your image

380
00:21:52,095 --> 00:21:55,098
upright is only the first serve several

381
00:21:56,025 --> 00:21:59,112
a finds that you may apply to your image
may also be scaling it to fit are

382
00:22:00,012 --> 00:22:00,085
panning at

383
00:22:00,085 --> 00:22:05,131
and so by getting this a fine matrix and
concatenating with any other refined

384
00:22:06,031 --> 00:22:12,047
matrix you can get a little better
performance and accordingly

385
00:22:12,047 --> 00:22:16,112
so we've also made some modernisation on
to west end with regard to color spaces

386
00:22:17,012 --> 00:22:21,060
the default RGB color space is now a ser
GB which is great because it matches

387
00:22:21,006 --> 00:22:22,006
with the default

388
00:22:22,006 --> 00:22:26,075
om RGB color space that we haven't
iowa's it also matches what most

389
00:22:27,029 --> 00:22:30,081
a modern applications expect for on
tagged

390
00:22:30,081 --> 00:22:33,120
images similarly

391
00:22:34,002 --> 00:22:37,056
our default working space has also
changed on a West End

392
00:22:37,074 --> 00:22:40,080
it is now a linearized version at the
Rec

393
00:22:40,008 --> 00:22:44,064
are 709 a chronic disease and again this
match is that the fall

394
00:22:45,036 --> 00:22:48,043
we have for our working space on iowa's
and

395
00:22:48,043 --> 00:22:51,099
has a great performance advantage which
means that in most typical scenarios

396
00:22:51,099 --> 00:22:51,168
where your

397
00:22:52,068 --> 00:22:55,141
have sRGB content going into a filter
and it's working space

398
00:22:56,041 --> 00:23:00,062
and then going back to sRGB up but no
matrix math is needed at all

399
00:23:00,062 --> 00:23:05,063
so this is a great created

400
00:23:05,072 --> 00:23:08,150
next article like to talk about today is
some a new built-in

401
00:23:09,005 --> 00:23:12,029
cordage doctors so we have

402
00:23:12,074 --> 00:23:15,082
several I'd like to talk about are one
is new to

403
00:23:15,082 --> 00:23:18,083
I was a is we've had in CI area
histogram

404
00:23:18,083 --> 00:23:21,087
and see a histogram display filter on
the first

405
00:23:22,023 --> 00:23:25,077
filter CI area histogram takes an input
image

406
00:23:25,077 --> 00:23:28,099
and the rectangle that you wanna
generate a histogram affect

407
00:23:28,099 --> 00:23:32,141
and it'll produce output image that's
typically 256 by one

408
00:23:33,041 --> 00:23:36,118
pixels so that image is useful if you
want to render and get the pixel values

409
00:23:37,018 --> 00:23:38,023
that occurs at a

410
00:23:38,023 --> 00:23:41,118
check on give you your your histogram
get a very efficiently

411
00:23:42,018 --> 00:23:45,114
however often times you also want to
display this histogram to the user

412
00:23:46,014 --> 00:23:49,070
so we have a second filter which SCI
histogram display filter

413
00:23:49,007 --> 00:23:53,008
and it takes as an input this 256 by one
pixel image

414
00:23:53,071 --> 00:23:58,102
and produces a pretty crash with how red
green and blue grass in just like this

415
00:23:59,002 --> 00:24:01,045
it's very easy to use in your
application just chained together these

416
00:24:01,045 --> 00:24:03,136
two filters

417
00:24:04,036 --> 00:24:07,040
this is another great doctors I'm really
pleased with this is

418
00:24:07,004 --> 00:24:10,052
I'm with always had filters for doing
calcium players on an image

419
00:24:10,088 --> 00:24:13,182
but we have a new filter called mask
variable blur and the ideas you want to

420
00:24:14,082 --> 00:24:16,091
apply a blur to an image but you won't
apply

421
00:24:16,091 --> 00:24:20,093
different amount up were at different
locations so the way this filter works

422
00:24:20,093 --> 00:24:21,101
is you start with an input image

423
00:24:22,073 --> 00:24:25,147
and you provide a mask image in this
example we have the

424
00:24:26,047 --> 00:24:29,121
the mask is white in a lil lower left
hand corner

425
00:24:30,021 --> 00:24:33,119
black in her center and then white again
in the upper

426
00:24:34,019 --> 00:24:38,024
right hand corner and what this means
when we combine these two images with

427
00:24:38,024 --> 00:24:39,068
the master very popular

428
00:24:39,068 --> 00:24:42,163
is will get a resulting image that is
defocused at the corners

429
00:24:43,063 --> 00:24:47,154
and then gradually transitions to a nice
sharp image in the center

430
00:24:48,054 --> 00:24:51,103
on this is not just on with plans but
it's actually done with variable radius

431
00:24:52,003 --> 00:24:52,054
players

432
00:24:52,054 --> 00:24:56,097
which is quite track so their couple
different ways you can use this you can

433
00:24:56,097 --> 00:24:58,146
use this to achieve a certain effect up
the field effect

434
00:24:59,046 --> 00:25:02,123
where the topping bar if your image my
people are in the center may be sharp

435
00:25:03,023 --> 00:25:06,070
or you can actually I'm Han create a
mask image

436
00:25:06,007 --> 00:25:10,034
with a person in the foreground and then
nicely blur the background with a nice

437
00:25:10,097 --> 00:25:13,171
Boca so hope to see what a fine examples

438
00:25:14,071 --> 00:25:19,104
that how this another fun when we added
which is accordion fold transition in

439
00:25:20,004 --> 00:25:21,036
this is something we did for

440
00:25:21,036 --> 00:25:24,063
are the male team that we've also
provided as a public filter

441
00:25:24,063 --> 00:25:28,078
you provide to images a before and after
and a couple parameters like how many

442
00:25:28,078 --> 00:25:28,161
folds in

443
00:25:29,061 --> 00:25:33,062
how many pixels at the bottom are shared
and what this filter looks like in

444
00:25:33,071 --> 00:25:33,146
practice

445
00:25:34,046 --> 00:25:37,088
has this and if you actually look
carefully

446
00:25:37,088 --> 00:25:40,162
that's the actual entire kernel for this
filter so

447
00:25:41,062 --> 00:25:46,127
home its international trickery

448
00:25:47,027 --> 00:25:51,031
another filter retarded on in prior
releases we've had

449
00:25:51,031 --> 00:25:54,063
of filters for generating QR codes
aren't we

450
00:25:54,063 --> 00:25:57,098
added on a new one for generating code
128 barcode

451
00:25:57,098 --> 00:26:01,174
and it works in a similar fashion you
specified input message as an estate a

452
00:26:02,074 --> 00:26:05,130
and in this case is an additional
parameter which says how many pixels a

453
00:26:06,003 --> 00:26:08,004
quiet space you want

454
00:26:08,031 --> 00:26:12,080
and it'll produce an image like this
we've also added another one for Aztec

455
00:26:12,008 --> 00:26:15,057
codes again same kind of idea for the
API you just

456
00:26:16,029 --> 00:26:19,103
specify the input message and for this
particular generator it

457
00:26:20,003 --> 00:26:23,056
has a input correction level reached
tells how many air crash in a bit

458
00:26:23,056 --> 00:26:26,083
half

459
00:26:26,083 --> 00:26:31,105
another new filter which is also fun is
CI perspective correction

460
00:26:32,005 --> 00:26:35,104
any idea behind this is you have an
input image and you specify four points

461
00:26:36,004 --> 00:26:39,013
and it will create a new image that is
cropped

462
00:26:39,013 --> 00:26:43,062
and undistorted preserving the original
and intended aspect ratio

463
00:26:43,062 --> 00:26:46,124
so this is again very nice for are
capturing parts have

464
00:26:47,024 --> 00:26:52,028
an image and under storing them

465
00:26:52,064 --> 00:26:57,066
me at a handful of new plan filters
lanier dodge and burn penlight subtract

466
00:26:57,066 --> 00:26:57,161
divide

467
00:26:58,061 --> 00:27:02,136
on also just to be aware we've are made
affects to use of light plane mode so

468
00:27:03,036 --> 00:27:03,134
that better matches

469
00:27:04,034 --> 00:27:08,041
back on and then there's a few other new
ones we've added that are

470
00:27:09,004 --> 00:27:12,037
on you on iowa's passages our class
distortion

471
00:27:12,037 --> 00:27:15,046
ha stretch crop remorse a correction on

472
00:27:15,046 --> 00:27:19,081
trustee which was a great demo from our
conference show two years ago

473
00:27:19,081 --> 00:27:22,085
and then who knows if we have some more
time we'll get a few more in

474
00:27:22,085 --> 00:27:26,148
but what that brings us to the day is
over 115 built-in filters on iowa's

475
00:27:27,048 --> 00:27:30,056
and of course that really is an infinite
number now that you guys can

476
00:27:30,056 --> 00:27:35,093
create your own custom filters so
excited to see all sorts of new things

477
00:27:35,093 --> 00:27:39,097
another area we made some improvements
in Inc or image is CI detectors

478
00:27:40,033 --> 00:27:44,057
so what is a CO detector Russia
detectors and abstract class at allows

479
00:27:44,057 --> 00:27:46,112
you to help find things within an image

480
00:27:47,012 --> 00:27:51,067
and our prior to iowa say we had just
one type which was typeface

481
00:27:51,067 --> 00:27:55,090
but without a tumour so we now have CO
detector type rectangle

482
00:27:55,009 --> 00:27:58,103
NCR Tector type QR code

483
00:27:59,084 --> 00:28:02,178
so how does this work well creating
attackers largely the same regardless of

484
00:28:03,078 --> 00:28:04,133
what I protect your creating

485
00:28:05,033 --> 00:28:08,069
here we have an example of creating a
detector typeface

486
00:28:08,069 --> 00:28:12,122
where we say detector detector typeface
and we can also specify some options

487
00:28:13,022 --> 00:28:16,075
their couple options that are very
useful for all the sectors one is

488
00:28:16,075 --> 00:28:20,081
you can say whether you wanna have arm
high accuracy or lower accuracy

489
00:28:20,081 --> 00:28:23,117
which depending on your needs might
allow are you trade of performance

490
00:28:24,017 --> 00:28:24,096
versus

491
00:28:24,096 --> 00:28:28,164
precision are also you can stellar
detector with the smallest feature

492
00:28:29,064 --> 00:28:29,135
detectors

493
00:28:30,035 --> 00:28:35,066
to detectives are not also can greatly
improve performance

494
00:28:35,066 --> 00:28:38,135
and of course now that we've got these
new detectors you can just use detector

495
00:28:39,035 --> 00:28:40,074
type rectangle

496
00:28:40,074 --> 00:28:43,158
or detector take your coat as well

497
00:28:44,058 --> 00:28:47,144
so are just as a reminder so when you're
using the face detector

498
00:28:48,044 --> 00:28:51,116
on there's a couple options that you
wanna passion when you're asking for the

499
00:28:52,016 --> 00:28:53,021
actual features an image

500
00:28:53,066 --> 00:28:56,100
well as you can specify what the
orientation at the images

501
00:28:57,000 --> 00:29:00,065
that's important because the face
detector look for upright faces

502
00:29:00,065 --> 00:29:03,093
ha so you can specify options to say I
want to look for are

503
00:29:03,093 --> 00:29:08,154
I blinks or smiles and that's specified
in the same options dictionary

504
00:29:09,054 --> 00:29:11,122
and let me show you a little bit
occurred about how we can now use

505
00:29:12,022 --> 00:29:12,104
detector

506
00:29:13,004 --> 00:29:16,068
to create a sort of augmented reality
example here

507
00:29:16,068 --> 00:29:19,068
the idea we wanted for the slow the
sample code if you want

508
00:29:19,068 --> 00:29:23,121
start with the input image find the
faces in it and then put ask where is

509
00:29:24,021 --> 00:29:24,092
over

510
00:29:24,092 --> 00:29:27,176
the image where we find them and so this
is a little closer but as sample code

511
00:29:28,076 --> 00:29:32,110
first off for each face that we detect
on in the features are a

512
00:29:33,001 --> 00:29:36,024
we're gonna check to see if the eyes
were closed for a

513
00:29:36,033 --> 00:29:39,070
then we're gonna create a CIA image with
color and

514
00:29:39,007 --> 00:29:42,053
we're gonna have different colorways
based on whether the eyes are closed

515
00:29:43,016 --> 00:29:46,062
or not or whether faces smiling or not
now

516
00:29:46,062 --> 00:29:49,079
that API actually returns an infinite
image

517
00:29:49,079 --> 00:29:52,173
so what we need to do is to crop that
image to the bounds for the feature that

518
00:29:53,073 --> 00:29:54,141
was detected

519
00:29:55,041 --> 00:29:58,092
we then take that cropped image color

520
00:29:58,092 --> 00:30:01,118
and the composite over the previous
resulting image

521
00:30:02,018 --> 00:30:05,023
and this is also a new API that we
provided it's basically convenience API

522
00:30:05,068 --> 00:30:05,076
thats

523
00:30:06,048 --> 00:30:10,146
on equivalent to using core image
source: over compositing filter

524
00:30:11,046 --> 00:30:13,098
and this is what it looks like in
practice here's a little sample video we

525
00:30:13,098 --> 00:30:14,098
shot where

526
00:30:14,098 --> 00:30:17,160
on we've I'm are detecting the faces a
real time

527
00:30:18,006 --> 00:30:22,041
and coloring I'm based on weather the
faces smiling or blinking or

528
00:30:22,095 --> 00:30:23,131
combinations

529
00:30:24,031 --> 00:30:29,033
we're going about 25 frame purse frames
per second

530
00:30:29,051 --> 00:30:32,097
are beginning something similar also for
rectangle features the

531
00:30:32,097 --> 00:30:35,184
idea behind are rectangle features is
you understand that

532
00:30:36,084 --> 00:30:39,147
in a lot of cases the first step in
looking

533
00:30:40,047 --> 00:30:43,140
in an image for something interesting is
to look for something like a rectangle

534
00:30:44,004 --> 00:30:47,004
are for example if you're looking for a
sign or you're looking for a business

535
00:30:47,004 --> 00:30:47,080
card

536
00:30:48,016 --> 00:30:51,081
or if you're looking for a piece a paper
oftentimes looking for the rectangle

537
00:30:51,081 --> 00:30:53,092
first is a great place to start

538
00:30:53,092 --> 00:30:56,120
so we've created a generic rectangle
detector object

539
00:30:57,002 --> 00:31:00,005
and it takes one of church with one one
option parameter

540
00:31:00,023 --> 00:31:03,091
which is the aspect ratio me on a search
for and again

541
00:31:03,091 --> 00:31:06,186
are you can acid attack your to return
me features a wreck

542
00:31:07,086 --> 00:31:09,169
now right now it just returns one
rectangle but that may change in the

543
00:31:10,069 --> 00:31:11,106
future

544
00:31:12,006 --> 00:31:15,072
so here again we wanted do a little
sample here little bit fancier because

545
00:31:15,072 --> 00:31:15,124
we wanna

546
00:31:16,024 --> 00:31:19,026
arm it said I just doing the bounding
box overlay

547
00:31:19,044 --> 00:31:23,057
we wanted make a lot prettier so again
where looping over all the

548
00:31:23,057 --> 00:31:26,058
features in the image for creating a

549
00:31:26,067 --> 00:31:30,086
on ICI image with color which is
infinite

550
00:31:30,086 --> 00:31:33,151
but we're gonna take that infinite color
image and run it through the

551
00:31:34,051 --> 00:31:37,090
CI perspective transform with extent
filter

552
00:31:37,009 --> 00:31:41,051
and that filter does two things first of
all you specify an extent

553
00:31:42,032 --> 00:31:45,068
which in this case for specifying 0011

554
00:31:45,068 --> 00:31:48,126
so now effectively we have a unit square
image

555
00:31:49,026 --> 00:31:52,125
and then the other parameters take that
unit square and stretch it

556
00:31:53,025 --> 00:31:57,073
to the top left top right bottom left
bottom right corner it's

557
00:31:57,073 --> 00:32:00,087
and then we over laid out on the
previous result

558
00:32:00,087 --> 00:32:03,093
and here's what that looks like in
practice this is the name plate from my

559
00:32:03,093 --> 00:32:04,099
office

560
00:32:04,099 --> 00:32:07,103
and we are taking running through the
detector

561
00:32:08,003 --> 00:32:11,021
are getting the detected rectangle and
then producing this

562
00:32:11,021 --> 00:32:15,027
overlay tinted red image

563
00:32:15,081 --> 00:32:18,147
are lastly we can do the same thing with
QR codes the

564
00:32:19,047 --> 00:32:22,075
coheres factly the same are the only
difference is that we're using

565
00:32:22,075 --> 00:32:27,102
the QR code future instead this example
you could have also gotten the message

566
00:32:28,002 --> 00:32:29,070
from a QR code but in this case

567
00:32:29,007 --> 00:32:32,091
I'm just gonna to an overlay so all I
needed to do was

568
00:32:33,054 --> 00:32:36,058
use with accordance and again as you see
an example we can

569
00:32:36,094 --> 00:32:43,094
detect this QR code and do an overlay in
real time

570
00:32:44,013 --> 00:32:48,072
sup thats the the Boca my conversation
with the last thing I wanna talk about

571
00:32:48,072 --> 00:32:52,114
is improvements that we've made on to
raw support on how its 10

572
00:32:53,014 --> 00:32:57,089
so let me talk a little bit about are
raw support

573
00:32:57,089 --> 00:33:00,175
so I'll talk about history fundamentals
have raw image processing

574
00:33:01,075 --> 00:33:04,162
com some architectural overview and how
you can use this great filter we have

575
00:33:05,062 --> 00:33:07,119
called the CI raw filter

576
00:33:08,019 --> 00:33:11,023
so history first so on apples for
supporting ross

577
00:33:11,059 --> 00:33:14,098
since back in April 2005 on

578
00:33:14,098 --> 00:33:17,102
over those years we have been
continuously adding support for cameras

579
00:33:18,002 --> 00:33:19,055
in improving the quality

580
00:33:19,055 --> 00:33:23,094
we have about 350 camera supported today
and that's not including

581
00:33:23,094 --> 00:33:27,129
on all the DNG possibilities and what
are the improvements we made

582
00:33:28,029 --> 00:33:32,041
in hours 10 this year's that we support
the latest version at the DNG

583
00:33:32,041 --> 00:33:32,134
specification

584
00:33:33,034 --> 00:33:38,040
so that greatly improves number images
that we can support

585
00:33:38,004 --> 00:33:40,102
and the other thing it's wonderful about
our support is provided the entire

586
00:33:41,038 --> 00:33:42,064
operating system

587
00:33:42,064 --> 00:33:46,118
which means everything from NS images to
CG images will automatically support raw

588
00:33:47,018 --> 00:33:48,062
files

589
00:33:48,062 --> 00:33:51,141
on system services like spotlight and
quick look support

590
00:33:52,041 --> 00:33:55,054
these on key applications like

591
00:33:55,054 --> 00:33:58,097
preview finder even mail support bra on

592
00:33:58,097 --> 00:34:02,171
our photo applications have a church
iPhone photos

593
00:34:03,071 --> 00:34:06,099
on also of third-party out can also get
this for

594
00:34:06,099 --> 00:34:09,508
very little effort

595
00:34:10,399 --> 00:34:13,444
so what is involved in processing your I
mention this is why you know I

596
00:34:13,849 --> 00:34:16,907
the subject is actually very are dear to
my heart

597
00:34:17,429 --> 00:34:20,440
because it involves a lot of very
advanced image processing to produce a

598
00:34:20,044 --> 00:34:21,075
RAW file

599
00:34:21,075 --> 00:34:24,156
so you start off with the fact that raw
files contain only a minimally processed

600
00:34:25,056 --> 00:34:25,895
data

601
00:34:26,399 --> 00:34:29,570
from the camera sensor image and in fact

602
00:34:29,057 --> 00:34:33,386
the images actually missing typically
sixty-six percent of the actual data

603
00:34:33,899 --> 00:34:38,030
because at each pixel location you only
have a red or green or blue value

604
00:34:38,003 --> 00:34:42,132
and that means to produce a final image
we actually have to

605
00:34:42,159 --> 00:34:45,220
makeup good values for those missing
sixty percent

606
00:34:45,022 --> 00:34:49,046
have your data and that requires a lot
of advanced image processing to produce

607
00:34:49,046 --> 00:34:52,054
a very beautiful image at the end

608
00:34:52,054 --> 00:34:55,095
there are several steps in this process
they involve extracting critical

609
00:34:55,095 --> 00:34:56,133
metadata from the file

610
00:34:57,033 --> 00:35:00,116
decoding the raw sensor the mosaic
reconstruction which is

611
00:35:01,016 --> 00:35:04,019
hugely complex task our lens correction

612
00:35:04,019 --> 00:35:07,061
noise reduction and then there's a set
of operations that are in the color to

613
00:35:07,061 --> 00:35:07,119
main

614
00:35:08,019 --> 00:35:12,050
such as mapping seen referred color
values up it referred

615
00:35:12,005 --> 00:35:15,009
and adjusting exposure and temperature
intent

616
00:35:15,054 --> 00:35:18,143
and then adding contrast and saturation
to taste

617
00:35:19,043 --> 00:35:22,135
so it's a lot of steps and we've made
some significant improvements to several

618
00:35:23,035 --> 00:35:24,039
of these

619
00:35:24,039 --> 00:35:27,088
an on OS 10 your sanity so we've

620
00:35:27,088 --> 00:35:30,123
at Paris for for lens correction great
new noise reduction which will show in a

621
00:35:31,023 --> 00:35:31,101
minute

622
00:35:32,001 --> 00:35:36,076
and also some improvements the colors
well

623
00:35:36,076 --> 00:35:39,174
so as I said before API's like NS image
in CG image

624
00:35:40,074 --> 00:35:44,152
world get raw support for free and
that's because our support

625
00:35:45,052 --> 00:35:49,083
provides a default rendering which is
process according to all OVR

626
00:35:49,083 --> 00:35:54,142
parameters and or whatever our latest
algorithm is

627
00:35:55,042 --> 00:35:59,045
on however we have this API which is
called the CI raw filter

628
00:35:59,045 --> 00:36:02,078
which gives your application much more
control and

629
00:36:02,078 --> 00:36:05,083
allows on you did get CIA image

630
00:36:05,083 --> 00:36:08,146
with extended-range floating-point
precision

631
00:36:09,046 --> 00:36:12,115
and also on that object are easy to use
controls

632
00:36:13,015 --> 00:36:16,082
control how are raw imaging results are
processed

633
00:36:16,082 --> 00:36:19,089
and it gives you fast interactive
performance on a GP

634
00:36:19,089 --> 00:36:23,106
some great stuff that you can use in
your application

635
00:36:24,006 --> 00:36:28,027
so this is sort of how it works is a
flow diagram you start out with a file

636
00:36:28,027 --> 00:36:32,061
and I can on the pass either as a file
URL or an estate a

637
00:36:32,061 --> 00:36:36,107
and not past as an input to create CI
raw filter

638
00:36:37,007 --> 00:36:40,084
also can be specified on that raw filter
are several of our

639
00:36:40,084 --> 00:36:43,151
processing parameters once you've set
this correctly

640
00:36:44,051 --> 00:36:47,132
you can get in cinn Chaput which you can
then

641
00:36:48,032 --> 00:36:51,077
on display on the screen and by default
it a look just like our default

642
00:36:51,077 --> 00:36:52,134
rendering

643
00:36:53,034 --> 00:36:57,052
however the great thing about the CI raw
filter is that once the user si nos

644
00:36:57,052 --> 00:37:01,070
and your application has controls you
can alter those values

645
00:37:01,007 --> 00:37:04,088
send them back into the into the RCI raw
filter

646
00:37:05,051 --> 00:37:09,092
where can be read displayed all in real
time

647
00:37:09,092 --> 00:37:12,113
another great feature we have on this is
we actually are

648
00:37:13,013 --> 00:37:17,075
have a place for you can insert a custom
CI filter in the middle of our raw

649
00:37:17,075 --> 00:37:21,087
filter processing before we've done
anything to change the data from

650
00:37:21,087 --> 00:37:24,182
a linear space so this is very useful if
you want to do certain types image

651
00:37:25,082 --> 00:37:26,091
processing

652
00:37:26,091 --> 00:37:29,112
how Chris you can also apply filters are
after the

653
00:37:30,012 --> 00:37:35,058
CI raw filter but this is a great center
functionality for certain use cases

654
00:37:35,058 --> 00:37:38,141
and lastly doesn't have to go to the
display you can also take the CIA image

655
00:37:39,041 --> 00:37:42,094
create a CD image from that and
producing new CG

656
00:37:42,094 --> 00:37:45,176
a file on disk from that

657
00:37:46,076 --> 00:37:49,127
and this is an example of how loco it
takes to use this filter

658
00:37:50,027 --> 00:37:53,056
basically we start out with the URL we
create a

659
00:37:53,056 --> 00:37:57,109
CI filter filter which image URL and
I'll return to see ire of filter

660
00:37:58,009 --> 00:38:01,090
on in this particular example we want to
get from that filter what are two fault

661
00:38:01,009 --> 00:38:05,015
value for the luminance noise reduction
was that returns as an object

662
00:38:05,096 --> 00:38:08,150
we can make some are slight change to
that like say for example you want

663
00:38:09,005 --> 00:38:12,097
I love your images be slightly more
noise reduced you can take that value

664
00:38:13,042 --> 00:38:16,055
added it to it and then set a new value

665
00:38:16,055 --> 00:38:19,058
and then once you're done setting values
you can get an output image

666
00:38:19,085 --> 00:38:25,111
so just a few lines of code you can on
leverage I love our rock pipeline

667
00:38:26,011 --> 00:38:29,020
so to show this in much more detail in
the past the state over to share on who

668
00:38:29,002 --> 00:38:30,061
will be giving a live demo this

669
00:38:30,079 --> 00:38:34,111
thanks in this part of our talk I would
like to show you some of the great

670
00:38:35,011 --> 00:38:37,107
things that you can also doing your own
applications

671
00:38:38,007 --> 00:38:42,065
using the CI role filters and always
stands built-in support for roll camera

672
00:38:42,065 --> 00:38:43,069
files

673
00:38:44,005 --> 00:38:48,043
to do that we created a very basic
simple application

674
00:38:48,043 --> 00:38:51,072
that simply puts up our NS opens

675
00:38:51,072 --> 00:38:55,077
GL view and which is tied up to see I
roll filter

676
00:38:55,077 --> 00:39:00,143
and another in SU which is tied up to
the controls of the CIO filter

677
00:39:01,043 --> 00:39:04,058
so let me run that and point it

678
00:39:04,058 --> 00:39:09,109
to a role image

679
00:39:10,009 --> 00:39:13,011
now by default when you actually open up
a RAW file

680
00:39:13,029 --> 00:39:17,033
we will talk into our own calibration
data base and make sure that we applied

681
00:39:17,033 --> 00:39:18,119
the corec set of calibration

682
00:39:19,019 --> 00:39:23,091
settings that are specific to make and
model for the straw file

683
00:39:23,091 --> 00:39:27,163
and some of the settings are for you
when the last correction

684
00:39:28,063 --> 00:39:31,064
white balance settings

685
00:39:31,064 --> 00:39:34,113
a noise reduction said things that we
will go into more detailed

686
00:39:35,013 --> 00:39:38,038
in just a second exposure and

687
00:39:38,038 --> 00:39:42,130
balls contrails show there's not much
going on with this

688
00:39:43,003 --> 00:39:48,038
a very good image in the first place so
let me pull up on more

689
00:39:48,065 --> 00:39:54,139
challenging image to show you the great
benefits of using raw files

690
00:39:55,039 --> 00:39:59,060
now on this image by default on you
loaded you see that

691
00:39:59,006 --> 00:40:03,019
parts of the image is close to clipping
point specially the sky and the

692
00:40:03,073 --> 00:40:04,102
mountainous region

693
00:40:05,002 --> 00:40:08,075
so we're probably losing some color
fidelity in this region

694
00:40:08,075 --> 00:40:11,079
what's more interesting is the part

695
00:40:12,015 --> 00:40:15,101
of the trees which are on the expos and
we're probably not getting the right

696
00:40:16,001 --> 00:40:17,039
amount of detail

697
00:40:17,039 --> 00:40:20,072
so let's see if we can actually improve
this image

698
00:40:20,072 --> 00:40:24,141
the first thing that I would like to try
is setting to exposure to see how it

699
00:40:25,041 --> 00:40:26,122
actually looks like

700
00:40:27,022 --> 00:40:31,100
wanna probably increase the exposure to
make sure that I get the detail in the

701
00:40:32,000 --> 00:40:32,082
tree part

702
00:40:32,082 --> 00:40:37,103
of the image but as you can quit the C
word losing all the detail and hide

703
00:40:38,003 --> 00:40:42,021
and opposite is also true once you start
decreasing the exposure

704
00:40:42,021 --> 00:40:45,023
you're getting back to color in the sky
but your

705
00:40:45,041 --> 00:40:48,077
losing all the detail in the lowlights

706
00:40:48,077 --> 00:40:51,118
show there is something that that can be
done better

707
00:40:52,018 --> 00:40:56,020
and the answer to that is see i
highlights and shadows field

708
00:40:56,002 --> 00:41:00,036
normally if you were shooting J pick you
what I dot but of the J picnic order to

709
00:41:00,054 --> 00:41:00,096
this

710
00:41:00,096 --> 00:41:03,129
highlights and shadows but what
interesting

711
00:41:04,029 --> 00:41:07,094
when you're shooting RAW is that you can
actually insert this filter

712
00:41:07,094 --> 00:41:10,107
into the middle of our role processing
pipeline

713
00:41:11,007 --> 00:41:15,010
and take advantage of the linear input
space that we're operating in

714
00:41:15,037 --> 00:41:18,064
that means that you will be able to
better keep the color fidelity

715
00:41:18,064 --> 00:41:21,083
you'll operates on the linear sixth and
pipeline

716
00:41:21,083 --> 00:41:26,127
and at the and get better results so
let's try that

717
00:41:27,027 --> 00:41:30,031
the first thing that I want to do is
increase the shadows

718
00:41:30,031 --> 00:41:33,118
and almost immediately I can see that
all the detail in the shuttle part

719
00:41:34,018 --> 00:41:37,035
is kept is are brought back

720
00:41:37,035 --> 00:41:41,037
same for the sky I want to bring it down
to make sure that I can see more of the

721
00:41:41,055 --> 00:41:41,113
sky

722
00:41:42,013 --> 00:41:45,040
college and i cant easily do that
without

723
00:41:45,004 --> 00:41:49,029
or loving any part of that image

724
00:41:49,065 --> 00:41:54,076
show docked is a good example of how you
can actually use the CI role filter to

725
00:41:54,076 --> 00:41:56,077
make sure that you can develop your own

726
00:41:56,077 --> 00:42:00,121
images are in the best way that shooting
is appropriate

727
00:42:01,021 --> 00:42:07,115
next nice filter

728
00:42:08,015 --> 00:42:11,057
now noise reduction is a very
challenging problem

729
00:42:11,057 --> 00:42:14,123
and are traditionally it is very
confidentially

730
00:42:15,023 --> 00:42:18,091
compassionately expected expansive
algorithm

731
00:42:18,091 --> 00:42:22,095
we're very happy to offer you a new
Moyes reduction algorithm starting in

732
00:42:23,031 --> 00:42:24,098
all estan yosemite

733
00:42:24,098 --> 00:42:27,145
that doesn't compromise on the quality
and you can still use it

734
00:42:28,045 --> 00:42:32,093
at an interactive 60 frames per second
to show you that we have this

735
00:42:32,093 --> 00:42:36,155
very noisy image of the mosque on a
Santa and I want to

736
00:42:37,055 --> 00:42:40,086
focus on this part of the image just for
fun

737
00:42:40,086 --> 00:42:42,180
I'm going to turn off all the noise
reduction to see what we are dealing

738
00:42:43,008 --> 00:42:47,014
with initially

739
00:42:47,086 --> 00:42:51,094
so this is the origin this is how the
original image looks like

740
00:42:51,094 --> 00:42:54,178
and using the CI role a Ellen R and

741
00:42:55,078 --> 00:42:59,095
Santosh I most filter settings I can get
it to a state where I feel

742
00:42:59,095 --> 00:43:03,128
that this most comfortable for Mike
image so probably first thing that I

743
00:43:04,028 --> 00:43:06,070
want to do is get rid of all the color
nice

744
00:43:06,007 --> 00:43:09,015
and I'm using the CNR slider to do that

745
00:43:10,005 --> 00:43:13,009
and look how interactive this process is

746
00:43:13,009 --> 00:43:16,093
same for telling our you have a wide
variety of settings that you can play

747
00:43:17,074 --> 00:43:19,152
with you can go with something that is
very smart

748
00:43:20,052 --> 00:43:23,108
or something which keeps all the
luminance nice

749
00:43:24,008 --> 00:43:27,013
so I wanna probably hit somewhere in the
middle right get

750
00:43:27,013 --> 00:43:30,084
I got rid of most of the noise but still
capsule

751
00:43:30,084 --> 00:43:33,182
mother good thing that you can do is
brought back some of the fine

752
00:43:34,082 --> 00:43:37,159
high detail back to the image after you
clean up all the bad news

753
00:43:38,059 --> 00:43:42,071
so the detail fly there is the one that
she would be using for that

754
00:43:42,071 --> 00:43:45,130
and quickly you can get back to this him
grain

755
00:43:46,003 --> 00:43:49,011
type of look

756
00:43:49,038 --> 00:43:52,100
same is true for high-frequency contrast
and if you choose to do that

757
00:43:53,000 --> 00:43:59,028
you can also play with that again 60
frames per second

758
00:43:59,028 --> 00:44:03,076
so that is the noise filters starting
the tallest annual summit EU also be

759
00:44:03,076 --> 00:44:05,163
able to use this filter for your G a pic
images

760
00:44:06,063 --> 00:44:09,134
and this is going to be a really nice
advancement

761
00:44:10,034 --> 00:44:13,048
on top of our offerings

762
00:44:13,048 --> 00:44:16,143
the last thing that I want to show you
today is Lance correction

763
00:44:17,043 --> 00:44:20,119
so a lot of the point and shoot cameras
a in the market today

764
00:44:21,019 --> 00:44:24,027
are actually relying on digital signal
processing techniques

765
00:44:24,099 --> 00:44:28,158
to I fix some of the compromises that
are made and

766
00:44:29,058 --> 00:44:32,142
in the Lancers what I mean by that the
input image

767
00:44:33,042 --> 00:44:36,057
as you can see by default is looking
Korek

768
00:44:36,057 --> 00:44:39,126
to us but actual the role image that is
coming in

769
00:44:40,026 --> 00:44:45,041
is booking like this so whenever docs
data is available

770
00:44:45,041 --> 00:44:48,047
in the file roll camera will try to do
the right thing and actually correct for

771
00:44:49,001 --> 00:44:49,005
this

772
00:44:49,041 --> 00:44:54,052
arm aberration but for your own
application you may choose to skip this

773
00:44:54,052 --> 00:44:58,130
step and actually do your own set of
filters or your own last collection

774
00:44:59,003 --> 00:45:03,005
and it's an easy way to actually

775
00:45:03,032 --> 00:45:06,103
go back to actual Ralph sample

776
00:45:07,003 --> 00:45:10,092
of the file itself I'm going to now

777
00:45:10,092 --> 00:45:13,174
quickly turn it back to Davis who's
going to talk about I

778
00:45:14,074 --> 00:45:18,080
users of the second ship you

779
00:45:18,008 --> 00:45:22,012
thank you sir so on as you saw we had
this great new noise reduction

780
00:45:23,002 --> 00:45:27,045
and its have very complex hardcore image
filter that we developed and

781
00:45:27,063 --> 00:45:30,134
I'm it makes great use to the GP you on

782
00:45:31,034 --> 00:45:35,065
this which brings us up to talking about
the second G'pa so year ago we

783
00:45:35,065 --> 00:45:38,099
on out to WC our new Mac Pro which has

784
00:45:38,099 --> 00:45:41,171
this great feature having a second cheap
you are just waiting for your

785
00:45:42,071 --> 00:45:44,093
application to take advantage of it

786
00:45:44,093 --> 00:45:47,189
so let's talk a little about how that
can be used

787
00:45:48,089 --> 00:45:51,164
sup arm so we have some thoughts about

788
00:45:52,064 --> 00:45:56,093
for Corey mention for ross when is a
good time where you might want to use

789
00:45:56,093 --> 00:45:57,099
the second GP

790
00:45:58,053 --> 00:46:01,144
and couple scenarios come to mine one is
if your application

791
00:46:02,044 --> 00:46:05,058
I'm has ability to do speculative
renders for example

792
00:46:05,058 --> 00:46:08,143
you may have a large listed images the
user might be looking at one

793
00:46:09,043 --> 00:46:12,062
but he may switch to the previous or the

794
00:46:12,062 --> 00:46:16,066
following image in any time you cure
application could be speculatively

795
00:46:17,002 --> 00:46:18,004
rendering

796
00:46:18,022 --> 00:46:22,058
the next or previous image on a second
thread

797
00:46:22,058 --> 00:46:25,067
similarly your application may have the
ability to do a large batch

798
00:46:25,067 --> 00:46:28,164
export and you want to do that in the
background and you want to use the Jeep

799
00:46:29,064 --> 00:46:30,067
you

800
00:46:30,094 --> 00:46:33,098
but are you don't want that
background-repeat: you to affect your

801
00:46:34,034 --> 00:46:34,125
foreground GP

802
00:46:35,025 --> 00:46:39,067
usage so these are both great reasons to
use the second Jeep you

803
00:46:39,067 --> 00:46:42,083
on because it allow it. get the best
performance

804
00:46:42,083 --> 00:46:45,142
without are causing year user interface
to stutter

805
00:46:46,042 --> 00:46:49,045
art for its usage some

806
00:46:49,045 --> 00:46:52,143
how does one do that well you could do
this are today on maverick's

807
00:46:53,043 --> 00:46:56,048
at pics around eighty lines open GL code

808
00:46:56,048 --> 00:46:59,059
hard to tell are too chrissy eye contact

809
00:46:59,059 --> 00:47:02,145
that refers to the second offline GPS

810
00:47:03,045 --> 00:47:06,072
on however we've added ace simpler API

811
00:47:06,072 --> 00:47:11,126
in core image on your sanity which is CI
context offline GP wouldn't action

812
00:47:12,026 --> 00:47:17,050
typically to specify 0 so with one API
call you get a CI context and

813
00:47:17,005 --> 00:47:20,071
when using at all renders will use the
second GPS

814
00:47:21,016 --> 00:47:24,023
is very easy and a show that an action
on a

815
00:47:24,023 --> 00:47:27,089
bring us around back up to do a quick
demo

816
00:47:27,089 --> 00:47:31,120
well in our first demo we show that even
the most computationally expensive most

817
00:47:32,002 --> 00:47:35,089
for the Rockets can be down at 60 frames
per sec

818
00:47:36,007 --> 00:47:39,095
I'm going to bring that up the kitchen
back and open up a very noisy

819
00:47:39,095 --> 00:47:46,095
image

820
00:47:49,008 --> 00:47:54,023
so are Ellen R controls can be done at
60 frames per second to show you

821
00:47:54,023 --> 00:47:57,039
that we actually wrote a little bit of
court

822
00:47:57,039 --> 00:48:01,063
to you display the frames per second
when I'm actually sweeping through all

823
00:48:01,063 --> 00:48:02,106
the noise filter settings

824
00:48:03,006 --> 00:48:06,047
and as you can see I'm getting 60 frames
per second

825
00:48:06,047 --> 00:48:10,104
a all the time now let's say that you
have a background for it

826
00:48:11,004 --> 00:48:15,023
where you are cost company exporting
images and for some reason you want to

827
00:48:15,023 --> 00:48:15,062
do

828
00:48:15,062 --> 00:48:18,064
a cheap you pipe on your first

829
00:48:18,064 --> 00:48:22,103
cheap you to simulate that written a
little bit

830
00:48:23,003 --> 00:48:27,037
of text application which is using the
first GP

831
00:48:27,037 --> 00:48:30,039
and when I go back to my own application

832
00:48:30,057 --> 00:48:33,058
which is now also using my first you I
can see that

833
00:48:33,067 --> 00:48:36,100
the frame Nate is actually suffering a
little

834
00:48:37,000 --> 00:48:42,001
I'm going to run my tests it one more
time to see what type of frame rate I'm

835
00:48:42,001 --> 00:48:42,095
getting out of this

836
00:48:43,004 --> 00:48:47,086
and you can quickly see that it has
dropped down to 50 percent

837
00:48:47,086 --> 00:48:53,107
I'm getting 24 frames per second show

838
00:48:54,007 --> 00:48:58,045
can lead to something better than that
and the answer is yes if we are

839
00:48:58,045 --> 00:49:01,070
if we can offload this work to our
second GPA using

840
00:49:01,007 --> 00:49:04,078
the the CI GL offline contact

841
00:49:05,041 --> 00:49:09,064
I will get back to my or regional
performance

842
00:49:09,064 --> 00:49:12,072
in my active ap and to show you that

843
00:49:12,072 --> 00:49:15,151
call one more time I can see that the
user

844
00:49:16,051 --> 00:49:20,102
controls are once again very smart and
the frame rate that I'm going to get

845
00:49:21,002 --> 00:49:28,002
is close to 60 so once again this is a
great way to take advantage of the

846
00:49:32,011 --> 00:49:33,016
second you

847
00:49:33,016 --> 00:49:36,025
if you are cost simply doing
computationally heavy algorithms in the

848
00:49:37,006 --> 00:49:39,079
back row going to handed back

849
00:49:39,079 --> 00:49:43,080
once-over today so to summarize what we
talked about today

850
00:49:43,089 --> 00:49:46,137
on we've talked about some key concepts
understand about core image

851
00:49:47,037 --> 00:49:50,054
we've talked about what's new in core
image on iowa say

852
00:49:50,054 --> 00:49:53,058
most notably custom CI kernels and large
image support

853
00:49:53,094 --> 00:49:56,132
we talked about some new things in core
image

854
00:49:57,032 --> 00:50:00,069
on yosemite on notably some

855
00:50:00,069 --> 00:50:04,130
API modernization and some on great new
noise reduction can draw support

856
00:50:05,003 --> 00:50:08,065
on the faucet talked about how to use
the latest

857
00:50:08,092 --> 00:50:11,128
CI detectors and on how to

858
00:50:12,028 --> 00:50:16,070
work with RAW images in my sleep and not
imagine before so

859
00:50:16,007 --> 00:50:19,049
on this unusual commissioner who to
contact alan's great person to talk to

860
00:50:20,012 --> 00:50:21,104
if you have a request for more
information

861
00:50:22,004 --> 00:50:26,059
are related sessions there's when I
really hope you guys can come to is ours

862
00:50:26,059 --> 00:50:29,076
a second session this afternoon where
we're going to be talking about

863
00:50:29,076 --> 00:50:32,100
how to write custom CI kernels and I'll
ass are

864
00:50:33,000 --> 00:50:36,025
and also we have a lot session that
follows that so if you have

865
00:50:36,025 --> 00:50:39,029
are coding questions please come in we
would love to hear your

866
00:50:39,065 --> 00:50:43,096
here questions or suggestions so that's
all thank you so much for coming

