1
00:00:14,000 --> 00:00:16,001
good morning I'm

2
00:00:16,001 --> 00:00:17,098
on countdown

3
00:00:17,098 --> 00:00:21,105
you thank you arm I work on the debugger
team

4
00:00:22,005 --> 00:00:25,080
at Apple and I'm really excited to show
you this

5
00:00:25,008 --> 00:00:29,021
stuff today now a funny thing before

6
00:00:29,093 --> 00:00:33,098
when I was preparing the slides I
thought by the time I'm giving this talk

7
00:00:33,098 --> 00:00:36,165
maybe some people have looked at the
language manual for swift maybe some

8
00:00:37,065 --> 00:00:38,107
people have tried a playground

9
00:00:39,007 --> 00:00:45,029
it's gone a little faster than that I am
really impressed

10
00:00:45,029 --> 00:00:48,042
you guys I look on the lobs I look on
Twitter

11
00:00:48,042 --> 00:00:51,137
you guys have ap started already entire
ops running in swift

12
00:00:52,037 --> 00:00:56,103
I saw somebody with a rate racer it's
crazy I'm

13
00:00:57,003 --> 00:01:00,059
this is the sort of thing that makes me
happy to be working at Apple

14
00:01:00,059 --> 00:01:03,059
you guys are such awesome developers
it's really just an

15
00:01:03,059 --> 00:01:10,059
honor to write the tools you use thank
you very much

16
00:01:11,081 --> 00:01:13,113
cell I'm gonna tell you

17
00:01:14,013 --> 00:01:18,034
about using lol TB and a swift rebel now

18
00:01:18,034 --> 00:01:22,523
as you're writing a swift top you're
probably gonna write one or two lines up

19
00:01:22,829 --> 00:01:23,560
by key code

20
00:01:23,056 --> 00:01:26,132
and that's where I want to be fit and
now

21
00:01:27,032 --> 00:01:30,089
the good news is lol GB is better than
it's ever been

22
00:01:30,089 --> 00:01:35,106
were swept I'm gonna tell you about some
of the basic features that all to be

23
00:01:36,006 --> 00:01:38,010
house to help you find bugs in your
program

24
00:01:38,046 --> 00:01:41,053
I want to be as its core

25
00:01:41,053 --> 00:01:45,124
is a tool to help you fix problems in
your code it's got

26
00:01:46,024 --> 00:01:49,723
a great set of basic features for
tracking down

27
00:01:49,939 --> 00:01:53,018
where your bugs are ok the first wall

28
00:01:53,729 --> 00:01:56,793
as the stock the stock

29
00:01:57,369 --> 00:02:00,530
is a for is a tool that lets you look

30
00:02:00,053 --> 00:02:04,084
at why the your program is stopped
downed

31
00:02:04,084 --> 00:02:07,120
what functions got called to get you to
the point

32
00:02:08,002 --> 00:02:11,041
where your program stopped now

33
00:02:11,059 --> 00:02:14,788
your program doesn't always obediently
stop where you want it to

34
00:02:15,319 --> 00:02:21,440
in that case you need break points break
points or another great tool LTB

35
00:02:21,044 --> 00:02:24,122
provides that much you stop whenever you
want to

36
00:02:25,022 --> 00:02:30,026
finally no matter how you stop your
program

37
00:02:30,026 --> 00:02:34,595
we have a great expression command that
lets you inspector data

38
00:02:34,829 --> 00:02:39,880
right at the point where your program
stopped and today's presentation

39
00:02:39,088 --> 00:02:43,175
I'm gonna show you these tools working
with swift the good news is

40
00:02:44,075 --> 00:02:47,654
the compounds are basically the same as
they used to be

41
00:02:48,329 --> 00:02:52,100
but I'm gonna show you how to find some
familiar box

42
00:02:52,001 --> 00:02:56,034
but you may have seen before and also a
couple of new ones

43
00:02:56,043 --> 00:03:01,066
that are introduced when you're working
with swept now

44
00:03:01,066 --> 00:03:06,015
the cool thing is this is an all I have
to talk about

45
00:03:06,609 --> 00:03:11,170
we now have a rebel to the swift rebel

46
00:03:11,017 --> 00:03:18,017
is built on topic lol to be you can
access it just

47
00:03:18,006 --> 00:03:22,089
at the old to be command prompt and you
time

48
00:03:23,043 --> 00:03:27,872
that you're debugging a program that's
not although

49
00:03:28,259 --> 00:03:32,266
you can also access the swift trouble
when you don't have a program running

50
00:03:32,329 --> 00:03:37,100
you can access it directly off at the
shell prompt for a clean slate

51
00:03:37,001 --> 00:03:40,360
I'm gonna tell you lots more about
interacting with the

52
00:03:40,459 --> 00:03:44,474
rebel later but there are two basic ways
that we want you to use

53
00:03:44,609 --> 00:03:49,090
the rebel the first is when you've got a
program

54
00:03:49,009 --> 00:03:52,618
with some code and would like to find
out

55
00:03:52,699 --> 00:03:55,740
if it works if it's doing what you
expected to

56
00:03:56,109 --> 00:03:59,470
you can use this ltp rebel

57
00:03:59,047 --> 00:04:03,806
to test your app interactively another
great use for those

58
00:04:04,229 --> 00:04:07,242
LTB rebel is to add new code

59
00:04:07,359 --> 00:04:10,444
you can call right new functions new
classes

60
00:04:11,209 --> 00:04:15,680
in an existing LDP session and they get
put into your code and they can interact

61
00:04:15,068 --> 00:04:17,367
with your code just as if you threaten
them

62
00:04:17,979 --> 00:04:22,970
in your source files now

63
00:04:22,097 --> 00:04:26,166
if you've noticed one theme this year

64
00:04:27,039 --> 00:04:30,114
one thing but kind of over and over
we're seeing

65
00:04:30,789 --> 00:04:34,610
and all the presentation starting right
at the keynote is how everything seems a

66
00:04:34,061 --> 00:04:35,096
little bit more alive

67
00:04:35,096 --> 00:04:38,097
everything's a little bit more
interactive stops coming in Christ

68
00:04:39,006 --> 00:04:40,019
telling you about his hair

69
00:04:40,019 --> 00:04:43,053
its everything's everything's much more

70
00:04:43,053 --> 00:04:46,150
immediate and I want to be as the same
way

71
00:04:47,005 --> 00:04:50,021
now we have a couple of tools that

72
00:04:50,066 --> 00:04:54,110
art that already existed that are very
interactive and we're adding more this

73
00:04:55,001 --> 00:04:55,054
year

74
00:04:55,063 --> 00:04:58,162
first of all you happy expression
command

75
00:04:59,062 --> 00:05:02,158
as I alluded to earlier that's a great
way for when you're stopped

76
00:05:03,058 --> 00:05:06,237
to poke at your variables to call a
couple of local functions

77
00:05:06,759 --> 00:05:10,550
we also have if you're

78
00:05:10,055 --> 00:05:13,088
a little bit more experienced old to be
users may be watch them some of our

79
00:05:13,088 --> 00:05:14,377
previous session videos

80
00:05:15,169 --> 00:05:19,600
lol to be Python scripting I'm not gonna
tell you too much about that

81
00:05:19,006 --> 00:05:23,071
in this session but it's a great way to
create new debugger features

82
00:05:24,025 --> 00:05:27,664
and automate your debugging processes

83
00:05:27,889 --> 00:05:32,260
this year we've added playgrounds which
allow you to prototype

84
00:05:32,026 --> 00:05:36,041
entire new algorithms from scratch and
learn API's

85
00:05:36,041 --> 00:05:39,049
and we've also added the Lobb rebel

86
00:05:39,049 --> 00:05:43,147
now what's the difference between the
LDP rebel and playgrounds

87
00:05:44,047 --> 00:05:48,084
playgrounds as I told you and as you saw
in Wednesday's demo which

88
00:05:48,084 --> 00:05:52,142
reckon Connor showed you all the
fantastic ways you can use playgrounds

89
00:05:53,042 --> 00:05:56,141
playgrounds works from a blank slate
you've got a text editor

90
00:05:57,041 --> 00:06:00,074
you import the stuff you want to import
when you write some code

91
00:06:00,074 --> 00:06:03,128
and you see how it works on the other
hand

92
00:06:04,028 --> 00:06:08,035
the point that the LTB rebel is to let
you

93
00:06:08,035 --> 00:06:15,035
investigate how code would work if it
were inside your pre-existing program

94
00:06:16,072 --> 00:06:19,107
now in today's session I'm gonna give
you

95
00:06:20,007 --> 00:06:23,012
to basic things first

96
00:06:23,012 --> 00:06:26,103
an overview are the kind of beat skills
that you're going to want to apply just

97
00:06:27,003 --> 00:06:32,008
working with lol to be in your regular
debugging

98
00:06:32,008 --> 00:06:35,101
and then I'm gonna tell you about some
new debugging workflows

99
00:06:36,001 --> 00:06:39,880
the torch swift rebel enables

100
00:06:39,889 --> 00:06:46,889
finally I'm gonna sum up and tell you
where you can go for more information

101
00:06:48,006 --> 00:06:52,585
sup lots jump right into basic debugging

102
00:06:52,639 --> 00:06:55,680
now in this slides I'm going to show you

103
00:06:55,068 --> 00:06:58,074
interactions with lol TB but really

104
00:06:58,074 --> 00:07:01,173
there's two basic ways of talking to Ala
to be

105
00:07:02,073 --> 00:07:05,088
the one is if you're inside Xcode

106
00:07:05,088 --> 00:07:09,116
in Xcode you have the debugger console
which is usually at the bottom of your

107
00:07:10,016 --> 00:07:13,055
window when you're debugging

108
00:07:13,055 --> 00:07:16,106
you can work with the debugger console
an answer compounds

109
00:07:17,006 --> 00:07:20,075
and also Xcode provides you with a bunch
of you why features

110
00:07:20,075 --> 00:07:25,128
that but you automatic but but you
automate certain things like stopping

111
00:07:26,028 --> 00:07:29,035
there's another way of working with LTP

112
00:07:29,035 --> 00:07:32,126
but some %uh view more experienced users
may use from time to time

113
00:07:33,026 --> 00:07:37,078
and that's the terminal the RTB command
line interface

114
00:07:37,078 --> 00:07:41,078
uses the exact same commands that you're
familiar with with typing and commands

115
00:07:41,078 --> 00:07:42,173
in Xcode

116
00:07:43,073 --> 00:07:46,074
I'm going to show you the command line
interface

117
00:07:46,074 --> 00:07:50,082
but there's great sessions I'll tell you
why later the tell you more about how to

118
00:07:50,082 --> 00:07:54,088
use that through Xcode

119
00:07:54,088 --> 00:07:57,132
now this is up situation

120
00:07:58,032 --> 00:08:02,411
but probably all all if you have run
into at one time or another

121
00:08:02,699 --> 00:08:07,530
you're debugging along in your program
and your program crashes

122
00:08:07,053 --> 00:08:10,118
it stopped and now the question is well
what do i do there's all this

123
00:08:11,018 --> 00:08:13,079
information here

124
00:08:13,079 --> 00:08:16,156
there are couple basic questions but you
should be asking

125
00:08:17,056 --> 00:08:20,150
that will help you find your back as
quickly as possible

126
00:08:21,005 --> 00:08:26,032
the first is what is the stop a reason
wire we stopped

127
00:08:26,077 --> 00:08:30,136
the stop reason is a facility that Ltd
provides

128
00:08:31,036 --> 00:08:35,125
the tells you why are your program its
was told to stop

129
00:08:36,025 --> 00:08:39,544
something makes it stop

130
00:08:39,769 --> 00:08:42,820
the next question is alright well I know
wop

131
00:08:43,279 --> 00:08:47,285
mmm dot the program was told to stop how
to get there

132
00:08:47,339 --> 00:08:50,420
what code around to get us to this bad
point

133
00:08:51,149 --> 00:08:55,180
this is where you use the stock as I
alluded to earlier

134
00:08:55,018 --> 00:08:58,061
you want to look up the stock and find
your own code

135
00:08:58,061 --> 00:09:02,069
so look for all the framework code look
through all the standard library code

136
00:09:02,069 --> 00:09:06,518
and find frames in your own code that
are responsible for this

137
00:09:07,139 --> 00:09:10,500
once you have located the place where
things might have gone wrong

138
00:09:10,005 --> 00:09:13,027
than you can start investigating the
failure conditions looking at your

139
00:09:13,072 --> 00:09:13,147
variables

140
00:09:14,047 --> 00:09:20,085
and seeing what variable values might
have gotten you into a bad state

141
00:09:20,085 --> 00:09:23,157
so let's get started and look at
applying these basic techniques

142
00:09:24,057 --> 00:09:30,079
to some crap to some crashes you might
see out in the world

143
00:09:30,079 --> 00:09:35,118
now but their programs crashed the first
question as I told you what you want to

144
00:09:35,829 --> 00:09:36,350
know

145
00:09:36,035 --> 00:09:40,080
the stock reason why did it crash

146
00:09:40,008 --> 00:09:43,020
but command that helps you find this
information is called

147
00:09:43,092 --> 00:09:48,129
thread intro now I'm showing you two
versions of the command here

148
00:09:49,029 --> 00:09:52,068
they both do the exact same thing

149
00:09:52,068 --> 00:09:55,135
it's just that the short version TI

150
00:09:56,035 --> 00:10:00,070
is very quick to type and if you're
doing repeated stops and you're trying

151
00:10:00,007 --> 00:10:01,059
to get their work done quickly

152
00:10:02,022 --> 00:10:06,081
know probably use short versions the
commands there's also a long long

153
00:10:06,279 --> 00:10:07,720
version of the command

154
00:10:07,072 --> 00:10:10,075
now there are two reasons why this might
be helpful

155
00:10:10,075 --> 00:10:14,108
the first is it's more explicit about
what you're doing

156
00:10:15,008 --> 00:10:18,517
and the second thing is you can find it
in the help

157
00:10:18,589 --> 00:10:22,300
so if you use the Help commander the
Opera poke a mountain lol DB

158
00:10:22,003 --> 00:10:25,005
you can find this command very easily

159
00:10:25,005 --> 00:10:28,012
now let's say you type thread and for
what the hell to be prompt

160
00:10:28,057 --> 00:10:32,149
you're gonna got some information about
the thread that's currently stopped

161
00:10:33,049 --> 00:10:37,056
there's two pieces of information but
you want to know when you're crashed

162
00:10:38,019 --> 00:10:41,047
the first is what piece of code crashed

163
00:10:41,047 --> 00:10:44,068
in this case were stopped in a function
called swift

164
00:10:44,068 --> 00:10:47,070
top underscore get optional value

165
00:10:47,088 --> 00:10:50,105
now the swift underscore pop as a swift
top part

166
00:10:51,005 --> 00:10:54,234
is very important here because it tells
you

167
00:10:54,279 --> 00:10:57,680
but you're inside the key swift module

168
00:10:57,068 --> 00:11:00,156
the swift module is the swift standard
library so we are you know

169
00:11:01,056 --> 00:11:04,081
but standard library code crashed

170
00:11:04,081 --> 00:11:07,142
now what was the reason that it did for
crushing

171
00:11:08,042 --> 00:11:11,057
the reason is a bad instruction

172
00:11:11,057 --> 00:11:15,516
now some of you may cutscene this
message before

173
00:11:16,029 --> 00:11:19,630
about instruction is when the CPU
doesn't understand the instruction

174
00:11:19,063 --> 00:11:20,144
that's being given

175
00:11:21,044 --> 00:11:24,083
but wait a second we've got a compiler
error that's

176
00:11:24,083 --> 00:11:29,086
being pretty smart about and issuing the
right instructions what's going on here

177
00:11:30,013 --> 00:11:34,062
well it turns out but much ninety-nine
percent of the time despite instructions

178
00:11:34,062 --> 00:11:36,099
are used in assertions

179
00:11:36,099 --> 00:11:39,197
soil the code says if something is bad

180
00:11:40,097 --> 00:11:43,163
if something unexpected is happening I'm
going to issue about instruction to the

181
00:11:44,063 --> 00:11:46,142
CPU in the program will stop

182
00:11:47,042 --> 00:11:50,057
so when you see your ex about
instruction what you should be thinking

183
00:11:50,057 --> 00:11:50,064
as

184
00:11:51,027 --> 00:11:56,036
assertion failure now

185
00:11:56,279 --> 00:11:59,740
what we can see from the stop reason
without even looking at the stocker and

186
00:11:59,074 --> 00:12:00,080
if the stock frames

187
00:12:00,008 --> 00:12:03,417
is that we failed an assertion in the
standard library

188
00:12:04,209 --> 00:12:09,520
know what might cause that to happen
okay let's move on and have a lock

189
00:12:09,052 --> 00:12:13,060
the next commander gonna wanna use is
the back trace command

190
00:12:13,006 --> 00:12:16,031
the thread back trace command Prince

191
00:12:16,085 --> 00:12:19,136
all the frames on the car stock up the
current thread

192
00:12:20,036 --> 00:12:23,123
that is it tells you what functions
called each other

193
00:12:24,023 --> 00:12:28,041
on the current thread to get you to the
point where you've stopped

194
00:12:28,041 --> 00:12:32,045
in this case we see but just below the

195
00:12:32,045 --> 00:12:35,137
the the function but was actually crop
stopped

196
00:12:36,037 --> 00:12:40,126
you see your own code now this top-level
code function

197
00:12:41,026 --> 00:12:45,058
may be familiar to you if you played
around with with command-line tools

198
00:12:45,058 --> 00:12:49,687
that's the code but outside any function
in your main source file

199
00:12:50,209 --> 00:12:55,278
other command line tool so you recognize
this top-level Cody you say aha

200
00:12:55,899 --> 00:13:01,240
this is my code but Apple ok top-level
code is frame number one

201
00:13:01,024 --> 00:13:05,026
cell that means we called directly into
the standard library and an assertion

202
00:13:05,026 --> 00:13:07,061
failed:

203
00:13:07,061 --> 00:13:10,085
let's have a look at why that happened
well

204
00:13:10,085 --> 00:13:15,090
we select the first frame and now we
have information about the source code

205
00:13:16,035 --> 00:13:19,114
because it's your own code and we have
to

206
00:13:20,014 --> 00:13:24,050
here we see that we've got on optional
and the object

207
00:13:24,005 --> 00:13:27,077
that we got from a source that looks a
little shady

208
00:13:28,022 --> 00:13:32,099
and then we unwrapped not optional
without checking well

209
00:13:32,099 --> 00:13:36,116
turns out if you print the value of that
on drop knocked out optional

210
00:13:37,016 --> 00:13:41,022
you see that optional is non well

211
00:13:41,076 --> 00:13:44,149
thats but not too difficult to fix you
instead try

212
00:13:45,049 --> 00:13:48,122
if not and that will let you and and
that will make the

213
00:13:49,022 --> 00:13:53,076
unwrapping code conditional on there
actually being something in there

214
00:13:53,076 --> 00:13:57,120
now let's take a little detour before we
look at more examples

215
00:13:58,002 --> 00:14:01,044
if you're using Xcode you're gonna see
more than just

216
00:14:01,062 --> 00:14:05,117
the stock but i just showed you if
you're using live dispatch in your

217
00:14:06,017 --> 00:14:06,113
program

218
00:14:07,013 --> 00:14:11,067
ax code will additionally show you all
the conscience that got called

219
00:14:11,067 --> 00:14:14,071
in order to despot in in queue your

220
00:14:15,007 --> 00:14:18,066
currentfile your current block onto a
cue

221
00:14:18,066 --> 00:14:21,069
done after that once the Q started
running your code

222
00:14:21,069 --> 00:14:24,118
you see the stock frames that your code
invoked

223
00:14:25,018 --> 00:14:28,061
now why is this relevant to this talk
well

224
00:14:28,061 --> 00:14:31,118
all the stock frames that are above the
last a

225
00:14:32,018 --> 00:14:36,027
block execution you'll be able to see
local variables for

226
00:14:37,008 --> 00:14:41,054
however all the local variables from
before it got in cued

227
00:14:41,054 --> 00:14:44,061
are not going to be available to you so
you need him that's why they're great

228
00:14:45,024 --> 00:14:46,045
out in Xcode

229
00:14:46,045 --> 00:14:49,131
and you need to make sure you know you
remember that

230
00:14:50,031 --> 00:14:53,036
alright well Grand Central Dispatch is
cool

231
00:14:53,081 --> 00:14:56,730
but we're focusing on LD be so let's get
back to it

232
00:14:57,459 --> 00:15:02,240
here's another case where we've got us
an assertion

233
00:15:02,024 --> 00:15:05,029
now I told you earlier but there's a
compound called thread info

234
00:15:05,074 --> 00:15:10,100
and that's a great way to find the stop
a reason for your current threat

235
00:15:11,000 --> 00:15:14,035
another way to find both bus stop reason

236
00:15:14,035 --> 00:15:19,041
and all the stock frames is just too
issue the back trace command

237
00:15:19,041 --> 00:15:23,060
if you do this and this case with
crashed in a different spot

238
00:15:23,006 --> 00:15:26,018
we see still that the the reason we stop

239
00:15:26,072 --> 00:15:30,087
is about instruction and we're still
stopped

240
00:15:30,087 --> 00:15:33,366
in the swift standard library in this
case though

241
00:15:34,149 --> 00:15:37,211
were stopped in the gutter for on a rape
him

242
00:15:37,769 --> 00:15:40,790
member

243
00:15:40,079 --> 00:15:43,085
well what's look at our own code

244
00:15:44,039 --> 00:15:47,060
now this is a function in your own
program

245
00:15:47,006 --> 00:15:50,089
on on the left hand side you see the
main macho

246
00:15:51,043 --> 00:15:54,079
and on the right hand side of the doctor
C the name

247
00:15:54,079 --> 00:15:59,068
your function in this case find element
now what's this code doing

248
00:15:59,779 --> 00:16:05,260
find element is iterating across an
array and for every element in the array

249
00:16:05,026 --> 00:16:10,030
it's applying a function to it one stop
function returns true

250
00:16:10,003 --> 00:16:14,042
it returns that element of the year
right and if that function never returns

251
00:16:14,339 --> 00:16:15,364
true

252
00:16:15,589 --> 00:16:19,594
the function returns no there's some
problem here

253
00:16:20,089 --> 00:16:23,160
maybe some have you figured it out but
just

254
00:16:23,016 --> 00:16:26,087
but the way I would and look at this is
I would look at the

255
00:16:26,087 --> 00:16:30,131
current and oxen to the right again
using the print command

256
00:16:31,031 --> 00:16:34,075
which is short for expression

257
00:16:34,075 --> 00:16:38,414
in this case we see that the index is
that the fourth element of the array

258
00:16:39,089 --> 00:16:42,490
well let's look at the right the count

259
00:16:42,049 --> 00:16:45,898
property off the rails 3 we've walked
too far

260
00:16:46,339 --> 00:16:50,342
what happened here we use the radar
count right didn't win

261
00:16:50,639 --> 00:16:53,810
are not quite so here we have

262
00:16:53,081 --> 00:16:57,790
a case have missed you serve the close
range operator

263
00:16:58,519 --> 00:17:02,260
we shouldn't have used the close-range
operator we should at least have only

264
00:17:02,026 --> 00:17:05,675
used a half open range operator because
the course the index is over in a race

265
00:17:05,909 --> 00:17:07,100
start with 0

266
00:17:07,001 --> 00:17:11,054
so the and at count -1 instead account

267
00:17:11,063 --> 00:17:15,064
but the real answer here is we shouldn't
have been in using the index at all

268
00:17:15,073 --> 00:17:18,100
we should have just been using for
element in array and what

269
00:17:19,000 --> 00:17:24,279
swift and all the details of the
indexing for us

270
00:17:24,279 --> 00:17:27,980
alright what's look at another crash now
that we've

271
00:17:27,098 --> 00:17:31,267
kinda seen the basics this crash looks a
lot uglier suddenly there's a time

272
00:17:32,149 --> 00:17:33,175
frames on the stock

273
00:17:33,409 --> 00:17:36,260
what the heck is going on in all of
these look like they're and Lipsky plus

274
00:17:36,026 --> 00:17:38,100
plus a BI and so forth are scary

275
00:17:39,000 --> 00:17:43,549
so what's

276
00:17:43,549 --> 00:17:47,572
what's use our method and look through
the systematically

277
00:17:47,779 --> 00:17:52,831
the first thing you see is that the stop
reason is Singapore

278
00:17:53,299 --> 00:17:56,870
that means that we ran into a situation

279
00:17:56,087 --> 00:17:59,136
where the colonel had to put the kibosh
on us

280
00:18:00,036 --> 00:18:05,095
and say no this has gone too far you're
cut off stop

281
00:18:05,419 --> 00:18:09,430
why does not happen top often happens

282
00:18:09,529 --> 00:18:14,390
because an exception that's thrown when
second exceptions were coming and swift

283
00:18:14,039 --> 00:18:15,076
here

284
00:18:15,076 --> 00:18:20,102
alright bar they're still there if you
look on the stock

285
00:18:21,002 --> 00:18:24,034
in fact in objective-c exception is
being thrown

286
00:18:24,034 --> 00:18:28,087
alright well we've got a track this down
so we look for our own code here and in

287
00:18:28,087 --> 00:18:29,026
fact we see

288
00:18:29,809 --> 00:18:33,260
again a function called find element

289
00:18:33,026 --> 00:18:37,044
as functions causing a lot of trouble
let's have a look at it

290
00:18:37,044 --> 00:18:40,125
so we select that frame and now we see
our code again

291
00:18:41,025 --> 00:18:44,096
this time find element is looking across
an annus array instead of a swift

292
00:18:44,096 --> 00:18:46,145
standard library array

293
00:18:47,045 --> 00:18:50,124
again we've got the stupid coding error
with the close range

294
00:18:51,024 --> 00:18:55,091
but the more interesting thing is
because we were using and Panesar right

295
00:18:55,091 --> 00:18:58,100
we were calling in to objective-c code

296
00:18:58,919 --> 00:19:05,919
no objective c- code does throw
exceptions

297
00:19:06,169 --> 00:19:11,150
now one if I took an unofficial survey a
vial of DB Developer's last night when I

298
00:19:11,015 --> 00:19:11,924
was sitting in bad

299
00:19:12,059 --> 00:19:17,230
and the most popular the most popular
crash by far

300
00:19:17,023 --> 00:19:20,058
was this one

301
00:19:20,058 --> 00:19:25,064
yuck CBR access addresses 0

302
00:19:25,064 --> 00:19:28,109
this means that you are trying to access
memory

303
00:19:29,009 --> 00:19:33,034
out a bad address

304
00:19:33,034 --> 00:19:37,039
no tends to be about address

305
00:19:37,039 --> 00:19:43,083
so what's going on here I'm coding and
swept it's supposed to be safe

306
00:19:43,083 --> 00:19:49,139
well what's have a look and see what our
top level code is doing here

307
00:19:50,039 --> 00:19:53,054
I go to that frame and I look at my code

308
00:19:53,054 --> 00:19:56,121
the code is importing foundation and
it's getting some and ice data from a

309
00:19:57,021 --> 00:20:00,073
you are all that looks kinda suspicious

310
00:20:00,073 --> 00:20:04,079
and Van it looks at the bites property
of dot of the resulting data

311
00:20:05,033 --> 00:20:09,102
and pulls out the first element up

312
00:20:10,002 --> 00:20:14,011
what's the problem here well let's look
at cars

313
00:20:14,011 --> 00:20:17,210
Charice is a nolle unsafe Poyner

314
00:20:17,309 --> 00:20:21,370
we're working with objective-c API's

315
00:20:21,037 --> 00:20:27,038
objective-c API's can give you unsafe
pointers

316
00:20:27,038 --> 00:20:30,039
this is sold your old friend

317
00:20:30,048 --> 00:20:34,074
bunol Poyner is still around and
whenever you're dealing with unsafe

318
00:20:34,074 --> 00:20:34,081
pointers

319
00:20:35,044 --> 00:20:39,075
you have to be very sure that you know
what you're doing

320
00:20:39,075 --> 00:20:43,103
are a sold the last year as

321
00:20:44,003 --> 00:20:47,101
Swift is safe but the frameworks that
you're working with

322
00:20:48,001 --> 00:20:52,035
may not be safe

323
00:20:52,035 --> 00:20:55,089
not some up we've looked at a couple of
different ways in which your code can

324
00:20:55,089 --> 00:20:55,175
crash

325
00:20:56,075 --> 00:21:01,148
and we've seen that the most important
thing to look at is the stop a reason

326
00:21:02,048 --> 00:21:05,065
the next thing once you figured out what
the stop prisoners

327
00:21:05,065 --> 00:21:10,071
is looking at the stock to find where
your code fits another picture

328
00:21:10,071 --> 00:21:13,144
your code is going to have local
variables

329
00:21:14,044 --> 00:21:17,125
and you can use the expression command
to figure out what does local variables

330
00:21:18,025 --> 00:21:18,069
are

331
00:21:18,069 --> 00:21:23,073
and how they connect to the prompt
across you're seeing

332
00:21:24,009 --> 00:21:28,082
now unfortunately we don't always live
in a world where your program stops

333
00:21:28,082 --> 00:21:31,082
when it's doing something wrong

334
00:21:31,082 --> 00:21:34,109
for those for that world there's break
points

335
00:21:35,009 --> 00:21:39,598
and also beer up

336
00:21:39,679 --> 00:21:45,150
you can use a break point if and leave
the following things are true

337
00:21:45,015 --> 00:21:48,019
the first case is when the problem isn't
a crash

338
00:21:48,019 --> 00:21:51,083
I've been showing you lots of cases
where your program just can't move on

339
00:21:51,083 --> 00:21:55,062
because at tried to access something it
shouldn't have

340
00:21:55,809 --> 00:22:00,610
but that's not the only kinda Barack
your program might be outputting wrong

341
00:22:00,061 --> 00:22:03,990
Dadar and it might work my piece

342
00:22:04,539 --> 00:22:08,280
you not something something embarrassing
to a social networking site

343
00:22:08,028 --> 00:22:13,109
that's a little tougher to set a
breakpoint on but bear with me

344
00:22:14,009 --> 00:22:17,022
so ok and there's another reason

345
00:22:17,022 --> 00:22:21,040
you may just wanna say you know I saw
the failing code on the stock but I'd

346
00:22:21,004 --> 00:22:22,090
like to stop when that happens

347
00:22:23,026 --> 00:22:27,038
not when the crash occurs well

348
00:22:27,038 --> 00:22:31,077
breakpoints are a great tool for all of
these cases

349
00:22:31,077 --> 00:22:35,109
breakpoints have a couple of attributes
and you can edit them in tax code really

350
00:22:36,009 --> 00:22:39,010
easily as well

351
00:22:39,001 --> 00:22:43,092
the most important part of a break point
is the specification

352
00:22:44,001 --> 00:22:48,082
when you say I want to stop at places
that look like this

353
00:22:48,082 --> 00:22:51,153
what that means two allele de beers this
is a specification

354
00:22:52,053 --> 00:22:55,099
I need to be listening down

355
00:22:55,099 --> 00:22:58,138
lol TB goes out and looks in the world
for locations

356
00:22:59,038 --> 00:23:02,101
that match your specifications

357
00:23:03,001 --> 00:23:06,020
now I want to be as clever about this
not only

358
00:23:06,002 --> 00:23:11,021
the locations that are already in your
program when you issue the command:

359
00:23:11,039 --> 00:23:14,097
have much the specification but also

360
00:23:14,097 --> 00:23:17,135
if you load a bundle or some other
framework dynamically

361
00:23:18,035 --> 00:23:21,071
Lobb is still sitting there in the
background saying all is there anything

362
00:23:21,071 --> 00:23:24,080
that matches my location here

363
00:23:25,061 --> 00:23:28,065
finally there's a couple of optional
parts two break points

364
00:23:28,065 --> 00:23:31,161
the important than that I'll show you in
a moment the first as the breakpoint

365
00:23:32,061 --> 00:23:33,095
condition

366
00:23:33,095 --> 00:23:38,103
the condition tells alot be I only
actually wanna stop here

367
00:23:39,003 --> 00:23:42,025
when a certain predicate is true

368
00:23:42,025 --> 00:23:46,051
finally there are actions that you can
perform without having to type antique

369
00:23:46,051 --> 00:23:46,109
amount

370
00:23:47,009 --> 00:23:51,022
automatically when the breakpoint gets
here

371
00:23:51,022 --> 00:23:54,063
so let's look at some code

372
00:23:54,063 --> 00:23:58,149
here at implemented a very very
simplistic banking application

373
00:23:59,049 --> 00:24:02,111
based a little bit I'm on my own like
wish wishes arm

374
00:24:03,011 --> 00:24:06,012
the bank account is

375
00:24:06,021 --> 00:24:09,116
has a value that's represented in
santa's

376
00:24:10,016 --> 00:24:13,074
and you have two functions you have a
withdraw function

377
00:24:13,074 --> 00:24:17,095
and you have a deposit function now you
withdraw function

378
00:24:17,095 --> 00:24:21,160
is little bit smart and it charges an
overdraft fee when you

379
00:24:22,006 --> 00:24:26,048
go below when you withdraw more than is
actually in your account

380
00:24:27,002 --> 00:24:30,011
now because this is my kind of wish list
are

381
00:24:30,011 --> 00:24:33,450
this wishlist account function this is
actually

382
00:24:33,549 --> 00:24:39,880
are overdraft fee of 10 cents but bear
with me this is just an example

383
00:24:39,088 --> 00:24:42,132
cell you wanna stop exactly when

384
00:24:43,032 --> 00:24:46,521
an overdraft fee is charged

385
00:24:46,809 --> 00:24:49,900
that's over here on line 6

386
00:24:49,009 --> 00:24:52,268
and in order to stop there you simply
type

387
00:24:53,159 --> 00:24:57,198
break points at with the file sent to
your current source file

388
00:24:57,549 --> 00:25:02,190
and the line Sat 26 the way you were
doing this in Xcode is just click

389
00:25:02,019 --> 00:25:08,062
next to that line and that was the exact
same thing

390
00:25:08,062 --> 00:25:12,075
now once you've sucked at break point
you can look at the break point last

391
00:25:12,075 --> 00:25:16,126
to see all those attributes I was
talking about earlier

392
00:25:17,026 --> 00:25:20,325
the first thing that's relevant here is

393
00:25:20,559 --> 00:25:25,320
vote specification of the breakpoint
allele TB will tell you

394
00:25:25,032 --> 00:25:30,371
but you wanted us break point at a
certain file and a certain line

395
00:25:30,659 --> 00:25:33,780
the cool thing is I want to be also
tells you

396
00:25:33,078 --> 00:25:37,086
all the locations that actually found
for that break point

397
00:25:37,086 --> 00:25:41,178
now in this case there's only one
location

398
00:25:42,078 --> 00:25:45,161
but there might be more now let's have a
look at a case where there might be more

399
00:25:46,061 --> 00:25:47,061
locations

400
00:25:47,061 --> 00:25:50,108
but first lots do a quick segue

401
00:25:51,008 --> 00:25:55,021
I've seen people that have Hunza break
points at

402
00:25:55,021 --> 00:25:59,052
and one thing that can be frustrating as
you've got a budget tracking down

403
00:25:59,052 --> 00:26:02,065
and you've got a bunch of break points
that you had sent from an early Europe

404
00:26:02,065 --> 00:26:02,134
right from

405
00:26:03,034 --> 00:26:06,045
from debugging an earlier problem and
you wanted

406
00:26:06,045 --> 00:26:10,514
not stop it all of those what will
happen to have the breakpoint disable

407
00:26:10,919 --> 00:26:10,983
command

408
00:26:11,559 --> 00:26:14,564
to let you do exactly that if you
disable a break point

409
00:26:15,059 --> 00:26:18,094
you can obviously enable it later but
for the time it's disabled

410
00:26:18,409 --> 00:26:22,940
LDP will simply ignore it and all of its
locations

411
00:26:22,094 --> 00:26:27,203
now but say we have a little bit
different code

412
00:26:28,049 --> 00:26:32,890
this is a simple example where we
implemented a function called times too

413
00:26:32,089 --> 00:26:35,151
times to applies to integers it applies
two doubles

414
00:26:36,051 --> 00:26:40,210
and it also applies to strings

415
00:26:40,669 --> 00:26:44,682
I want to stop whenever any of these is
called but wait

416
00:26:44,799 --> 00:26:48,700
they've all got different line numbers
how am I gonna do that

417
00:26:48,007 --> 00:26:51,476
in this case we can use a symbolic break
point

418
00:26:52,169 --> 00:26:55,450
if I type breakpoint on times

419
00:26:55,045 --> 00:26:58,099
to lol TB will say okay

420
00:26:58,099 --> 00:27:02,105
you want to match all functions that are
called times too

421
00:27:03,059 --> 00:27:08,062
and it already tells you it found three
locations for that

422
00:27:08,062 --> 00:27:11,731
now if you do a breakpoint left you see
some more information

423
00:27:12,289 --> 00:27:17,240
but can be very valuable the first thing
of course is your specification you said

424
00:27:17,024 --> 00:27:20,090
you wanted the name to be times too

425
00:27:20,009 --> 00:27:25,047
the next part is all the locations that
lol to be found for your break point

426
00:27:26,028 --> 00:27:29,035
in this case it found a location where
you were processing an int

427
00:27:29,098 --> 00:27:32,127
and returning Int it also found the same
thing for double

428
00:27:33,027 --> 00:27:36,071
and the same thing for a string okay
that's cool

429
00:27:36,071 --> 00:27:40,088
what can I do with this information well
let's say you only care about the case

430
00:27:40,088 --> 00:27:40,157
where you

431
00:27:41,057 --> 00:27:45,059
are Pampling a string and that case

432
00:27:45,059 --> 00:27:50,061
you can disable all the locations except
the ones you care about

433
00:27:50,061 --> 00:27:53,500
now this is non this is a course handy
when you hop source code

434
00:27:54,049 --> 00:27:58,450
but if you don't have source code this
is even better

435
00:27:58,045 --> 00:28:01,099
you may be saying to yourself well I'd
really like to know when I'm

436
00:28:01,099 --> 00:28:06,124
in this array subscript operator from
the from the standard library

437
00:28:07,024 --> 00:28:10,036
well why not use a symbolic break point

438
00:28:10,036 --> 00:28:15,085
we don't need source for that and then
you say well all I said the breakpoint

439
00:28:15,409 --> 00:28:18,480
on the subscript operator but there's a
bunch of them

440
00:28:18,048 --> 00:28:22,857
well it's okay to just disable the
locations you didn't what

441
00:28:23,289 --> 00:28:27,630
there's another another cool way of
doing this

442
00:28:27,063 --> 00:28:31,076
but uses a skill called regular
expressions

443
00:28:31,076 --> 00:28:34,114
now someone you've made may have worked
with regular expressions before and if

444
00:28:35,014 --> 00:28:41,022
so you're always looking for new ways to
use them

445
00:28:41,022 --> 00:28:44,077
this is actually a joke rock from my one
another of my colleagues are used to

446
00:28:44,077 --> 00:28:46,082
give the talk some

447
00:28:46,082 --> 00:28:50,301
blame him arm the

448
00:28:51,039 --> 00:28:54,330
ones when you set this breakpoint use

449
00:28:54,033 --> 00:28:57,102
you say I wanna stop at times too
followed by

450
00:28:58,002 --> 00:29:01,261
Anne sequence of characters as long as
they're so

451
00:29:01,279 --> 00:29:04,820
the word string in there son now you've
broke

452
00:29:04,082 --> 00:29:08,061
you've set a breakpoint specifically at
the swift dots

453
00:29:08,799 --> 00:29:15,150
at at the version of times to that
handles swift arts training

454
00:29:15,015 --> 00:29:17,064
alright well we've got regular
expression break points that's really

455
00:29:17,064 --> 00:29:18,833
quite what else can we do

456
00:29:19,409 --> 00:29:23,200
well we can use regular expression break
points for other types the categories a

457
00:29:23,002 --> 00:29:24,014
functions

458
00:29:24,032 --> 00:29:27,085
so for example if you wanna stop on all
matters have a certain class you say

459
00:29:27,085 --> 00:29:29,664
well breaks out on the regular
expression account

460
00:29:30,429 --> 00:29:33,820
backslash backslash top while these
backslashes

461
00:29:33,082 --> 00:29:37,100
well the reason for that is that we want
to make we won

462
00:29:38,000 --> 00:29:41,049
top 10 actually be a dock here

463
00:29:41,049 --> 00:29:44,070
we don't want it to mean any character
and regular expressions that would

464
00:29:44,007 --> 00:29:46,015
normally mean and character

465
00:29:46,015 --> 00:29:50,023
you can do the same thing with functions
in a module although watch out

466
00:29:50,023 --> 00:29:52,852
once you start setting a breakpoint on
all functions in a macho you're gonna

467
00:29:53,059 --> 00:29:55,710
find out there are a lot of functions in
a module

468
00:29:55,071 --> 00:30:01,114
including some automatically generated
ones so you wanna watch out for that

469
00:30:02,014 --> 00:30:06,026
there's a lot more on regular expression
break points in a couple of other

470
00:30:06,026 --> 00:30:11,027
do topics like dot India advanced
debugging with Ltd talk that we did last

471
00:30:11,036 --> 00:30:12,083
year

472
00:30:12,083 --> 00:30:15,101
that should all still apply it to us too
swift as well

473
00:30:16,001 --> 00:30:19,039
ok all right

474
00:30:19,039 --> 00:30:22,124
back to our examples not say you've
applied

475
00:30:23,024 --> 00:30:27,027
symbolic break points you've said sumfin
online break by Bay gets hit all the

476
00:30:27,027 --> 00:30:28,070
time

477
00:30:28,007 --> 00:30:31,466
you're like oh man this is this is
really tedious to pee ke pressing

478
00:30:32,159 --> 00:30:33,640
continue

479
00:30:33,064 --> 00:30:38,111
why can't there be a better way well in
fact there is a better way

480
00:30:39,011 --> 00:30:42,580
now let's go back to our bank account
example and let's say we're being

481
00:30:42,679 --> 00:30:45,990
extremely gracious and we're not
charging an overdraft fee

482
00:30:45,099 --> 00:30:48,171
but we find that the users have this
bank account tend to be kinda

483
00:30:49,071 --> 00:30:52,137
responsible in their spending

484
00:30:53,037 --> 00:30:57,966
again we can set our break point on the
withdraw function

485
00:30:58,299 --> 00:31:01,610
but now run

486
00:31:01,061 --> 00:31:04,760
once we've set a breakpoint we'd like to
now

487
00:31:05,309 --> 00:31:10,370
when would we charge an overdraft fee if
we were to charge one

488
00:31:10,037 --> 00:31:13,113
the way we find this out if I'm setting
a breakpoint

489
00:31:14,013 --> 00:31:17,027
condition on the break point

490
00:31:17,027 --> 00:31:21,046
now a condition is simply a swift
expression

491
00:31:21,289 --> 00:31:25,510
that good value rates to either true or
false

492
00:31:25,051 --> 00:31:29,132
if the swift expression evaluates to
true than allele TB stops

493
00:31:30,032 --> 00:31:34,051
at that break point if the condition
evaluates to false

494
00:31:34,051 --> 00:31:40,127
lol to be automatically continues and
you never see a

495
00:31:41,027 --> 00:31:45,816
another thing you might wanna do is
instead of just stopping when you were

496
00:31:46,059 --> 00:31:50,020
were charging overdraft you'd like to
see what kinds of

497
00:31:50,002 --> 00:31:53,049
amounts are people withdrawing from the
back at what is what is their balance is

498
00:31:53,049 --> 00:31:54,124
looking like

499
00:31:55,024 --> 00:31:58,026
you can do that too in this case

500
00:31:58,044 --> 00:32:01,048
you use a facility called breakpoint
commands

501
00:32:01,048 --> 00:32:04,052
breakpoint commands a really cool
because they really minimize the number

502
00:32:04,088 --> 00:32:07,737
of times where you have to stop your
program

503
00:32:08,529 --> 00:32:12,010
if you say breakpoint command add

504
00:32:12,001 --> 00:32:18,150
you can at the break out commands to the
last break point that you created

505
00:32:18,159 --> 00:32:21,210
in this case what we want to do with see
the local

506
00:32:21,021 --> 00:32:25,460
the value of the current account in
science

507
00:32:25,649 --> 00:32:29,120
and then we want to continue which means

508
00:32:29,012 --> 00:32:32,018
but the process just keeps running as
normal

509
00:32:32,072 --> 00:32:37,137
finally once we're done typing and
commands retype capital T O N E

510
00:32:38,037 --> 00:32:42,086
and done when you run your program

511
00:32:42,086 --> 00:32:45,097
you got output each time the breakpoint
gets hit

512
00:32:45,097 --> 00:32:49,145
but you don't have to touch anything
this is a really cool feature that

513
00:32:50,045 --> 00:32:53,082
is very useful for when you've got your
program but you don't wanna have to

514
00:32:53,082 --> 00:32:58,145
recompile it to insert print lines or do
something horrific like that

515
00:32:59,045 --> 00:33:02,122
now there's a little bit avert caveat
here

516
00:33:03,022 --> 00:33:07,201
when you're using next project

517
00:33:07,399 --> 00:33:11,240
breakpoint conditions on break point X
and breakpoint commands

518
00:33:11,024 --> 00:33:14,593
both use expressions involve language

519
00:33:14,809 --> 00:33:19,360
where the break point is located now if
you set a breakpoint

520
00:33:19,036 --> 00:33:22,455
on assemble top there might be

521
00:33:22,779 --> 00:33:26,570
break points matched there might be
locations matching not break point

522
00:33:26,057 --> 00:33:30,046
at multiple places in your program some
of them implemented in objective-c

523
00:33:30,559 --> 00:33:34,820
some of them implemented in swept

524
00:33:34,082 --> 00:33:39,119
now we thought about that so we've
provided the ability to such breakpoint

525
00:33:40,019 --> 00:33:40,028
conditions

526
00:33:41,009 --> 00:33:45,012
and break point commands on specific
locations of a break point

527
00:33:45,012 --> 00:33:48,048
not just on the break point as a whole
cell

528
00:33:48,048 --> 00:33:51,070
if you're stop if you've got a break
point location and swept

529
00:33:51,007 --> 00:33:55,074
you can type in a swift condition and if
you've got another location

530
00:33:56,037 --> 00:34:01,121
in objective-c you can use objective-c
and your condition

531
00:34:02,021 --> 00:34:05,840
now that raises the question well okay I
said a symbolic break point

532
00:34:06,029 --> 00:34:09,115
not a ton of locations how r tell them
apart how do I figure out what language

533
00:34:09,889 --> 00:34:09,943
they ran

534
00:34:10,429 --> 00:34:13,520
well I'll give you a quick

535
00:34:13,052 --> 00:34:18,591
overview of how to read Swiss symbols

536
00:34:19,059 --> 00:34:22,134
in this case we're looking at a couple
of different symbols

537
00:34:22,809 --> 00:34:26,884
and different that are implemented in
different places in your code

538
00:34:27,559 --> 00:34:32,440
the first is called main if you're in
Objective C or C++ programmer you

539
00:34:32,044 --> 00:34:33,098
recognize that Maine is the

540
00:34:33,098 --> 00:34:36,677
the main entry point have a C++ program

541
00:34:37,559 --> 00:34:40,617
but the more important thing to note is
here as that their

542
00:34:41,139 --> 00:34:44,190
it doesn't have any argument names

543
00:34:44,019 --> 00:34:47,071
and it doesn't happen adornment this
typically means

544
00:34:47,071 --> 00:34:51,520
but it's a C or objective-c function

545
00:34:52,159 --> 00:34:55,210
there's another thing dull but you have
to remember

546
00:34:55,021 --> 00:34:58,099
especially up with when you're dealing
with swift and that is the top-level

547
00:34:58,099 --> 00:35:00,144
code acts the same way

548
00:35:01,044 --> 00:35:04,063
so just remember that if there's no
adornment like this it's either

549
00:35:04,063 --> 00:35:05,072
objective CRC

550
00:35:05,072 --> 00:35:09,211
or if its top-level code that swept

551
00:35:09,859 --> 00:35:14,510
the next thing as you if you have an
objective-c class for instance method

552
00:35:14,051 --> 00:35:18,070
but class or instance method name is
going to have brackets and a dash

553
00:35:18,007 --> 00:35:21,516
or a plus sign finally

554
00:35:22,209 --> 00:35:25,244
if you have a swift function than we

555
00:35:25,559 --> 00:35:29,565
no the return type and we know the
argument types for the function

556
00:35:29,619 --> 00:35:31,628
so we're going to be very verbose and
tell you all the information right up

557
00:35:32,519 --> 00:35:37,522
front

558
00:35:37,549 --> 00:35:41,660
alright cell now we've seen how to stop
a nap

559
00:35:41,066 --> 00:35:47,094
at the right time in all TB the tool
used opted to do that is break points

560
00:35:47,094 --> 00:35:50,713
you can set breakpoints based on all
kinds of filters

561
00:35:51,559 --> 00:35:54,608
and you could even set conditions on
your break points

562
00:35:55,049 --> 00:35:58,100
so that once you know where you wanna
stop you can also tell to be

563
00:35:58,559 --> 00:36:01,601
to some extent when you want to stop

564
00:36:01,979 --> 00:36:04,986
you can even set automated auctions on
your break points

565
00:36:05,049 --> 00:36:08,057
so that you don't have to stop
investigate your variables

566
00:36:08,849 --> 00:36:12,380
and then move on

567
00:36:12,038 --> 00:36:17,067
well house talk about some other new
stuff that we've got an Intel all TB

568
00:36:17,067 --> 00:36:19,166
this is the stuff I've been having fun
you with for the last couple for the

569
00:36:20,066 --> 00:36:23,069
last yourself

570
00:36:23,069 --> 00:36:26,638
the first thing I'm gonna tell you about
is validating your existing code

571
00:36:27,259 --> 00:36:30,343
using the LTB rebel the LDP Ruppel

572
00:36:31,099 --> 00:36:34,630
is really amazing tool and the slides

573
00:36:34,063 --> 00:36:38,442
while they kinda for scratch the surface
of all the stuff you can do

574
00:36:39,009 --> 00:36:42,190
I'm really excited to see what all what
you all can do

575
00:36:42,019 --> 00:36:46,148
and what kinds of workflows you're gonna
discover

576
00:36:46,319 --> 00:36:49,372
so let's try validating some existing
code but first

577
00:36:49,849 --> 00:36:52,864
what's figure out when we can do that

578
00:36:52,999 --> 00:36:56,072
well the rubble and the old to be
command line exist

579
00:36:56,729 --> 00:37:00,828
in harmony with one another you can
launch the rebel from a shell

580
00:37:01,719 --> 00:37:07,776
with an empty target just by typing AXI
run swift as I told you earlier

581
00:37:08,289 --> 00:37:11,390
however also when your program is
stopped

582
00:37:11,039 --> 00:37:15,064
at any point you can type rebel and you
get to in a rebel prompt

583
00:37:15,064 --> 00:37:18,283
just the same finally

584
00:37:18,859 --> 00:37:21,900
you can break you can break back into
allele TB

585
00:37:22,269 --> 00:37:28,180
by pressing Colin answer and that drops
you back into the old to be prompt

586
00:37:28,018 --> 00:37:31,567
why this weird colon and her thing

587
00:37:31,729 --> 00:37:34,784
well there's another thing that colin
can do for you

588
00:37:35,279 --> 00:37:39,335
if you're stopped in the rubble you can
use the colon

589
00:37:39,839 --> 00:37:44,848
can the colon prefix and type in lol Tbk
mound after it

590
00:37:45,739 --> 00:37:49,739
and I want to be command will be
executed just as if you typed at the LDP

591
00:37:49,739 --> 00:37:49,827
prompt

592
00:37:50,619 --> 00:37:54,440
this is a really handy way and it shows
but really Lobb

593
00:37:54,044 --> 00:37:58,893
and the rebel are living right next to
each other

594
00:37:59,289 --> 00:38:05,291
alright enough with the explanation much
let's go right into the code

595
00:38:05,309 --> 00:38:10,650
suffering a function here and it does a
partition of an array

596
00:38:10,065 --> 00:38:13,914
now you may be asking yourself okay what
what kind of partition we talking about

597
00:38:14,499 --> 00:38:15,940
here

598
00:38:15,094 --> 00:38:20,643
and maybe i'd maybe you have the
implementation hand year maybe you don't

599
00:38:21,489 --> 00:38:25,521
how can we use the rubble to discover
more about this function

600
00:38:25,809 --> 00:38:30,200
well with our program stopped we drop
into the rubble

601
00:38:30,002 --> 00:38:34,541
and then weakened call the partition
function right from there

602
00:38:34,739 --> 00:38:39,170
if we send at the rate 345 now what we
get back

603
00:38:39,017 --> 00:38:42,336
is the array containing three paired
with

604
00:38:42,489 --> 00:38:45,513
the array containing four and five

605
00:38:45,729 --> 00:38:48,729
alright this looks interesting

606
00:38:48,729 --> 00:38:51,730
I guess there something about that being
the

607
00:38:51,829 --> 00:38:55,430
bottom Park the array in the top part of
the right

608
00:38:55,043 --> 00:39:00,942
what's formalize the slot test a theory
about what's going on

609
00:39:01,329 --> 00:39:04,378
what I'm going to do is now write my own
code

610
00:39:04,819 --> 00:39:10,150
in the rubble the expression commanders
really great for one liners

611
00:39:10,015 --> 00:39:13,204
but the rebel command is is awesome

612
00:39:13,339 --> 00:39:18,391
for editing your code and adding
entirely new functions

613
00:39:18,859 --> 00:39:22,883
in this case we're gonna ride and is
partition function

614
00:39:23,099 --> 00:39:26,115
that as partition function into rates
across all the

615
00:39:26,259 --> 00:39:29,940
members of the left-hander ray and
checks

616
00:39:29,094 --> 00:39:33,393
but their last than or equal that their
last stand or equal to the numbers in

617
00:39:34,239 --> 00:39:35,690
the right-hand array

618
00:39:35,069 --> 00:39:39,113
if any of them are greater than the a
member of the right hand or a

619
00:39:40,013 --> 00:39:44,092
it's as always the look like the kind of
partition I was expecting and returns

620
00:39:44,209 --> 00:39:45,218
false

621
00:39:46,109 --> 00:39:50,910
finally once it's checked everything up
returns true

622
00:39:50,091 --> 00:39:53,730
you can run this is partition function
on the result

623
00:39:54,549 --> 00:39:59,568
of partitioning a larger array and is
partition will tell you indeed

624
00:39:59,739 --> 00:40:04,740
thought was a the result was a partition

625
00:40:04,749 --> 00:40:08,420
this is something fairly deep you've got
a

626
00:40:08,042 --> 00:40:11,117
function that exists in your code
already you've compiled it using the

627
00:40:12,017 --> 00:40:13,106
swift compiler

628
00:40:13,259 --> 00:40:17,287
swiftest an interpreted language or
anything but at the same time

629
00:40:17,539 --> 00:40:20,586
you've used this rubble to interactively

630
00:40:21,009 --> 00:40:25,200
cast by adding new code

631
00:40:25,002 --> 00:40:29,151
this is just one of the kinda
interactive debugging scenarios

632
00:40:29,349 --> 00:40:32,390
that we're hoping world well change the
way

633
00:40:32,039 --> 00:40:37,040
you work with code let's look at that
neither example

634
00:40:37,004 --> 00:40:41,063
using this partition function I've
implemented a sorting algorithm

635
00:40:41,459 --> 00:40:46,516
called my sort now I want to validate
that my sort works

636
00:40:47,029 --> 00:40:50,126
well I can to the rebel again

637
00:40:50,999 --> 00:40:54,025
if I am to the rubble I can run my sort

638
00:40:54,259 --> 00:40:57,910
on a rain and the result is

639
00:40:57,091 --> 00:41:00,200
but the rails men dice the result is an
array

640
00:41:01,019 --> 00:41:04,380
that I can kinda by Paul and see
assorted alright

641
00:41:04,038 --> 00:41:07,697
Caldwell it fit on a slide it's looks or
did to me it's

642
00:41:08,039 --> 00:41:11,067
this this is probably good enough bar

643
00:41:11,319 --> 00:41:15,323
many of your real wanna many your real
data structures I'm gonna fit on a slide

644
00:41:15,359 --> 00:41:21,373
in you can't easily eyeball them for
correctness

645
00:41:21,499 --> 00:41:26,400
what's write a function but shocks
whether an array assorted

646
00:41:26,004 --> 00:41:31,083
in the rubble we just type we restart
the finding a function called is sorted

647
00:41:31,479 --> 00:41:35,160
the notion here is we're gonna keep
track of the previous element that we

648
00:41:35,016 --> 00:41:35,065
saw

649
00:41:35,065 --> 00:41:38,144
you're right and for each element in the
array

650
00:41:39,044 --> 00:41:43,065
we're gonna check is it indeed greater
than or equal to with the previous

651
00:41:43,065 --> 00:41:44,404
element

652
00:41:44,989 --> 00:41:48,650
if there's oliver after an element of
the array for is last land

653
00:41:48,065 --> 00:41:52,424
the previous element let me know all
this arrays and sorted

654
00:41:53,009 --> 00:41:57,018
now wire were using and optional for the
previous element

655
00:41:57,099 --> 00:42:00,114
minus last optional well

656
00:42:00,249 --> 00:42:03,920
the first element of the array doesn't
have a previous element

657
00:42:03,092 --> 00:42:09,092
so the last so the last element in that
case is going to be no

658
00:42:09,092 --> 00:42:12,165
if I run is sorted on the resulting
using my compiled

659
00:42:13,065 --> 00:42:16,174
my sort function on on the rain

660
00:42:16,759 --> 00:42:19,920
I see indeed that the my sort function
was implemented

661
00:42:19,092 --> 00:42:22,221
correctly for this case and returned and
the

662
00:42:23,049 --> 00:42:27,104
is sorted function returns true this is
the kind of ad hoc unit testing

663
00:42:27,599 --> 00:42:31,615
but I was talking about

664
00:42:31,759 --> 00:42:34,814
now let's take another example

665
00:42:35,309 --> 00:42:39,650
but instead a validating existing code
we'd like to try out some new code in

666
00:42:39,065 --> 00:42:40,374
our program

667
00:42:40,959 --> 00:42:44,013
and this is a good example to kinda
review the role that the expression

668
00:42:44,499 --> 00:42:45,420
parser

669
00:42:45,042 --> 00:42:48,831
and the rebel have in your program

670
00:42:49,209 --> 00:42:54,260
when you're running your program you
have two aspect if your program state

671
00:42:54,719 --> 00:42:59,778
the one aspect is your stock that all
the functions that your programs called

672
00:43:00,309 --> 00:43:03,352
all the threads that you're currently
looking up

673
00:43:03,739 --> 00:43:06,745
for investigating those ok we think the
expression command

674
00:43:07,339 --> 00:43:10,426
is a wonderful tool however

675
00:43:11,209 --> 00:43:14,264
there's all this code that you've
written

676
00:43:14,759 --> 00:43:18,794
that may not be currently running you
may not have a stack frame representing

677
00:43:19,109 --> 00:43:22,176
but you'd still like to play around with
it

678
00:43:22,779 --> 00:43:27,804
that's where the old to be rebel comes
in to both built on the same technology

679
00:43:28,029 --> 00:43:33,122
but they both but they serve distinct
purposes

680
00:43:33,959 --> 00:43:39,008
let's look at an example dispatching on
a queue

681
00:43:39,449 --> 00:43:42,474
in my program I've imported foundation

682
00:43:42,699 --> 00:43:48,780
after squared dispatch queue: using
dispatch queue: create

683
00:43:49,509 --> 00:43:52,593
this code has set up a cue inside my
program

684
00:43:53,349 --> 00:43:56,424
I can dispatch blocks onto it well

685
00:43:57,099 --> 00:44:00,114
from the RuPaul I can do the same thing

686
00:44:00,249 --> 00:44:03,301
I stop by program and to the rubble

687
00:44:03,769 --> 00:44:07,940
and then I called dispatch sink on the Q

688
00:44:07,094 --> 00:44:13,513
and M and out a block that Prince world

689
00:44:14,359 --> 00:44:18,381
indeed if I do not I get the output
world

690
00:44:18,579 --> 00:44:21,910
now there's one thing to remember here

691
00:44:21,091 --> 00:44:25,550
your program is stop when we talk when
we when we do this

692
00:44:26,369 --> 00:44:29,444
so let's say you had a cue that was
running in your program

693
00:44:30,119 --> 00:44:34,380
that was already running some of their
code now

694
00:44:34,038 --> 00:44:37,040
if you try to dispatch to it that
dispatches

695
00:44:37,004 --> 00:44:40,102
gonna that dispatches gonna return
because there something happening on the

696
00:44:41,038 --> 00:44:43,467
queue already

697
00:44:43,809 --> 00:44:48,130
what you should do in that case is
dispatch a sink your block

698
00:44:48,013 --> 00:44:51,392
and then as and then you can continue
approach your program

699
00:44:51,509 --> 00:44:55,558
and the and your code will run this is a
great way to manipulate

700
00:44:55,999 --> 00:44:59,900
a resource that needs to be serialized
on from the debugger

701
00:44:59,009 --> 00:45:03,978
and actually lots you debug in a more
Safeway

702
00:45:04,869 --> 00:45:08,430
let's look at another example

703
00:45:08,043 --> 00:45:11,952
in this example I've got a protocol

704
00:45:12,339 --> 00:45:17,170
this protocol says I'm a type of thing
but can be doubled

705
00:45:17,017 --> 00:45:22,040
and in my code I've implemented an
extension to the spill 10 swift integer

706
00:45:22,004 --> 00:45:23,373
class

707
00:45:23,769 --> 00:45:26,843
dot is that make said be double ok

708
00:45:27,509 --> 00:45:32,420
so calling twice on an integer now
returns two times that integer

709
00:45:32,042 --> 00:45:36,581
using that protocol I've implemented a
dark function

710
00:45:36,959 --> 00:45:39,964
that knows how to get four-time
something

711
00:45:40,009 --> 00:45:44,063
by doubling it twice

712
00:45:44,549 --> 00:45:49,591
the rebel can mess around with the stuff
too

713
00:45:49,969 --> 00:45:54,034
we can write an extension on the swift
built-in String class

714
00:45:54,619 --> 00:45:58,900
that makes a double right in the rubble

715
00:45:58,009 --> 00:46:02,118
we can make twice concatenate the string
with itself

716
00:46:03,009 --> 00:46:06,064
and returned the result

717
00:46:06,559 --> 00:46:10,653
and done we can run print and then we
can run four times on the result of that

718
00:46:11,499 --> 00:46:14,554
and four times works because we're able

719
00:46:15,049 --> 00:46:19,052
the rubble is able to register that
extension

720
00:46:19,349 --> 00:46:22,392
so then we see the output 3-4 times

721
00:46:22,779 --> 00:46:26,808
just as we expected

722
00:46:27,069 --> 00:46:31,390
now this is just the beginning and i mix
I'm sure that next year

723
00:46:31,039 --> 00:46:34,098
I'm gonna be why I am or some one of my
colleagues is

724
00:46:34,449 --> 00:46:37,483
going to be telling you about all the
quarter new debugging

725
00:46:37,789 --> 00:46:41,380
workflows but your colleagues have found
and

726
00:46:41,038 --> 00:46:44,507
at his work we're gonna have a pretty
fantastic session next year

727
00:46:44,849 --> 00:46:48,894
but some up and tell you about what
other resources there are

728
00:46:49,299 --> 00:46:53,378
to help to help you rock

729
00:46:54,089 --> 00:46:57,690
Lobb provides great tools to diagnose
bikes in your program

730
00:46:57,069 --> 00:47:00,168
I've told you about stop reasons the
stock arm

731
00:47:00,789 --> 00:47:03,838
I told you about the print command or
expression if you like

732
00:47:04,279 --> 00:47:08,307
I've told you about break points and
also told you about the great new

733
00:47:08,559 --> 00:47:12,400
LTB rebel that lets you debug in an
interactive way

734
00:47:12,004 --> 00:47:17,313
writing your own code and interacting
with your programs existing code

735
00:47:17,709 --> 00:47:20,787
if you want more information on this
first of all you can contact our

736
00:47:21,489 --> 00:47:24,537
awesome developer tools evangelist tape
too long

737
00:47:24,969 --> 00:47:27,978
you can also check out the quick start
guide in our documentation

738
00:47:28,869 --> 00:47:31,910
the old to be quick start guide is a
fantastic document and I will tell you

739
00:47:32,279 --> 00:47:34,356
lots of stuff that I have uncovered here

740
00:47:35,049 --> 00:47:38,097
finally you can communicate with other
developers and chat about

741
00:47:38,529 --> 00:47:41,628
lol :d beyond number and the kinds of
work clothes you discover on the Apple

742
00:47:42,519 --> 00:47:43,597
developer forums

743
00:47:44,299 --> 00:47:47,299
but that's not all it turns out we have
are

744
00:47:47,299 --> 00:47:51,322
right session for you on Friday morning
it could be just the thing to go with

745
00:47:51,529 --> 00:47:52,650
your morning coffee

746
00:47:52,065 --> 00:47:55,204
cuz my colleague enrico granada is gonna
tell you some

747
00:47:55,789 --> 00:47:58,822
really neat stuff but Allah GB does to
help you

748
00:47:59,119 --> 00:48:03,128
under the hood and debugging your swift
programs

749
00:48:03,209 --> 00:48:06,212
another thing but you wanna check out is
the head

750
00:48:06,509 --> 00:48:09,543
is the aren't debugging an ax code six
talk

751
00:48:09,849 --> 00:48:13,400
that was earlier this week so you wanna
check that out online but it tells you

752
00:48:13,004 --> 00:48:15,373
all about the UI implementation and

753
00:48:15,769 --> 00:48:18,798
how to deal with arm for example are the

754
00:48:19,059 --> 00:48:22,670
geez the Grand Central Dispatch
integration

755
00:48:22,067 --> 00:48:26,506
finally as I told you earlier we have a
session last year we talked a little bit

756
00:48:27,109 --> 00:48:28,150
more in-depth

757
00:48:28,015 --> 00:48:32,644
about the about working with lol TB and
especially about break points and

758
00:48:32,779 --> 00:48:35,630
stopping

759
00:48:35,063 --> 00:48:38,702
again I want to reiterate thank you so
much for being up all developers

760
00:48:39,269 --> 00:48:42,630
thank you so much for working with LTB I
look forward to seeing you in the lab

