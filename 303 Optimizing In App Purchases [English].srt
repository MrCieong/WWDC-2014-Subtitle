1
00:00:12,019 --> 00:00:19,019
then

2
00:00:19,259 --> 00:00:21,210
thanks hype my name's James Wilson

3
00:00:21,021 --> 00:00:24,230
I'm in engineering manager and one other
things that my team works on

4
00:00:24,419 --> 00:00:29,050
is the framework for power the App Store
and the iBookstore no estÃ¡n

5
00:00:29,005 --> 00:00:35,084
which course includes stalking we've run
a stalk it session at WWDC

6
00:00:35,129 --> 00:00:38,960
for the last few years pretty much since
we did with since we debuted stock it

7
00:00:38,096 --> 00:00:39,111
for doing it purchases

8
00:00:40,011 --> 00:00:44,078
but the session has typically been aimed
at beginners and intermediate level

9
00:00:44,078 --> 00:00:47,527
for developers to get a feel for how
they can implement in app purchases

10
00:00:48,229 --> 00:00:49,180
using stalk

11
00:00:49,018 --> 00:00:52,092
we know obviously from the absolutely
massive uptake

12
00:00:52,092 --> 00:00:55,093
have in app purchases that is time to
move on from that

13
00:00:55,093 --> 00:00:58,852
so this year I want to do something
different what we're going to focus on

14
00:00:59,689 --> 00:01:01,500
in the session is hella optimize

15
00:01:01,005 --> 00:01:05,554
Urena purchase implementation the condom
optimization we're looking at is not so

16
00:01:06,049 --> 00:01:06,520
much

17
00:01:06,052 --> 00:01:10,136
using less memory using less memory make
it faster it's a trap what we

18
00:01:11,036 --> 00:01:13,725
specifically looking at is optimizing
your implementation

19
00:01:14,049 --> 00:01:19,052
to be trouble-free reliable smooth and a
great experience for the user

20
00:01:19,079 --> 00:01:23,790
every single time but if you're not
familiar with docket

21
00:01:23,079 --> 00:01:27,155
his the three key things that stock it
does for you course we all know and love

22
00:01:28,055 --> 00:01:30,484
that stalk it allows us to do in app
purchases

23
00:01:30,979 --> 00:01:34,450
in our apt this is for both consumer one
on consumable items

24
00:01:34,045 --> 00:01:38,142
as well as for subscriptions one thing
the stock it does is it has this thing

25
00:01:39,042 --> 00:01:40,099
called the stock at production

26
00:01:40,099 --> 00:01:44,101
which is the way in which you can sell
aP's another content from the iTunes on

27
00:01:45,019 --> 00:01:46,061
the App Store through your app

28
00:01:46,061 --> 00:01:49,082
and lastly it can be used for receipt
renewal

29
00:01:49,082 --> 00:01:53,129
now receipts are really powerful way
that you can enforce your business model

30
00:01:54,029 --> 00:01:57,058
prevent piracy et cetera right within
your app

31
00:01:57,058 --> 00:02:00,065
as well as within your servers and stalk
it involved there as well

32
00:02:00,065 --> 00:02:04,093
before we launch in optimizing

33
00:02:04,093 --> 00:02:07,161
ass in it in a purchases using stock it
I want to cover a few things that a new

34
00:02:08,061 --> 00:02:08,109
this year

35
00:02:09,009 --> 00:02:13,043
the first is that that's talk it product
sheet that I just mentioned before

36
00:02:13,043 --> 00:02:16,058
that allows you to sell content from

37
00:02:16,058 --> 00:02:20,687
other developers or other apso continue
having the store through Europe thats

38
00:02:21,209 --> 00:02:21,860
talk it

39
00:02:21,086 --> 00:02:25,805
production it now supports the feeling a
program this is really great for you as

40
00:02:26,579 --> 00:02:27,290
a developer

41
00:02:27,029 --> 00:02:30,073
we'd a Buddhist the product sheet I
think was last year

42
00:02:30,073 --> 00:02:34,002
but at that time it was simply a means
by which you could market and sell

43
00:02:34,659 --> 00:02:37,685
those other products and content through
your app but now

44
00:02:37,919 --> 00:02:41,310
with the stalker product sheet
supporting the affiliate program if

45
00:02:41,031 --> 00:02:42,038
you're part of that affiliate program

46
00:02:43,001 --> 00:02:46,880
you can get paid for those items that
you are selling through your app

47
00:02:46,889 --> 00:02:52,930
the second you think I want to call out
is the install kit we're introducing a

48
00:02:53,299 --> 00:02:55,330
new transaction state called deferred

49
00:02:55,609 --> 00:02:59,625
and look at that a bit more in a second
but this has come about due to the asked

50
00:02:59,769 --> 00:03:02,813
by feature that was implemented as part
of our family sharing feature

51
00:03:03,209 --> 00:03:07,760
so family sharing allows you to add up
to six members of your family and former

52
00:03:07,076 --> 00:03:07,675
family

53
00:03:08,359 --> 00:03:11,398
and that family kinship purchases in a
payment method

54
00:03:11,749 --> 00:03:15,150
and when you have children as pilot
family that are under 18

55
00:03:15,015 --> 00:03:18,104
you can enable asked by on them so that
they can I ask for permission to buy

56
00:03:19,004 --> 00:03:20,029
things from the store

57
00:03:20,029 --> 00:03:24,488
as well as in app purchases in your app
and then a parent can approve the

58
00:03:24,749 --> 00:03:25,831
purchase remotely from their devices

59
00:03:26,569 --> 00:03:29,900
so when the transaction is in that state
we call it differed

60
00:03:29,009 --> 00:03:33,378
and that's why we introduce this new
transaction state were touching is

61
00:03:34,269 --> 00:03:36,356
briefly now and I mean look at an
example of how to handle it and what

62
00:03:37,139 --> 00:03:38,233
sort of things you should do in your app
later on

63
00:03:39,079 --> 00:03:42,121
but it's called SK payment transaction
state deferred

64
00:03:42,499 --> 00:03:45,513
what this means is when you see a
transaction

65
00:03:45,639 --> 00:03:48,670
into the deferred state it means it's
needed purchased

66
00:03:48,949 --> 00:03:54,012
nor failed yet you will receive a
further update about this in the future

67
00:03:54,579 --> 00:03:58,581
as in the transaction will into that
final stay to be the purchased or failed

68
00:03:58,599 --> 00:04:02,685
in but it will be an indeterminate time
between when the purchase begins

69
00:04:03,459 --> 00:04:08,464
and when enters that final state the
most important message I want to get

70
00:04:08,959 --> 00:04:09,965
across for you as

71
00:04:10,019 --> 00:04:13,117
app developers is that to implement
support for handling this deferred

72
00:04:13,999 --> 00:04:15,005
transaction state

73
00:04:15,059 --> 00:04:19,073
you need engineered in a way that your
app can still be used by the user

74
00:04:19,199 --> 00:04:22,274
washed its in that differed state

75
00:04:22,949 --> 00:04:26,220
but also worth mentioning the you we do
actually support and allow you to

76
00:04:26,022 --> 00:04:27,044
repurchase that item

77
00:04:27,044 --> 00:04:30,047
that is attempt to make subsequent
purchase for that item while the

78
00:04:30,074 --> 00:04:31,110
permission is still pending

79
00:04:32,001 --> 00:04:37,007
awhile transactions and that differed
state

80
00:04:37,016 --> 00:04:40,099
wherever possible though especially in
regards to the differ- transaction state

81
00:04:40,099 --> 00:04:42,156
should let's talk it handled the user
interaction

82
00:04:43,056 --> 00:04:46,098
will handle alone a lot of the messaging
and dialogues that are required

83
00:04:46,098 --> 00:04:50,142
for the use in regards to the asked by
feature

84
00:04:51,042 --> 00:04:56,058
this is how I asked by works so got a
child device he an apparent device

85
00:04:56,058 --> 00:04:59,101
with a child wants to buy something such
as want to ring up purchases

86
00:05:00,001 --> 00:05:03,013
they attempt to make the purchase by
pressing the buy button and I'll be

87
00:05:03,013 --> 00:05:04,072
prompted to ask permission

88
00:05:04,072 --> 00:05:07,100
for that item that causes a message to
be sent

89
00:05:08,000 --> 00:05:11,042
via the App Store to the parents device
in fact all the parents devices

90
00:05:11,042 --> 00:05:15,077
or approve this device is and they
receive a notification that this request

91
00:05:15,077 --> 00:05:16,145
has been made to buy this item

92
00:05:17,045 --> 00:05:22,118
winters that state that's when the
transaction goes into the deferred state

93
00:05:23,018 --> 00:05:26,117
so once the child has tap the button say
yes they want to ask permission

94
00:05:27,017 --> 00:05:30,056
and the notification is sent out to the
previous devices that's when the

95
00:05:30,056 --> 00:05:33,071
transaction becomes deferred

96
00:05:33,071 --> 00:05:37,087
now wants the parent goes ahead and
approves the declines this

97
00:05:37,087 --> 00:05:40,181
purchase request will send a message
back down to the child's device or the

98
00:05:41,081 --> 00:05:42,129
requesters device

99
00:05:43,029 --> 00:05:46,075
and at that point that's when the
transaction will enter the Familia

100
00:05:46,075 --> 00:05:46,081
purchased

101
00:05:47,035 --> 00:05:52,060
of failed states

102
00:05:52,006 --> 00:05:57,021
now let's talk about how optimizer in a
purchase implementation

103
00:05:57,075 --> 00:06:00,113
this next section is work or stock in
sixty Seconds designed to give you a

104
00:06:01,013 --> 00:06:03,085
really brief introduction to the
processes involved

105
00:06:03,085 --> 00:06:06,160
in completing an in app purchase using
stock in the first thing you've got to

106
00:06:07,006 --> 00:06:08,065
do is know what you going to sell

107
00:06:09,019 --> 00:06:12,027
you need to Lodos it does in app
purchase product identifiers

108
00:06:12,099 --> 00:06:15,111
and then once you know what you're going
to sell in terms of those product

109
00:06:16,011 --> 00:06:17,029
identifiers

110
00:06:17,029 --> 00:06:20,040
you need to ask the App Store for the
localized information about those

111
00:06:20,004 --> 00:06:20,087
products

112
00:06:21,023 --> 00:06:25,079
we do that with Sk product request that
gives back a bunch of SK product object

113
00:06:25,079 --> 00:06:29,134
the week and then go and raw are really
beautiful in a purchase you why

114
00:06:30,034 --> 00:06:34,053
was shown a beautiful in a purchased or
you I and we can touch the user to make

115
00:06:34,053 --> 00:06:35,070
the purchase

116
00:06:35,007 --> 00:06:39,013
we proceed on to converting that product
into an escape payment object

117
00:06:39,076 --> 00:06:42,103
and adding that into the payment cue

118
00:06:43,003 --> 00:06:46,025
the payment cue lingers updates about
how that proud transaction is

119
00:06:46,025 --> 00:06:47,036
progressing

120
00:06:47,036 --> 00:06:50,038
and we will need to process the
transaction as it moves to the purchase

121
00:06:50,038 --> 00:06:51,097
of failed state

122
00:06:51,097 --> 00:06:54,148
assuming they purchase the item within
go ahead and make that acid or the

123
00:06:55,048 --> 00:06:57,102
content feature available to the user

124
00:06:58,002 --> 00:07:01,057
and then lastly we finish the
transaction

125
00:07:01,057 --> 00:07:04,089
so that's it it's a pretty simple
process when you string it together like

126
00:07:04,089 --> 00:07:05,126
that

127
00:07:06,026 --> 00:07:09,075
what we've noticed though is the from
all the apps that we see submitted

128
00:07:09,075 --> 00:07:12,150
from all the apt I V is personally from
the feedback we get from developer tech

129
00:07:13,005 --> 00:07:17,024
support as well as from eating a lot of
developers here double-double they say

130
00:07:17,069 --> 00:07:20,077
is we know that there are definitely
some danger zones in here

131
00:07:21,049 --> 00:07:25,057
it is areas have this process where'd
problems can crop up

132
00:07:25,057 --> 00:07:29,072
or there's common pitfalls of gotchas so
the focus on this session

133
00:07:29,072 --> 00:07:32,146
is to look at those and to help you get
over those to really bring your in app

134
00:07:33,046 --> 00:07:34,082
purchase implementation

135
00:07:34,082 --> 00:07:37,088
up to the next level we want to be as
smooth as possible

136
00:07:38,042 --> 00:07:42,137
a great experience every single time

137
00:07:43,037 --> 00:07:46,059
the start of it let's look at the user
interaction and particularly

138
00:07:46,059 --> 00:07:49,127
in the pre sales pace at making a
purchase that is when you're showing

139
00:07:50,027 --> 00:07:53,113
your store you I

140
00:07:54,013 --> 00:07:56,106
remember the first thing we have to do
is know what we wanna sell we need to

141
00:07:57,006 --> 00:07:57,084
load those

142
00:07:57,084 --> 00:08:00,136
in a purchase product identifiers from
somewhere

143
00:08:01,036 --> 00:08:04,069
now these are the product identifies a
you set up in iTunes Connect when you to

144
00:08:04,069 --> 00:08:04,148
find

145
00:08:05,048 --> 00:08:09,071
you're in a purchase saleable items so
those two options for how you can load

146
00:08:09,071 --> 00:08:11,100
this product identifiers up

147
00:08:12,000 --> 00:08:15,095
one is if you've got a very static
catalogo of items that you're selling

148
00:08:15,095 --> 00:08:18,112
that is you might only have hand for
things are selling you know they won't

149
00:08:19,012 --> 00:08:21,045
change throughout the lifetime at the
apt

150
00:08:21,045 --> 00:08:24,072
that might be simple enough you just
bake those identifies directly into the

151
00:08:24,072 --> 00:08:24,081
apt binary

152
00:08:25,062 --> 00:08:29,077
or included as a Payless that spot I V
the after you submit to the store

153
00:08:29,077 --> 00:08:32,326
that's the simplest implementation

154
00:08:33,019 --> 00:08:36,023
for a lot of developers though we know
that that doesn't suit you will know and

155
00:08:36,419 --> 00:08:38,680
oftentimes giving you enough flexibility

156
00:08:38,068 --> 00:08:41,357
and what we see is that a lot of
developers the first thing happens

157
00:08:41,969 --> 00:08:46,230
during the in app purchase flow is they
make a call to you their own servers

158
00:08:46,023 --> 00:08:49,049
to fetch that list product identifiers
that they're going to display to the

159
00:08:49,049 --> 00:08:51,062
user

160
00:08:51,062 --> 00:08:54,821
know if you doing that you need to think
really careful about how you cashing

161
00:08:55,379 --> 00:08:56,910
loading that data

162
00:08:56,091 --> 00:08:59,147
because it's the first step in making an
in app purchase

163
00:09:00,047 --> 00:09:04,068
and that in app purchase process is such
a fleeting moment of trying to transform

164
00:09:04,068 --> 00:09:07,110
a customer's intrigue and interest into
a sale

165
00:09:08,001 --> 00:09:11,008
that's obviously a benefit to you please
also going to help with their enjoyment

166
00:09:11,017 --> 00:09:15,226
and usefulness of the app that they're
using

167
00:09:15,379 --> 00:09:18,462
even more important is the reliability
of those servers that are hosting

168
00:09:19,209 --> 00:09:23,220
your list a product for you going to
sell you've got to make sure that if you

169
00:09:23,022 --> 00:09:26,301
can have them on a server and you can
make an HTTP request to whatever it

170
00:09:26,499 --> 00:09:27,563
might be to load them

171
00:09:28,139 --> 00:09:31,234
that you have a super reliable
fault-tolerant really perform

172
00:09:32,089 --> 00:09:35,161
server platform that is able to issue
those product codes

173
00:09:35,809 --> 00:09:41,828
really really quickly

174
00:09:41,999 --> 00:09:45,083
because that's not the way to start an
in app purchase

175
00:09:45,839 --> 00:09:49,100
so often when a fun playing games or I'm
using an app

176
00:09:49,001 --> 00:09:53,028
and I'm enticed to making a purchase
because I'm not doing very well at it

177
00:09:53,037 --> 00:09:56,986
I tap the button to see what about and
I'm stuck at a spinner

178
00:09:57,319 --> 00:10:00,395
there's no need for that if you have to
make a network request in order to enter

179
00:10:01,079 --> 00:10:01,370
that

180
00:10:01,037 --> 00:10:04,736
in app purchase flow anticipated and
don't have time

181
00:10:05,069 --> 00:10:07,076
for most have you you know when it's
likely that the user is going to be

182
00:10:07,769 --> 00:10:09,780
presented with these in app purchase
offerings

183
00:10:09,879 --> 00:10:12,887
so just ahead of time to those network
requests in aid

184
00:10:12,959 --> 00:10:18,300
and avoid them getting stuck in a spin
like this

185
00:10:18,003 --> 00:10:21,462
so how low the park information you do
that was so once you've got those

186
00:10:21,759 --> 00:10:22,720
identifiers

187
00:10:22,072 --> 00:10:24,871
you've got a load the product
information about them this is when you

188
00:10:25,519 --> 00:10:29,040
transform that simple identify the you
to find iTunes Connect

189
00:10:29,004 --> 00:10:32,053
to getting to localized product
information product price

190
00:10:32,089 --> 00:10:35,095
from the App Store that the user is
signed into

191
00:10:35,149 --> 00:10:38,490
he do that using a escape product
request

192
00:10:38,049 --> 00:10:40,878
you pass into this the set of
identifiers for which you want that

193
00:10:41,319 --> 00:10:44,320
localize product information back

194
00:10:44,329 --> 00:10:47,373
know when you do this as a said just
before always try and anticipate the

195
00:10:47,769 --> 00:10:48,970
presentation

196
00:10:48,097 --> 00:10:51,146
this will be another round trip on the
network there's

197
00:10:52,019 --> 00:10:55,080
always always going to be some delay
their so it's best

198
00:10:55,629 --> 00:10:58,990
if you can anticipate this loaded just
ahead of time

199
00:10:58,099 --> 00:11:01,108
or at a point in time when you know that
you can safely do that without

200
00:11:01,999 --> 00:11:03,051
interrupting the user

201
00:11:03,519 --> 00:11:07,670
so you can present that in a few I
really quickly

202
00:11:07,067 --> 00:11:11,072
now what you get back when you make that
escape product request

203
00:11:11,072 --> 00:11:15,791
is a bunch of escape product objects the
escape product object will contain the

204
00:11:16,439 --> 00:11:18,660
localized title and description

205
00:11:18,066 --> 00:11:22,275
the price and low cal and if you're
hosting in app purchases with us

206
00:11:22,869 --> 00:11:26,922
then you also get back to contents size
inversion

207
00:11:27,399 --> 00:11:30,424
the most important bit in the escape
product

208
00:11:30,649 --> 00:11:34,430
object you get back in terms of making
for a really good in a purchase

209
00:11:34,043 --> 00:11:35,262
experience

210
00:11:35,649 --> 00:11:39,737
is that localized title and the
localized pricing information

211
00:11:40,529 --> 00:11:44,800
you would be amazed at how many
different ways

212
00:11:44,008 --> 00:11:47,537
there are two represent the simple
concept of currency

213
00:11:48,329 --> 00:11:53,340
around the world this is just a very
small subset have examples

214
00:11:53,439 --> 00:11:57,520
this is all different ways to represent
01234 and 56

215
00:11:58,249 --> 00:12:01,324
in currencies around the world a
currency is something that's always near

216
00:12:01,999 --> 00:12:05,018
and dear to people especially when
you're offering them something for sale

217
00:12:05,189 --> 00:12:08,610
so make sure you can present the
currency for what you offering through

218
00:12:08,061 --> 00:12:09,230
an app purchases

219
00:12:09,779 --> 00:12:12,797
in a way that's comfortable and familiar
to that user

220
00:12:12,959 --> 00:12:15,980
it makes for a much much nicer
experience

221
00:12:15,098 --> 00:12:18,637
to make that use a feel like they are a
first-class experience

222
00:12:19,519 --> 00:12:24,360
in your app regardless of wherever they
are around the world

223
00:12:24,036 --> 00:12:28,185
his in the trick for doing that you can
show the you can localize price using

224
00:12:28,509 --> 00:12:30,420
Ennis number formatter

225
00:12:30,042 --> 00:12:34,067
hereof created my anus number formatter
and I set the number style to be in

226
00:12:34,067 --> 00:12:36,091
currency cuz that's what we want to
display

227
00:12:36,091 --> 00:12:40,060
that he is where the magic stops I set
the locale

228
00:12:40,879 --> 00:12:44,879
for that number formatter to the price
locale that I got back from the escape

229
00:12:44,879 --> 00:12:45,904
product object

230
00:12:46,129 --> 00:12:49,910
I don't make any assumptions about how
the device is configured

231
00:12:49,091 --> 00:12:52,430
I don't make any assumptions about where
the user might be based on any other

232
00:12:53,249 --> 00:12:55,257
criteria whatsoever

233
00:12:55,329 --> 00:12:58,392
because we want to show the price that's
correct for the App Store that they are

234
00:12:58,959 --> 00:13:00,290
signed into

235
00:13:00,029 --> 00:13:03,258
and you do that by using the price like
how the you get back from

236
00:13:03,519 --> 00:13:07,563
escape product object now the second
piece to this puzzle

237
00:13:07,959 --> 00:13:11,982
is when you go to create that format
string by calling string for number

238
00:13:12,189 --> 00:13:15,277
you should pass into that the price that
you get from that in

239
00:13:16,069 --> 00:13:20,071
that SK product object you see that
escape product object has

240
00:13:20,089 --> 00:13:24,107
everything you need to present this item
perfectly suited

241
00:13:24,269 --> 00:13:27,351
for the use in a matter what region what
country they're in so use it to make

242
00:13:28,089 --> 00:13:33,126
sure that it's the most comfortable
familiar experience for the user

243
00:13:33,459 --> 00:13:36,547
but really importantly is this
absolutely no need and you definitely

244
00:13:37,339 --> 00:13:38,381
should not

245
00:13:38,759 --> 00:13:43,220
be doing any currency conversion
yourself when you signed into the store

246
00:13:43,022 --> 00:13:47,081
with their account in their region or
country the App Store is automatically

247
00:13:47,279 --> 00:13:50,296
set up to deliver you the pricing
information that is correct

248
00:13:50,449 --> 00:13:56,550
for the region there in don't try and
cover currencies yourself

249
00:13:56,055 --> 00:13:59,464
another thing that often seeger wrong is
how developers handle

250
00:13:59,959 --> 00:14:02,996
I areas especially during this really
important

251
00:14:03,329 --> 00:14:06,470
pre-sales part where you're making a
pitch to the user about what they want

252
00:14:06,047 --> 00:14:07,111
to buy

253
00:14:08,011 --> 00:14:12,210
important message here is that not all
areas equal

254
00:14:12,309 --> 00:14:15,420
I really encourage you to check out
either the in app purchase programming

255
00:14:15,042 --> 00:14:15,129
guide or

256
00:14:16,029 --> 00:14:19,108
probably even better the stock it
framework reference guide

257
00:14:19,369 --> 00:14:23,426
because it will have fairly small and
easily digestible list of

258
00:14:23,939 --> 00:14:26,945
Eric how's that the framework may vent
to you

259
00:14:26,999 --> 00:14:30,027
errors can happen at a lot of different
times

260
00:14:30,279 --> 00:14:33,790
and sometimes there is something you
develop a needs to deal with the message

261
00:14:33,079 --> 00:14:34,098
to the customer

262
00:14:34,098 --> 00:14:37,186
but more often than not it's an error
message to just provide you

263
00:14:38,086 --> 00:14:42,965
feedback at your apt level above what
happened during that transaction

264
00:14:43,739 --> 00:14:47,600
more likely than not we've already told
them what happened weaver to present to

265
00:14:47,006 --> 00:14:49,101
the dialogue to the user wordy trying to
take them through the process a

266
00:14:50,055 --> 00:14:52,834
rectifying whatever might have gone
wrong

267
00:14:53,329 --> 00:14:57,540
so make sure you know what those area
codes are check with the code is

268
00:14:57,054 --> 00:15:00,853
and know for sure what areas you need to
missus the user about

269
00:15:01,339 --> 00:15:05,376
and what you are can rely on stock it
having taken care of for you

270
00:15:05,709 --> 00:15:08,715
and the most popular example that I see
if this and the one that gets me

271
00:15:09,309 --> 00:15:12,331
every single time I use an app that does
this

272
00:15:12,529 --> 00:15:16,546
is when I'm seeing something i wanna buy
in your app tapped by but more excited

273
00:15:16,699 --> 00:15:17,716
about it

274
00:15:17,869 --> 00:15:20,950
Tyler comes up to sign in to the store a
touch I day done that

275
00:15:21,679 --> 00:15:24,760
gonna get the dialogue to confirm I
purchase and maybe forever reason are

276
00:15:25,489 --> 00:15:28,860
going to be cold feet and hit the cancel
button

277
00:15:28,086 --> 00:15:32,175
so many ups I see then follow that up
with the second I like that says

278
00:15:32,949 --> 00:15:33,985
purchase filed

279
00:15:34,309 --> 00:15:37,334
you cancel the transaction

280
00:15:37,559 --> 00:15:40,572
i know i cancel the transaction I
cancelled

281
00:15:40,689 --> 00:15:44,480
okay yes you're up got an NS era back to
told you that they cancel the

282
00:15:44,048 --> 00:15:44,887
transaction

283
00:15:45,319 --> 00:15:47,326
but you really don't need to go on
reinforce the point to the user that

284
00:15:48,019 --> 00:15:51,043
they got cold feet backed out the
transaction

285
00:15:51,259 --> 00:15:54,316
in fact it can be really damaging for
your

286
00:15:54,829 --> 00:15:58,860
you know possibility to keep that
momentum going and make that sale

287
00:15:58,086 --> 00:16:00,985
because if the first time through
purchase I'm not sure about it and I

288
00:16:01,759 --> 00:16:02,827
decide to back out

289
00:16:03,439 --> 00:16:07,510
if my experience there was in grade in
detail what I'm really not convinced

290
00:16:08,149 --> 00:16:11,166
that I should be spending my money on
this app if they can't make a good job

291
00:16:11,319 --> 00:16:15,386
on letting me back at a purchase

292
00:16:15,989 --> 00:16:18,997
for just being aware that the one ever
really good example love

293
00:16:19,069 --> 00:16:23,670
where it's important to know exactly
what these are codes main wherever

294
00:16:23,067 --> 00:16:23,786
possible

295
00:16:24,389 --> 00:16:29,730
just let us let's talk it handle the
transaction follows much as possible

296
00:16:29,073 --> 00:16:32,492
we see an increasing number about
starting to introduce dialogues and

297
00:16:33,149 --> 00:16:33,730
messaging

298
00:16:33,073 --> 00:16:37,073
ahead of the in app purchase flow if
that's something you feel you need to do

299
00:16:37,073 --> 00:16:41,042
that's fine but it strongly encourage
you to come along tomorrow to

300
00:16:41,699 --> 00:16:46,220
session given by Chris Espinosa at 3:15
about absent kids

301
00:16:46,022 --> 00:16:52,871
it has some really good tips there about
how to handle this sort of interaction

302
00:16:53,069 --> 00:16:56,120
now let's move on to making the purchase
you have

303
00:16:56,579 --> 00:16:59,652
done a great job of showing this
glorious in a purchase you I to the user

304
00:17:00,309 --> 00:17:03,372
was perfectly presented to them no rough
edges no silly error messages

305
00:17:03,939 --> 00:17:07,954
they've tapped the buy button and they
want to move forward

306
00:17:08,089 --> 00:17:12,860
so when you gonna make that purchase
this is when you start to really get

307
00:17:12,086 --> 00:17:14,091
into using stalking

308
00:17:14,091 --> 00:17:17,164
storekeeper revolves around and is
centered around

309
00:17:18,064 --> 00:17:22,117
a payment cue and the most important
thing you've got to do with their

310
00:17:23,017 --> 00:17:24,074
payment cue is observed

311
00:17:24,074 --> 00:17:29,112
always the payment cue is where you will
get all information about how

312
00:17:30,012 --> 00:17:31,084
transactions progressing

313
00:17:31,084 --> 00:17:34,142
whether it was purchased a failed
whether it's in progress whether its

314
00:17:35,042 --> 00:17:35,118
deferred

315
00:17:36,018 --> 00:17:39,027
you also get information about restored
transactions et cetera

316
00:17:40,008 --> 00:17:44,030
it should be the center view in app
purchase implementation

317
00:17:44,003 --> 00:17:48,037
and it's the only source of truth for
state about transactions as they occur

318
00:17:48,064 --> 00:17:52,148
there's absolutely no need for you as a
developer to try and integrate some

319
00:17:53,048 --> 00:17:57,070
sorta complicated state machine all
cashing upstate about transactions are

320
00:17:57,007 --> 00:17:58,012
in place

321
00:17:59,002 --> 00:18:03,007
because you can get all that from the
payment cue itself

322
00:18:03,007 --> 00:18:06,085
you can get transactions that are in
progress you can know about the status

323
00:18:07,048 --> 00:18:09,089
of a transaction as it progresses

324
00:18:09,089 --> 00:18:12,120
and if you're hosting in a purchases
with that the Q is where you'll also get

325
00:18:13,002 --> 00:18:17,004
that download status information

326
00:18:17,022 --> 00:18:20,048
I think one the most common reasons I C
developers attempt to track

327
00:18:20,048 --> 00:18:23,140
tack on aside cash have stayed about in
app purchases

328
00:18:24,004 --> 00:18:27,031
rather than just wholly and solely
trusting the Q

329
00:18:27,067 --> 00:18:30,093
is because they feel that in order to
update you on elements

330
00:18:30,093 --> 00:18:34,152
and you know communicate the progressive
the in app purchase flow through the app

331
00:18:35,052 --> 00:18:38,109
that they need to somehow stash that
payment object away or

332
00:18:39,009 --> 00:18:43,014
tryin tax an extra stayed on to it
somehow so that they can keep that

333
00:18:43,014 --> 00:18:47,043
you I up-to-date and and congress

334
00:18:47,043 --> 00:18:49,124
but in fact that's not true and we'll
see in when the examples I'm gonna give

335
00:18:50,024 --> 00:18:51,029
you how you can harness the Q

336
00:18:51,074 --> 00:18:55,170
and trust only the Q and still achieve
all that

337
00:18:56,007 --> 00:18:59,066
but just as you've got to rely on on the
payment cue for all those updates on all

338
00:19:00,029 --> 00:19:02,067
those pic pieces and information

339
00:19:02,067 --> 00:19:05,113
you also need to be aware that any and
all transactions that appear in the

340
00:19:06,013 --> 00:19:06,091
queue

341
00:19:06,091 --> 00:19:10,105
are real and valid just because your app

342
00:19:11,005 --> 00:19:14,057
didn't start a payment or your the
running instance if your app didn't

343
00:19:14,057 --> 00:19:14,156
start a payment

344
00:19:15,056 --> 00:19:19,062
or for whatever reason you don't think
for some reason this transaction is

345
00:19:20,016 --> 00:19:21,048
valid

346
00:19:21,048 --> 00:19:24,063
then you are likely leaving your
customers out from a real monetary

347
00:19:24,063 --> 00:19:25,069
transaction

348
00:19:25,069 --> 00:19:29,144
that has taken place so make sure you
trust the Q completely

349
00:19:30,044 --> 00:19:33,099
any and all transactions that you see in
the any and all updates you see

350
00:19:33,099 --> 00:19:36,170
are real invalid now if you concerned
about how to ensure that they are not an

351
00:19:37,007 --> 00:19:38,008
unauthorized

352
00:19:38,071 --> 00:19:41,080
or a fraudulent transaction that's a
different matter

353
00:19:42,061 --> 00:19:45,138
please come along on now Friday morning
in 10-15 I'm doing session about

354
00:19:46,038 --> 00:19:49,087
preventing unauthorized transactions
using receipts and you'll see that it's

355
00:19:49,087 --> 00:19:51,126
the receipt that holds that source of
truth

356
00:19:52,026 --> 00:19:55,120
about whether something was a real valid
monetary transaction

357
00:19:56,002 --> 00:20:01,024
otherwise for all intents and purposes
we trust the cure

358
00:20:01,042 --> 00:20:04,081
how we do that on launch as soon as
possible

359
00:20:04,081 --> 00:20:07,130
ideally in your application did finish
launching you should be calling

360
00:20:08,003 --> 00:20:11,094
escape a mccue add transaction observer

361
00:20:12,021 --> 00:20:15,027
the object you add in there will be a
object that conforms to the escape a mic

362
00:20:15,081 --> 00:20:16,085
you observe a protocol

363
00:20:17,021 --> 00:20:21,027
and that's your object that forms the
center of your apertures implementation

364
00:20:21,081 --> 00:20:24,086
its gonna receive all the updates about
how payments are progressing in the

365
00:20:24,086 --> 00:20:25,092
queue

366
00:20:25,092 --> 00:20:28,186
and it's how you can handle everything
from dealing with areas to updating UI

367
00:20:29,086 --> 00:20:32,120
et cetera

368
00:20:33,002 --> 00:20:37,040
to walk you through a quick example here
not so much because you need to get this

369
00:20:37,058 --> 00:20:40,114
begin a certain level information but
because I wanna so show you how it leads

370
00:20:41,014 --> 00:20:44,049
into a really bad design patent and why
that's wrong

371
00:20:44,049 --> 00:20:47,121
first pope first thing we gotta do is of
course we make this call making

372
00:20:48,021 --> 00:20:52,022
start to escape Rick request to get
information about the products we want

373
00:20:52,031 --> 00:20:54,068
to sell

374
00:20:54,068 --> 00:20:57,120
now once we've done that and we said
adela getting cold start we're going to

375
00:20:58,002 --> 00:21:01,021
get that product information back we're
gonna get a bunch of escape product

376
00:21:01,039 --> 00:21:02,113
objects

377
00:21:03,013 --> 00:21:06,088
when the user taps the buy button once
to enter their purchase flow we take

378
00:21:06,088 --> 00:21:06,122
that

379
00:21:07,022 --> 00:21:11,028
escape payment I escape product object
we transform it into a payment

380
00:21:11,082 --> 00:21:15,103
by calling us k payment payment with
product one thing to note here

381
00:21:16,003 --> 00:21:19,046
is I've heard from some feedback from
DTS in particular

382
00:21:19,046 --> 00:21:22,075
is that they've seen a lot of developers
try and handcraft their own escape

383
00:21:22,075 --> 00:21:23,109
product objects

384
00:21:24,009 --> 00:21:28,014
to create the payment with that's
totally not the right thing to do

385
00:21:28,014 --> 00:21:31,019
what you need to do is get your
identifies what you wanna sell use

386
00:21:31,064 --> 00:21:34,099
escape product request to get that
localized information and the escape

387
00:21:34,099 --> 00:21:34,195
product objects

388
00:21:35,095 --> 00:21:38,096
in your hand those escape product
objects

389
00:21:38,096 --> 00:21:41,125
into the pack in to escape a min to get
the payment object

390
00:21:42,025 --> 00:21:45,051
don't run craft your own you've got to
use those real-live escape product

391
00:21:45,051 --> 00:21:47,116
objects

392
00:21:48,016 --> 00:21:51,100
so first up was that we call escape a
min Pinewood product

393
00:21:52,000 --> 00:21:55,004
the next step is we take that payment
and we added into our payment cue to

394
00:21:55,004 --> 00:21:58,098
stop that process

395
00:21:59,034 --> 00:22:03,041
very very deliberate that there is no
step 3 here

396
00:22:04,004 --> 00:22:07,008
because at this point in time you are
completely hands-off and you should step

397
00:22:07,044 --> 00:22:07,081
back

398
00:22:07,081 --> 00:22:11,122
and let's talk it handle this
transaction for you

399
00:22:12,022 --> 00:22:15,079
in fact the transaction will take on a
life of its own completely outside your

400
00:22:15,079 --> 00:22:15,086
apt

401
00:22:16,049 --> 00:22:19,095
stock it and its background processes
will handle the actual purchasing

402
00:22:19,095 --> 00:22:19,179
process

403
00:22:20,079 --> 00:22:24,088
the dialogues in the sign in with the
user outside of your apt

404
00:22:24,088 --> 00:22:27,146
that means that payment takes on a life
outside if your app

405
00:22:28,046 --> 00:22:31,127
even if your app crashes even if you

406
00:22:32,027 --> 00:22:37,055
iraqis quit on or other circumstances
that could cause a long delay in that

407
00:22:37,055 --> 00:22:41,057
that payment process transacting it will
continue to happen

408
00:22:41,075 --> 00:22:44,112
even if Europe's not running

409
00:22:45,012 --> 00:22:48,019
so what we need to do is we've got a
handle the events from the queue to know

410
00:22:48,082 --> 00:22:50,097
where these payment is at

411
00:22:50,097 --> 00:22:53,098
the most important escape a min Q
observer

412
00:22:53,098 --> 00:22:57,117
method to implement is payment cue
updated transactions

413
00:22:58,017 --> 00:23:01,051
this is what gets called every time the
payment stars progressing through the

414
00:23:01,051 --> 00:23:02,070
process of becoming

415
00:23:02,007 --> 00:23:06,061
an actual in app purchase that is made

416
00:23:07,024 --> 00:23:10,109
and we can implement this like this so
here it got a full loop de loops over

417
00:23:11,009 --> 00:23:13,062
reach those transactions and receiving
an update for

418
00:23:13,062 --> 00:23:16,095
and for each transaction I set up a
switch statement because I wanna

419
00:23:16,095 --> 00:23:17,107
particularly no

420
00:23:18,007 --> 00:23:22,078
which state this transaction is in then
I can do things like looking for new

421
00:23:22,078 --> 00:23:25,084
for the state old escape payment
transaction Ste purchased

422
00:23:26,038 --> 00:23:30,051
that means the purchase has completed I
can unlock features and content

423
00:23:30,051 --> 00:23:32,147
I can go ahead and check the receipt
make sure it's a real monetary

424
00:23:33,047 --> 00:23:35,104
transaction or fraudulent one that
occurred

425
00:23:36,004 --> 00:23:41,063
and then unlock this features and
content accordingly

426
00:23:41,063 --> 00:23:44,159
but don't do this

427
00:23:45,059 --> 00:23:48,108
don't set up that case statement to look
for the state have purchased

428
00:23:49,008 --> 00:23:53,060
and then try and find a matching payment
in some side cash the you got

429
00:23:53,006 --> 00:23:56,024
of payments that you thought were in
progress

430
00:23:56,078 --> 00:23:59,080
because once you take created that
payment on check and thrown in the pain

431
00:23:59,008 --> 00:24:00,071
cue to start the process

432
00:24:01,043 --> 00:24:04,088
that object should be dead you should
forget about it

433
00:24:04,088 --> 00:24:06,180
you'll get information about those
payments and those transactions through

434
00:24:07,008 --> 00:24:08,101
the Q

435
00:24:09,073 --> 00:24:13,094
so if you did something like this and
tried to fetch that payment of some cash

436
00:24:13,094 --> 00:24:14,101
for you in maintaining

437
00:24:15,001 --> 00:24:18,095
what you thought was in progress and
then even worse

438
00:24:18,095 --> 00:24:21,174
did something like this and said haha I
know this payment

439
00:24:22,074 --> 00:24:27,074
I can order it comes from I was going to
ignore it and skip over it

440
00:24:27,074 --> 00:24:30,077
you will love left the customer out here
K

441
00:24:31,004 --> 00:24:35,040
if something arrives in the queue it's
because someone bought something

442
00:24:35,004 --> 00:24:38,078
even if you don't think originated from
your app or the running instance if

443
00:24:39,014 --> 00:24:39,070
you're up

444
00:24:39,007 --> 00:24:42,096
there's lotsa reasons and why a
transaction can suddenly appear in the

445
00:24:43,059 --> 00:24:43,111
queue

446
00:24:44,011 --> 00:24:50,059
they're always real they're always valid
you should process them

447
00:24:50,059 --> 00:24:53,064
so why not why would we do that because
what if your app crashes

448
00:24:54,009 --> 00:24:57,093
obviously then you lost your cash
information and not only is the user

449
00:24:57,093 --> 00:24:58,168
have to endure a crash in your app

450
00:24:59,068 --> 00:25:02,096
but next time when they launch a few
then ignore the subsequent update you

451
00:25:02,096 --> 00:25:03,138
get about the payment

452
00:25:04,038 --> 00:25:07,045
they not only have they put up with the
crash they've missed out on what

453
00:25:08,008 --> 00:25:11,064
you sold them

454
00:25:11,064 --> 00:25:16,086
it's just as valid always process those
transactions

455
00:25:16,086 --> 00:25:19,089
now came back to what we talked about
for this new state old

456
00:25:20,016 --> 00:25:25,022
the SK payment transaction deferred he's
an example how to handle

457
00:25:25,022 --> 00:25:28,094
that transaction being deferred so
remember in this state

458
00:25:28,094 --> 00:25:31,142
and child that's part of our family
sharing unit has

459
00:25:32,042 --> 00:25:35,121
asked permission to buy something in
your app and the transaction has moved

460
00:25:36,021 --> 00:25:38,022
from SK payment state purchasing

461
00:25:38,022 --> 00:25:41,028
to deferred now when you see that

462
00:25:41,082 --> 00:25:44,158
status come through as SK payment
transaction state deferred

463
00:25:45,058 --> 00:25:48,092
he is what you should do this 3

464
00:25:48,092 --> 00:25:51,153
important things the week really
encourages developers to do in your

465
00:25:52,053 --> 00:25:54,054
handling this situation

466
00:25:54,063 --> 00:25:57,088
the first is allow the user to keep
using the app

467
00:25:57,088 --> 00:26:00,151
it would be an absolute buzz kill for
the kids

468
00:26:01,051 --> 00:26:04,128
if they are sitting there in the app
absolutely delighted about the process

469
00:26:05,028 --> 00:26:07,093
the possibility that mom or dad might
just say yes

470
00:26:07,093 --> 00:26:11,148
to this purchase they've asked for but
all the while have to sit there waiting

471
00:26:12,048 --> 00:26:15,050
spinners are waiting for permission they
gonna

472
00:26:15,068 --> 00:26:19,072
taken it quit they gonna go to another
app you're gonna lose them

473
00:26:19,072 --> 00:26:23,085
K make sure they can keep using the app
in some way

474
00:26:23,085 --> 00:26:26,146
because it may be some time before the
transaction is updated

475
00:26:27,046 --> 00:26:30,084
it could be up to 24 hours before the
approval a decline comes through from

476
00:26:30,084 --> 00:26:32,138
the parents

477
00:26:33,038 --> 00:26:36,041
it's a really don't get them stuck in
that mean modal purchasing state where

478
00:26:36,068 --> 00:26:37,166
they can't do anything with your app

479
00:26:38,066 --> 00:26:42,114
in fact one way to think about it is
you've got a very captive audience at

480
00:26:43,014 --> 00:26:44,025
this point in time

481
00:26:44,025 --> 00:26:48,041
someone want something in your app and
they're waiting for approval for

482
00:26:48,041 --> 00:26:53,045
make use of that time

483
00:26:53,081 --> 00:26:57,166
that at the end love any transaction you
perform with stalk it weather gets

484
00:26:58,066 --> 00:26:59,068
purchased of failed

485
00:26:59,086 --> 00:27:04,152
you always must call finish transaction

486
00:27:05,052 --> 00:27:08,100
when you call finish transaction that
tells the App Store the you're done with

487
00:27:09,000 --> 00:27:09,089
this transaction

488
00:27:09,089 --> 00:27:12,168
you've seen it you've processed it you
don't need to see it again

489
00:27:13,068 --> 00:27:16,152
it removes it from the queue and that
makes sure that we don't keep calling

490
00:27:17,052 --> 00:27:17,120
the updated

491
00:27:18,002 --> 00:27:22,045
transactions method each time on launch
or another points when your app is

492
00:27:22,063 --> 00:27:23,108
running

493
00:27:24,008 --> 00:27:29,100
now this is the most common cause I say
forbad ap behavior on launch

494
00:27:30,000 --> 00:27:33,037
especially things like really slow
launch time or

495
00:27:33,037 --> 00:27:36,099
launch time where launches minutes
hanging there for a while

496
00:27:36,099 --> 00:27:39,175
all westfall when the app launches and
presented with a series dialogue just

497
00:27:40,075 --> 00:27:41,151
don't make sense to me

498
00:27:42,051 --> 00:27:45,126
because in fact what's happening is
because you didn't remove that

499
00:27:46,026 --> 00:27:49,115
transaction from the queue when you're
apple launches

500
00:27:50,015 --> 00:27:53,039
we can you add that transaction cue
observer in

501
00:27:53,039 --> 00:27:56,116
the first thing we do is go and look at
the history a transaction for the

502
00:27:57,016 --> 00:28:00,018
still-pending haven't had transaction
finished called on them

503
00:28:00,018 --> 00:28:04,027
and will go on replay all those updates
through to your apt

504
00:28:04,027 --> 00:28:07,126
so he then stop processing them and have
reason to message something to the user

505
00:28:08,026 --> 00:28:10,063
and still failed to call finish
transaction

506
00:28:10,063 --> 00:28:13,076
means every single time

507
00:28:13,076 --> 00:28:16,171
your app launches its gonna go through
this process

508
00:28:17,071 --> 00:28:20,164
too bad user experience and it's one
that gets worse the more the user uses

509
00:28:21,064 --> 00:28:21,121
your app

510
00:28:22,021 --> 00:28:27,106
always call finish transaction to get
those items out a cure

511
00:28:28,006 --> 00:28:31,097
to tips about the escape a min Q object
itself

512
00:28:31,097 --> 00:28:34,105
one is going back to this notion that
the escape a mic use your single source

513
00:28:35,077 --> 00:28:36,100
of truth

514
00:28:37,000 --> 00:28:41,044
he has a property on a call transactions
and you can call that property

515
00:28:41,044 --> 00:28:44,045
and get the list transactions are
currently in flight

516
00:28:44,054 --> 00:28:49,065
so for example if you want to when you
show your your purchase you I make sure

517
00:28:49,065 --> 00:28:51,108
you correctly represented any
transaction

518
00:28:52,008 --> 00:28:56,013
items that are still purchasing you
could call transactions to get the list

519
00:28:56,013 --> 00:29:00,036
of payments in progress as opposed to
trying to track that state yourself on

520
00:29:00,036 --> 00:29:02,095
the side

521
00:29:02,095 --> 00:29:06,182
the other one is keep in mind that in a
person can be disabled on the device

522
00:29:07,082 --> 00:29:10,090
and it's a really bad experience for the
user if they're enticed

523
00:29:10,009 --> 00:29:14,030
to play your game or use your app enough
to wanna make an app purchase

524
00:29:15,011 --> 00:29:18,024
then only to find that they get some
error message telling them that that's

525
00:29:18,024 --> 00:29:19,115
been disabled

526
00:29:20,015 --> 00:29:23,077
so you can call can make payments on
escape a min Q

527
00:29:23,077 --> 00:29:26,110
to cost method returnable Ian to know
whether or not

528
00:29:27,001 --> 00:29:32,004
in app purchases can actually be made

529
00:29:32,013 --> 00:29:39,013
now will give you a quick demo few
things we've just talked about

530
00:29:44,069 --> 00:29:44,112
okay

531
00:29:45,012 --> 00:29:48,431
I have here have very very simple app

532
00:29:48,539 --> 00:29:52,565
for always tended does an in app
purchase everything I talk about in a

533
00:29:52,799 --> 00:29:55,450
session including this demo applies
equally to Iowa's

534
00:29:55,045 --> 00:29:58,048
and OS 10 stalk it is the same on both
platforms

535
00:29:58,048 --> 00:30:01,227
but in this app few things to call out

536
00:30:01,659 --> 00:30:04,707
in my application did finish launching
first thing I'm doing -ism

537
00:30:05,139 --> 00:30:10,143
adding an object in to observe the Q and
down here you'll see I will have

538
00:30:10,539 --> 00:30:10,614
implemented

539
00:30:11,289 --> 00:30:14,291
my payment cue updated transactions
method

540
00:30:14,309 --> 00:30:17,341
it in here that I start inspecting

541
00:30:17,629 --> 00:30:21,110
and dealing with all those events that
happen as purchases progress

542
00:30:21,011 --> 00:30:24,100
through the Cure I deal with things like
it entering the purchasing statement

543
00:30:25,000 --> 00:30:28,169
things first start when it gets
purchased

544
00:30:28,169 --> 00:30:32,250
went failed or restored so

545
00:30:32,025 --> 00:30:36,033
for the sake of this damn I'm going to
run my really really simple app

546
00:30:36,033 --> 00:30:39,592
all it does is it sells a 99-cent been
on the Viron in app purchase

547
00:30:39,889 --> 00:30:44,976
really exciting go ahead and purchase
that now soon as I hit the purchase

548
00:30:45,759 --> 00:30:46,370
button

549
00:30:46,037 --> 00:30:49,120
for any other user interaction I've
straightaway

550
00:30:50,002 --> 00:30:54,076
my break point was hit that I said in my
pay make you updated transactions method

551
00:30:54,094 --> 00:30:57,103
so that's really important to know
because if you were thinking you had to

552
00:30:58,084 --> 00:31:01,253
track you I state yourself this
demonstrates you don't

553
00:31:02,009 --> 00:31:06,240
as soon as a button was clicked bang
where into the payment cue in observing

554
00:31:06,024 --> 00:31:06,943
an event occurring

555
00:31:07,159 --> 00:31:10,236
and in fact the event where observing is
the fact that this

556
00:31:10,929 --> 00:31:14,980
payment for this transaction has entered
the state purchasing

557
00:31:14,098 --> 00:31:17,407
so this would be a time when I could go
on updated state if i buy buttons

558
00:31:18,289 --> 00:31:21,314
whatever else I need to do to inform the
user that yes

559
00:31:21,539 --> 00:31:25,616
this transaction is underway and take
the breakpoint oxygen get a bit noisy

560
00:31:26,309 --> 00:31:30,610
let let the app continue into what
happens here so I've been prompted to

561
00:31:30,061 --> 00:31:30,740
sign in

562
00:31:31,289 --> 00:31:34,312
now one thing to note is because this is
a test app

563
00:31:34,519 --> 00:31:38,320
I'm using the a App Store test
environment

564
00:31:38,032 --> 00:31:42,109
that is I have my app signed with my
development certificate as we see here

565
00:31:43,009 --> 00:31:47,032
scroll down to the code thing sometimes
it's easy just searching for code

566
00:31:47,032 --> 00:31:47,075
signing

567
00:31:47,075 --> 00:31:51,108
course said it all in combined

568
00:31:52,008 --> 00:31:55,477
see here my code signing

569
00:31:55,549 --> 00:31:59,710
identity is set to Mac Developer this
make sure the my app is development

570
00:31:59,071 --> 00:31:59,132
signed

571
00:32:00,032 --> 00:32:03,121
when it runs that means that when we
start using stalk it

572
00:32:03,409 --> 00:32:06,507
stock it can inspect echoed signature
this the code to get your this app

573
00:32:07,389 --> 00:32:10,452
and you can know that because its
development sign he needs to talk to the

574
00:32:11,019 --> 00:32:12,010
test environment

575
00:32:12,001 --> 00:32:15,630
not the production App Store and that
allows us to test arena purges

576
00:32:15,639 --> 00:32:17,668
implementation before we have anything
on the store

577
00:32:17,929 --> 00:32:21,480
so you go ahead here an end to my
password

578
00:32:21,048 --> 00:32:25,587
cool yup I definitely wanna buy this ban
on

579
00:32:26,019 --> 00:32:30,450
and I've already purchased it on the
stem a few times now

580
00:32:30,045 --> 00:32:34,053
and see here when we get the final thank
you through from

581
00:32:35,025 --> 00:32:39,062
stock in from the App Store where
already back in our apt we've got a

582
00:32:39,062 --> 00:32:40,231
break point fired

583
00:32:40,789 --> 00:32:43,812
in the SK payment transactions state
purchased

584
00:32:44,019 --> 00:32:47,107
this is where we can then go ahead and
inspect what it was it was bought by

585
00:32:47,899 --> 00:32:48,870
looking at the receipt

586
00:32:48,087 --> 00:32:52,087
unlocking features and content named
whatever else we need to do based on

587
00:32:52,087 --> 00:32:53,486
this purchase having occurred

588
00:32:54,269 --> 00:32:57,840
right now

589
00:32:57,084 --> 00:33:02,783
at this point because the breakpoint
notice that I have not yet called

590
00:33:03,539 --> 00:33:06,572
finish transaction I've made a break
point

591
00:33:06,869 --> 00:33:08,945
right at the point when I would normally
on check the receipt to know what they

592
00:33:09,629 --> 00:33:09,678
bought

593
00:33:10,119 --> 00:33:13,120
and unlock those features and content
accordingly

594
00:33:13,129 --> 00:33:18,760
but one if I hit the stop button up here
in my app in Xcode

595
00:33:18,076 --> 00:33:21,865
this is just like what would happen if
my app crashed midway through the in app

596
00:33:22,549 --> 00:33:22,610
purchase

597
00:33:23,159 --> 00:33:26,185
or what would happen if you use a killed
your Apple quit Europe during the

598
00:33:26,419 --> 00:33:26,425
purchase

599
00:33:27,019 --> 00:33:30,260
well maybe something else happen lost
network whatever it might be

600
00:33:30,026 --> 00:33:34,055
the important thing is here let's put
this breakpoint back on

601
00:33:34,289 --> 00:33:38,326
when my apt next launchers and this
applies to I was no estÃ¡n

602
00:33:38,659 --> 00:33:42,673
watch what happens on launch

603
00:33:42,799 --> 00:33:45,825
I was immediately taken again

604
00:33:46,059 --> 00:33:50,060
into payment cue updated transactions
why

605
00:33:50,159 --> 00:33:53,223
because that transaction haven't
finished yet your app crashed midway

606
00:33:53,799 --> 00:33:57,100
through handling that even though the
user had paid

607
00:33:57,001 --> 00:34:01,002
for what they've bought so this is why
it's so important to always observe the

608
00:34:01,002 --> 00:34:04,331
Q and handle any and every transaction
that occurs through here

609
00:34:04,529 --> 00:34:08,543
in a way that doesn't rely on you
tracking any state yourself

610
00:34:08,669 --> 00:34:13,000
so this time gonna let this go through
and that goes through make sure that we

611
00:34:13,000 --> 00:34:17,119
do actually finish that transaction

612
00:34:17,119 --> 00:34:20,191
one thing I did wanna know we mentioned
before about the updating a view I

613
00:34:20,839 --> 00:34:23,937
let's go through this process again and
you're set a breakpoint here on

614
00:34:24,819 --> 00:34:28,892
transaction state purchasing now when I
run this

615
00:34:29,549 --> 00:34:33,710
let's buy a ban on again

616
00:34:33,071 --> 00:34:36,270
just take note of the fact that this
time around

617
00:34:36,909 --> 00:34:40,006
my a break point he was called

618
00:34:40,879 --> 00:34:43,950
on the main thread but you shouldn't
necessarily

619
00:34:43,095 --> 00:34:47,147
make any assumptions about which thread
you will get these call backs on

620
00:34:48,047 --> 00:34:51,686
so she updating UI elements in here such
as setting a button state

621
00:34:52,109 --> 00:34:55,780
grain things out anything you like your
racket make sure you don't make an

622
00:34:55,078 --> 00:34:57,146
assumption that which thread that
message comes in on

623
00:34:58,046 --> 00:35:01,093
and dispatcher two main if you have to
to work safely with that kid knew I

624
00:35:01,093 --> 00:35:04,140
can't

625
00:35:05,004 --> 00:35:11,683
okay let's go back to slides

626
00:35:12,079 --> 00:35:16,450
let's move on to the post sales
experience so we showed a beautiful you

627
00:35:16,045 --> 00:35:17,068
either the user

628
00:35:17,068 --> 00:35:21,094
mean tightened by by process was smooth
and seamless

629
00:35:21,094 --> 00:35:26,733
now you've got to make good on what
they've paid for

630
00:35:27,579 --> 00:35:32,260
in particular you need to process the
transaction through the payment cue

631
00:35:32,026 --> 00:35:35,029
then you need to make that asset or
content feature available in this may

632
00:35:35,029 --> 00:35:35,338
mean

633
00:35:35,599 --> 00:35:38,601
downloading content and then of course

634
00:35:38,619 --> 00:35:43,000
finished transaction now in the
post-sale experience this three key

635
00:35:43,000 --> 00:35:45,109
things you're going to want to do

636
00:35:45,109 --> 00:35:50,150
the first is validate the purchase
verify the receipt from that transaction

637
00:35:50,015 --> 00:35:53,028
you can verify that on device or on a
server the server level if you're

638
00:35:53,028 --> 00:35:55,045
handing out content from services

639
00:35:55,045 --> 00:35:59,464
and that is your way to confirm that it
was a real monetary transaction

640
00:35:59,869 --> 00:36:04,400
this is authentic and trusted and
occurred with the production App Store

641
00:36:04,004 --> 00:36:09,673
again 10-15 Friday come along let me
tell you all about that

642
00:36:10,069 --> 00:36:13,510
the next thing you want to do is give
them what they pay for

643
00:36:13,051 --> 00:36:16,106
and especially if you have to download
content for that feature

644
00:36:17,006 --> 00:36:20,010
obviously is apt become more and more
rich in features they offer

645
00:36:20,046 --> 00:36:24,120
it often makes sense to have a small a
binary for the actual app itself

646
00:36:25,002 --> 00:36:29,101
and then download extra content as those
in app purchases are made

647
00:36:29,299 --> 00:36:33,710
you can host that with us or you could
have self-hosted

648
00:36:33,071 --> 00:36:36,460
and then lastly depending on the type of
transaction there may be a need to

649
00:36:37,099 --> 00:36:38,250
persist state

650
00:36:38,025 --> 00:36:41,374
about the transaction having occurred
all be able to handle the situation

651
00:36:41,599 --> 00:36:43,625
where the user needs to restore

652
00:36:43,859 --> 00:36:47,960
the previous transactions that they have
made

653
00:36:47,096 --> 00:36:51,181
so a quick word on receipt validation we
did on device validation of the receipt

654
00:36:52,081 --> 00:36:55,340
that is confirming it was a real
monetary transaction with the store

655
00:36:56,069 --> 00:37:00,710
you can then go on unlock this features
and content within the app itself

656
00:37:00,071 --> 00:37:03,078
but increasingly like I said we see
developers hosting content

657
00:37:03,078 --> 00:37:07,090
either with us or on the own server
infrastructure that is downloaded

658
00:37:07,009 --> 00:37:11,042
when the purchase takes place if you
have your own servers

659
00:37:12,023 --> 00:37:16,045
to issuing that content out to your
users based on in app purchases

660
00:37:16,045 --> 00:37:19,066
of course you want to make sure that
those servers on the hand that content

661
00:37:19,066 --> 00:37:19,163
out

662
00:37:20,063 --> 00:37:24,149
to real pain customers and in fact you
can do server to server

663
00:37:25,049 --> 00:37:30,148
validation receipts using Apple's online
validation service

664
00:37:30,589 --> 00:37:33,592
and that'll allow you to restrict access
and be sure you only hand others

665
00:37:33,619 --> 00:37:34,693
valuable assets

666
00:37:35,359 --> 00:37:40,880
to people who have paid but we
definitely don't wanna do

667
00:37:40,088 --> 00:37:44,131
is trying use that online validation
service directly from the device

668
00:37:45,031 --> 00:37:49,114
now there was a time a little while ago
when that was kinda okay to do

669
00:37:50,014 --> 00:37:53,100
but when we introduced I was seven we
introduce the grand unified receipt

670
00:37:54,000 --> 00:37:55,028
format

671
00:37:55,028 --> 00:37:59,052
that unify the receipt format that we
use on I O S and the West End

672
00:37:59,052 --> 00:38:02,331
and empowered you as the developer to be
able to validate that receipt

673
00:38:02,799 --> 00:38:07,310
on the device itself that way there was
no need for your apt to be calling out

674
00:38:07,031 --> 00:38:09,073
Apple's validation service

675
00:38:09,073 --> 00:38:13,098
to get back the information about that
receipt to know if it was valid

676
00:38:13,098 --> 00:38:16,140
so should no longer be using that
validation service directly from your

677
00:38:17,004 --> 00:38:19,015
device

678
00:38:19,051 --> 00:38:22,124
it's okay to do a from your servers to
the validation service

679
00:38:23,024 --> 00:38:26,653
but as far as your app running on a
device it should be the Validate the

680
00:38:26,869 --> 00:38:28,020
receipt locally

681
00:38:28,002 --> 00:38:31,100
all past that receipt up to your service
first then your servers

682
00:38:32,000 --> 00:38:35,022
can talk to the Apple server the Apple
validation service to know if the

683
00:38:35,022 --> 00:38:37,026
receipt is valid

684
00:38:37,026 --> 00:38:41,365
and those I was 6 API's they are in fact
deprecated now

685
00:38:41,599 --> 00:38:47,430
so you really need to move away from
those

686
00:38:47,043 --> 00:38:51,079
downloading content especially in terms
of ensuring a very hassle-free

687
00:38:51,079 --> 00:38:55,092
smooth and great in app purchase
experience every time

688
00:38:55,092 --> 00:38:58,150
downloading content is a really
important area to focus on

689
00:38:59,005 --> 00:39:02,051
at this point in time the user has paid
for what you're offering

690
00:39:02,096 --> 00:39:05,102
Ryan they've done their side of the
bargain they've paid you

691
00:39:06,002 --> 00:39:09,058
now it's up to you to deliver what they
paid for as quickly and reliably as

692
00:39:09,058 --> 00:39:09,151
possible

693
00:39:10,051 --> 00:39:13,138
every single time wanna great ways you
can do that

694
00:39:14,038 --> 00:39:17,046
is by using Apple's hosted in app
purchase feature

695
00:39:17,046 --> 00:39:20,053
that allows you to host in app purchase
content with us it's hosted on our

696
00:39:21,016 --> 00:39:22,225
servers

697
00:39:22,369 --> 00:39:25,470
which very scaleable very reliable

698
00:39:25,047 --> 00:39:28,426
we can download the content for you in
the background even when Europe's not

699
00:39:28,849 --> 00:39:29,480
running

700
00:39:29,048 --> 00:39:33,053
so one for purchases made the user can
switch around doing lots of other things

701
00:39:33,098 --> 00:39:36,125
and I'm gonna get back to your apt
contents therein waiting for great

702
00:39:37,025 --> 00:39:38,066
experience for them

703
00:39:38,066 --> 00:39:41,995
and you can have up to 2 gigabytes her
in app purchase a product

704
00:39:42,589 --> 00:39:45,710
that's not too big total para that's too
big

705
00:39:45,071 --> 00:39:49,074
her item you are selling through an app
purchases

706
00:39:50,001 --> 00:39:53,096
nephew using hosted content it's so
simple to use

707
00:39:53,096 --> 00:39:56,495
way back now payment cue updated
transactions method

708
00:39:57,359 --> 00:40:00,660
looping over at transactions were
receiving updates for

709
00:40:00,066 --> 00:40:03,104
if you see a transaction with the
downloads property in that download

710
00:40:04,004 --> 00:40:06,043
property contains one or more downloads

711
00:40:06,043 --> 00:40:10,050
and you wanna start downloading a
content watch this

712
00:40:10,005 --> 00:40:15,034
simple you simply call escape a mic you
stop download and hand those downloads

713
00:40:15,529 --> 00:40:16,650
over to us

714
00:40:16,065 --> 00:40:19,138
stock it now back from process that
takes care of downloading the content

715
00:40:20,038 --> 00:40:24,099
get to the users quickly and seamlessly
as possible

716
00:40:24,099 --> 00:40:27,658
when the download progress is you also
receive updates via

717
00:40:28,549 --> 00:40:32,572
the escape Inc you observe a method
payment cue updated downloads

718
00:40:32,779 --> 00:40:36,270
this will tell you things like progress
in time remaining: as well as state an

719
00:40:36,027 --> 00:40:36,116
era

720
00:40:37,016 --> 00:40:41,135
and when it's finished you will get a
continuity trail where you can locate

721
00:40:41,279 --> 00:40:45,490
where that content has been downloaded
to

722
00:40:45,049 --> 00:40:47,140
now cause there may be many reasons why
you wanna host that in a purchase

723
00:40:48,004 --> 00:40:50,173
content yourself and that's okay

724
00:40:50,569 --> 00:40:54,140
but make sure you use the background
download API's to download that

725
00:40:54,014 --> 00:40:57,083
for all the same reasons if you're using

726
00:40:57,083 --> 00:41:01,140
the standard old Ennis URL connection to
download this content

727
00:41:02,004 --> 00:41:05,473
there's gonna be some serious
limitations you run into

728
00:41:05,869 --> 00:41:07,935
particularly around the fact that you
cannot guarantee the download will start

729
00:41:08,529 --> 00:41:09,533
straight away

730
00:41:09,569 --> 00:41:13,930
depending on network commissions and the
use would have to sit there

731
00:41:13,093 --> 00:41:17,152
in your app while the download happens
to guarantee it completes

732
00:41:18,052 --> 00:41:21,099
that's not good but what you can do

733
00:41:21,099 --> 00:41:26,102
is you can use an issue oral session to
do the background download for your

734
00:41:27,002 --> 00:41:29,076
there's lotsa great documentation
available for this online but here's a

735
00:41:29,076 --> 00:41:30,170
quick run through how this works

736
00:41:31,007 --> 00:41:34,053
you create you an issue oral session
configuration by giving a

737
00:41:35,016 --> 00:41:39,074
and name have called him my background
download my background session

738
00:41:39,074 --> 00:41:42,089
and then we've got a session configured
we create the session itself and we give

739
00:41:42,089 --> 00:41:44,166
a delegate to get updates about how the
downloads going

740
00:41:45,066 --> 00:41:50,075
and a queue on which to receive those
updates thats dispatch care

741
00:41:50,075 --> 00:41:52,113
this will be familiar with anyone that's
worked with an issue a real connection

742
00:41:53,013 --> 00:41:53,992
before

743
00:41:54,109 --> 00:41:57,880
you create an issue I will request in
this case have just created with the URL

744
00:41:57,088 --> 00:41:59,177
that I want to download

745
00:42:00,077 --> 00:42:03,101
10 simple as this: I create the download
task

746
00:42:04,001 --> 00:42:07,008
using that request and the download
session

747
00:42:07,008 --> 00:42:10,027
see what we did there we set up a
session to go and download this force in

748
00:42:10,027 --> 00:42:11,056
the background

749
00:42:11,299 --> 00:42:15,740
we told what we wanted to go and get and
we when created the download task

750
00:42:15,074 --> 00:42:19,403
and now the OS is taking care that force
in the background

751
00:42:20,069 --> 00:42:23,380
you get updates by the delegate method
onto house as to how the damage is

752
00:42:23,038 --> 00:42:25,126
progressing so you can update you on

753
00:42:26,026 --> 00:42:30,565
but because these can continue to happen
while your caps lock running

754
00:42:30,799 --> 00:42:33,824
when you apple launches you need to
reconnect to any sessions that might be

755
00:42:34,049 --> 00:42:35,080
in progress

756
00:42:35,008 --> 00:42:39,095
almighty finished why your app wasn't
running and this is how you do that

757
00:42:39,095 --> 00:42:42,102
your application delegate you should
implement application handle events for

758
00:42:43,002 --> 00:42:45,002
background URL session

759
00:42:45,002 --> 00:42:48,076
that will get called on launch see you
can reestablish a session configuration

760
00:42:48,076 --> 00:42:52,102
get the session itself set you delegate
again and then get those same progress

761
00:42:53,002 --> 00:42:56,096
updates about how the download is going

762
00:42:56,096 --> 00:42:59,175
but no matter how you download the
content with you downloaded

763
00:43:00,075 --> 00:43:04,394
yourself with you downloaded via host in
app purchases

764
00:43:05,069 --> 00:43:09,250
you must always call finish transaction
of course but you must do that

765
00:43:09,025 --> 00:43:14,884
once you've completely downloaded the
asset and made available to the user

766
00:43:15,109 --> 00:43:18,470
one thing that can go horribly wrong
from the user's perspective

767
00:43:18,047 --> 00:43:21,376
is if you call finish transaction
earlier

768
00:43:21,799 --> 00:43:25,890
before the download is done and then
something happens during the download

769
00:43:25,089 --> 00:43:30,173
they may have no way to get back or get
to that purchase they've just made

770
00:43:31,073 --> 00:43:34,104
so you called finish transaction once
the contents download it and you've made

771
00:43:35,004 --> 00:43:36,008
available

772
00:43:36,008 --> 00:43:39,056
that way only then is a go at a cue and
only then will you not receive further

773
00:43:39,056 --> 00:43:42,099
updates about it

774
00:43:42,099 --> 00:43:45,408
now restoring transactions this is
something you have to offer

775
00:43:46,299 --> 00:43:51,230
excuse me this is something you have to
offer if you are selling non consumable

776
00:43:51,023 --> 00:43:54,132
all items ordering your subscription

777
00:43:54,339 --> 00:43:58,290
non consumable items there things like
it game levels all maps

778
00:43:58,029 --> 00:44:03,518
or one of purchases the designed to be
used across multiple devices

779
00:44:03,779 --> 00:44:06,808
order annual subscriptions they like to
periodicals

780
00:44:07,069 --> 00:44:10,690
where you are setting up a subscription
payment for ongoing delivery of new

781
00:44:10,069 --> 00:44:11,072
content

782
00:44:11,099 --> 00:44:15,152
if you offering either of those you have
to make sure you can offer the ability

783
00:44:16,052 --> 00:44:19,140
to restore previous transactions that is
allow the user to get back what they've

784
00:44:20,004 --> 00:44:21,079
bought before 30 rap

785
00:44:22,015 --> 00:44:26,144
especially if they buy a new device or
otherwise need to get back what they've

786
00:44:26,279 --> 00:44:29,650
already paid for

787
00:44:29,065 --> 00:44:32,714
but if you offering consumers a non
renewing subscriptions so a consumable

788
00:44:33,299 --> 00:44:35,920
might be something like gas in a race
car track

789
00:44:35,092 --> 00:44:39,201
I gems and coins or currency generally
in item that's purchased

790
00:44:40,029 --> 00:44:44,450
then used up and ideally purchased again
and again and again

791
00:44:44,045 --> 00:44:48,077
if you offering those sorts of I am
through in a purchase

792
00:44:48,077 --> 00:44:51,143
then it's up to you the developer to
persist that state

793
00:44:52,043 --> 00:44:55,962
you can't restore those and this comes
back to what I was just saying before

794
00:44:56,349 --> 00:44:59,425
about making sure you call finish
transaction at the right point in time

795
00:45:00,109 --> 00:45:04,380
because you get one shot at a consumable
and non renewing subscription

796
00:45:04,038 --> 00:45:07,277
you have to make sure you're up handle
the transaction probably

797
00:45:07,619 --> 00:45:11,641
makes it available to the user and only
then calls finish transaction because

798
00:45:11,839 --> 00:45:14,210
you can't restore this

799
00:45:14,021 --> 00:45:17,073
but for the content types you can
restore you call escape a mic you

800
00:45:17,073 --> 00:45:18,076
default queue

801
00:45:18,076 --> 00:45:22,175
restore completed transactions now what
happens here

802
00:45:22,859 --> 00:45:27,220
is a course you need to observe the Q
because you'll receive these delicate

803
00:45:27,022 --> 00:45:28,039
call back methods

804
00:45:28,039 --> 00:45:32,508
such as restore completed transactions
fail with Cara if things don't go well

805
00:45:32,859 --> 00:45:36,960
or payment cue restore complete
transactions finished

806
00:45:36,096 --> 00:45:39,097
at that point you can go and inspect the
receipt to know what

807
00:45:39,097 --> 00:45:45,106
purchases were restored unlock those
features and content

808
00:45:46,006 --> 00:45:50,045
but note that this requires a network
connection

809
00:45:50,099 --> 00:45:53,196
and the user will be prompted to sign in
to the store if we have to verify their

810
00:45:54,069 --> 00:45:55,210
identity

811
00:45:55,021 --> 00:45:58,410
so that we know exactly what they paid
for to get you that list of

812
00:45:58,599 --> 00:46:01,646
restored transactions

813
00:46:02,069 --> 00:46:06,220
now just because you're a has to offer
restore transactions

814
00:46:06,022 --> 00:46:09,047
it doesn't mean you should call it all
the time

815
00:46:09,047 --> 00:46:12,166
because it requires a network connection
because it will require the user's use

816
00:46:12,589 --> 00:46:12,990
it as

817
00:46:12,099 --> 00:46:16,152
sign in it should be something you do
only when the user asks you to

818
00:46:17,052 --> 00:46:20,059
I know a lot of developers think it
would make sense to just call restore

819
00:46:21,022 --> 00:46:22,106
transactions every time the app launches

820
00:46:23,006 --> 00:46:27,285
because I don't they always want to get
back what they paid for

821
00:46:27,339 --> 00:46:31,410
yes but when they have to sign in to do
that

822
00:46:31,041 --> 00:46:34,075
it becomes too much a heavyweight
process on launch

823
00:46:34,075 --> 00:46:36,143
so let the app launch an offer a
graceful way for them to restore

824
00:46:37,043 --> 00:46:38,212
transactions

825
00:46:38,599 --> 00:46:44,000
if you have to do that based on the
content types you're selling

826
00:46:44,000 --> 00:46:47,569
so it's wrap this up with a summary this
is my room

827
00:46:47,569 --> 00:46:52,410
recipe for trouble free in app purchases

828
00:46:52,041 --> 00:46:56,750
so when you are loading up your in app
purchase product identifiers

829
00:46:57,119 --> 00:47:02,200
these list of product identifies you're
going to sell or offer to the user

830
00:47:02,002 --> 00:47:05,088
be very careful about how you choose to
host them and where you hosting if you

831
00:47:06,006 --> 00:47:08,054
not gonna bake them into your app itself

832
00:47:08,054 --> 00:47:11,583
because if that first experiences a spin
a while you wait for that to load

833
00:47:12,069 --> 00:47:15,090
or even worse in error because the
server can be reached

834
00:47:15,279 --> 00:47:18,880
at totally derails your sales experience

835
00:47:18,088 --> 00:47:21,777
cash inappropriately if you can and
avoid delay in presenting these products

836
00:47:22,569 --> 00:47:25,180
by fetching just ahead of time if you
can anticipate

837
00:47:25,018 --> 00:47:30,697
a great example this is if you've got a
racing car game for example

838
00:47:30,859 --> 00:47:34,670
the promise a lot of conditions you can
anticipate around when you can offer in

839
00:47:34,067 --> 00:47:37,068
a purchase is let's say I mean offer an
in app purchase

840
00:47:37,077 --> 00:47:40,102
that allows the user to go faster around
the track next time round

841
00:47:41,002 --> 00:47:44,721
will somehow upgrades their car when we
can offer that

842
00:47:44,739 --> 00:47:48,776
well probably when the coming dead last
in the race when I finish last

843
00:47:49,109 --> 00:47:52,178
and so those are two things we could
anticipate in code right

844
00:47:52,799 --> 00:47:56,390
if we know they are gonna about to cross
the finish line and we know that they're

845
00:47:56,039 --> 00:47:58,040
in a bad position

846
00:47:58,004 --> 00:48:01,066
just ahead of time gone grab that
product information

847
00:48:02,002 --> 00:48:05,041
and make sure you've got on hand for
when they cross the finish line

848
00:48:05,041 --> 00:48:08,108
in last place and the you can offer them
a great way to beat their friends and

849
00:48:09,008 --> 00:48:12,069
finish in first place next time around

850
00:48:12,069 --> 00:48:15,408
likewise the same applies when you go
and fetch the product information to

851
00:48:16,029 --> 00:48:19,250
localize product information from the
App Store

852
00:48:19,025 --> 00:48:22,038
fetch only the products you need

853
00:48:22,038 --> 00:48:25,066
sure love you've got tens and tens or
even hundreds have been a purchase

854
00:48:25,066 --> 00:48:25,152
identifiers

855
00:48:26,052 --> 00:48:29,831
in your app be probably only going to
offer

856
00:48:30,299 --> 00:48:34,324
three four five maybe six items to the
user to any one point in time

857
00:48:34,549 --> 00:48:38,130
and because this involves a round trip
to the App Store network

858
00:48:38,013 --> 00:48:41,392
you only want to fetch just the products
you need to this happens as quickly as

859
00:48:41,509 --> 00:48:42,950
possible

860
00:48:42,095 --> 00:48:45,654
surface just ahead of time just like we
said before China anticipate when you

861
00:48:46,509 --> 00:48:47,532
gonna display this

862
00:48:47,739 --> 00:48:51,540
fetched just ahead of time to avoid any
delay their just makes for such a smooth

863
00:48:51,054 --> 00:48:52,143
in a purchase experience

864
00:48:53,043 --> 00:48:56,392
if the user can go directly from the
point in time when they may be enticed

865
00:48:56,779 --> 00:48:57,750
by something

866
00:48:57,075 --> 00:49:01,089
to be able to tap that by months
straight away

867
00:49:01,089 --> 00:49:04,154
now we show your beautiful in a purchase
you why and I've got a mention earlier

868
00:49:05,054 --> 00:49:08,523
today there was a really great session
call designing a great in a purchase

869
00:49:09,009 --> 00:49:09,980
experience

870
00:49:09,098 --> 00:49:12,123
should really check out the video that
cuz it goes far more in-depth

871
00:49:13,023 --> 00:49:17,067
about design techniques about how to
provide a great in a purchase experience

872
00:49:17,067 --> 00:49:20,072
but from a code level make sure to you

873
00:49:21,017 --> 00:49:25,936
ensure proper localization we deal with
the global marketplace

874
00:49:26,089 --> 00:49:29,480
and just because we're familiar with a
particular way represented currency

875
00:49:29,048 --> 00:49:33,070
or particular display style doesn't mean
everyone else will like that

876
00:49:33,007 --> 00:49:36,083
let alone wanna buy a wrap if you get it
wrong

877
00:49:37,046 --> 00:49:40,138
to take a ritual great localization it
makes users feel comfortable and makes

878
00:49:41,038 --> 00:49:41,135
me feel happy

879
00:49:42,035 --> 00:49:47,044
the customs there for many with being
enticed and enjoyed by your app

880
00:49:47,359 --> 00:49:51,210
do I convert the current system
everything you get back in escape random

881
00:49:51,021 --> 00:49:54,060
in the escape product object will be
correct for the store that the user is

882
00:49:54,006 --> 00:49:58,265
signed into

883
00:49:58,859 --> 00:50:02,460
know when the make the purchase that is
you take that escape for a dub check to

884
00:50:02,046 --> 00:50:04,114
make an escape a min throwed in the
payment cue

885
00:50:05,014 --> 00:50:08,029
wanted added it to the queue step back
in the hands of

886
00:50:08,029 --> 00:50:12,098
there's no step 3 remember create the
payment added to the queue

887
00:50:12,359 --> 00:50:17,690
that's it but the payment cute and drive
the further updates

888
00:50:17,069 --> 00:50:21,238
and then processed those updates make
sure you verify the receipt

889
00:50:21,859 --> 00:50:24,710
to make sure it's a real monetary
transaction happen with the App Store

890
00:50:24,071 --> 00:50:25,147
nothing fun is going on

891
00:50:26,047 --> 00:50:30,666
onlookers features and content soon as
you possibly can for a great experience

892
00:50:31,089 --> 00:50:34,540
and avoid deprecated API is an unsafe
receipt verification

893
00:50:34,054 --> 00:50:38,603
the could leave you opened on authorized
transactions occurring

894
00:50:39,089 --> 00:50:42,190
if you could download content to make
feature available

895
00:50:42,019 --> 00:50:45,115
get that ass it is reliably and quickly
as possible user in app purchases if you

896
00:50:46,015 --> 00:50:46,093
can

897
00:50:46,093 --> 00:50:49,172
if not if your gonna download it
yourself make sure you use those

898
00:50:50,072 --> 00:50:53,156
background down API's

899
00:50:54,056 --> 00:50:59,131
and lastly actually finish the
transaction

900
00:51:00,031 --> 00:51:03,060
if you need more information there is

901
00:51:03,006 --> 00:51:06,050
we have an evangelist mailing list set
up the welcome to email to get help from

902
00:51:07,004 --> 00:51:08,048
a wonderful evangelist tame

903
00:51:08,048 --> 00:51:11,126
there is also the in app purchase
programming guide available online and

904
00:51:12,026 --> 00:51:13,105
also the stock at framework reference

905
00:51:14,005 --> 00:51:17,086
and as the Apple developer forums that a
great resource as well for discussion

906
00:51:17,086 --> 00:51:17,142
and help

907
00:51:18,042 --> 00:51:21,056
this related sessions I mentioned

908
00:51:21,056 --> 00:51:24,138
preventing unauthorized purchases with
receipt that's me again Friday morning

909
00:51:25,038 --> 00:51:28,125
up in Pacific Heights that we can that's
where we'll take you through how to make

910
00:51:29,025 --> 00:51:30,080
sure the your revenues protected

911
00:51:30,008 --> 00:51:33,057
your business model is enforced in your
app and your servers

912
00:51:34,029 --> 00:51:39,034
he care about your revenue come along
let's talk about a also designing a

913
00:51:39,079 --> 00:51:42,084
great in a purchase experience racial
did an amazing job this morning

914
00:51:42,084 --> 00:51:45,115
in he had telling developers how to
structure their

915
00:51:46,015 --> 00:51:49,017
in app purchase you why to deliver a
great experience every time

916
00:51:49,017 --> 00:51:53,030
via should be available shortly and
lastly Chris Espinosa session tomorrow

917
00:51:53,003 --> 00:51:54,003
or Thursday

918
00:51:54,003 --> 00:51:57,065
is really good if you're ap in
particular is targeted at kids

919
00:51:57,092 --> 00:51:58,131
thank you very much

