1
00:00:16,056 --> 00:00:20,785
everyone thanks for coming today my name
is David altered the secession 513

2
00:00:21,289 --> 00:00:25,386
we're going to talk about video encoders
and decoders today RA

3
00:00:26,259 --> 00:00:30,220
we want to make sure that no matter what
you're doing video on your application

4
00:00:30,022 --> 00:00:33,054
you have access to to hardware encoders
and decoders

5
00:00:33,054 --> 00:00:36,060
this this will help users this work

6
00:00:36,006 --> 00:00:39,087
improve user experience in a number of
ways obviously they'll get better

7
00:00:40,041 --> 00:00:41,043
performance and they'll

8
00:00:41,061 --> 00:00:45,125
in OP will be far more efficient but
most importantly

9
00:00:46,025 --> 00:00:50,078
this will extend battery life users will
really appreciate it if they're

10
00:00:50,078 --> 00:00:55,096
if they released him their portables as
well as their I OS devices have improved

11
00:00:55,096 --> 00:00:55,865
battery life

12
00:00:56,729 --> 00:01:01,100
and as an added bonus people with
portables will love it if their fans

13
00:01:01,001 --> 00:01:01,048
don't

14
00:01:01,057 --> 00:01:07,153
don't kick in every time they doing
video processing self today we're gonna

15
00:01:08,053 --> 00:01:11,072
break the for stricken break this down
to a few case studies

16
00:01:11,072 --> 00:01:14,080
we're gonna look at some common user
scenarios the first scenario we're going

17
00:01:15,052 --> 00:01:15,117
to talk about

18
00:01:16,017 --> 00:01:19,646
is the case where you have a stream of
h264 data coming in over the network

19
00:01:19,799 --> 00:01:22,806
and you want to display that inflatable
air in your application

20
00:01:22,869 --> 00:01:26,872
the next one word in top that is the
case where you have a stream

21
00:01:26,899 --> 00:01:29,905
h264 data coming in over the network you
don't just want to display that your

22
00:01:30,499 --> 00:01:31,532
application but you wanna

23
00:01:31,829 --> 00:01:34,950
actually get access to those decoded CB
pixel buffers

24
00:01:34,095 --> 00:01:37,110
next we'll be talking about

25
00:01:38,001 --> 00:01:42,015
when the case where you have the
sequence of images coming in from the

26
00:01:42,024 --> 00:01:43,060
camera or someplace else

27
00:01:43,006 --> 00:01:48,015
and you'd like to compress those
directly into a movie file and

28
00:01:48,609 --> 00:01:51,642
accompanying that there's the case where
you have a stream

29
00:01:51,939 --> 00:01:55,380
images coming in from the camera or
someplace else and you'd like to

30
00:01:55,038 --> 00:01:58,084
compress those but get direct access to
those compressed sample buffers

31
00:01:58,084 --> 00:02:01,383
so that you can send them out of the
network or do whatever you like with

32
00:02:02,139 --> 00:02:02,172
them

33
00:02:02,469 --> 00:02:05,551
and then finally we're gonna give you an
intro to

34
00:02:06,289 --> 00:02:09,610
our new multipass AP I thought we're
introducing in Iowa State and

35
00:02:09,061 --> 00:02:13,065
and yosemite RA

36
00:02:13,065 --> 00:02:16,127
let's do a quick overview of our media
interface stack

37
00:02:17,027 --> 00:02:21,060
you've seen stuff like this earlier this
week that will do will do it once more

38
00:02:21,006 --> 00:02:24,455
and there's a little focus on video on
my in my

39
00:02:25,049 --> 00:02:29,930
view of this as we're talking a video so
at the top we have eighty kit

40
00:02:29,093 --> 00:02:32,622
AV kit provides very easy to use high
level in

41
00:02:33,459 --> 00:02:38,610
view level interfaces for dealing with
media below that we have eighty

42
00:02:38,061 --> 00:02:38,140
foundation

43
00:02:39,004 --> 00:02:42,100
AB Foundation provides an easy to use
objective-c interface for

44
00:02:43,036 --> 00:02:48,079
a wide range of media tasks below that
we have video toolbox

45
00:02:48,079 --> 00:02:51,998
video toolbox has been there on I was 10
for a while but now it's

46
00:02:52,709 --> 00:02:57,510
family populated with headers on I A
West this provides direct access to

47
00:02:57,051 --> 00:03:01,065
encoders and decoders and

48
00:03:01,065 --> 00:03:05,103
below that we have corn medium for video

49
00:03:06,003 --> 00:03:09,662
these frameworks provide many have the
necessary types that you'll see

50
00:03:09,689 --> 00:03:09,755
throughout the

51
00:03:10,349 --> 00:03:15,360
in a interfaces in the rest the stack so

52
00:03:15,459 --> 00:03:19,471
today we're going to focus on AB
Foundation and the video toolbox

53
00:03:19,579 --> 00:03:23,584
need the foundation will be looking at
some interfaces that allow you to decode

54
00:03:23,629 --> 00:03:24,860
video directly into a

55
00:03:24,086 --> 00:03:28,325
into a layering application or compress
compressed

56
00:03:29,099 --> 00:03:33,510
frames directly into a file and the
video toolbox will be looking at these

57
00:03:33,051 --> 00:03:34,053
interfaces to

58
00:03:34,053 --> 00:03:38,072
give you more direct access tempers and
decoders so you can be compressed

59
00:03:38,549 --> 00:03:40,230
directly to see pixel buffers

60
00:03:40,023 --> 00:03:45,612
or compressed directly to CM sample
buffers them

61
00:03:45,819 --> 00:03:49,640
a quick note on these on using these
remarks a lot of people think they have

62
00:03:49,064 --> 00:03:51,893
to die down to the lowest level in use
the video toolbox in order to get

63
00:03:52,469 --> 00:03:53,170
hardware

64
00:03:53,017 --> 00:03:58,166
acceleration but thats really not true I
O S

65
00:03:58,319 --> 00:04:02,250
ATK AB foundation and video toolbox will
use hardware

66
00:04:02,025 --> 00:04:07,053
kodak's analyst am AV Kidney Foundation
will use hardware kodak's when they're

67
00:04:07,053 --> 00:04:08,262
available on the system

68
00:04:08,739 --> 00:04:13,800
and when you when it's appropriate and
video toolbox will use hardware kodak's

69
00:04:14,349 --> 00:04:19,440
when it's available on system and when
you request it re:

70
00:04:19,044 --> 00:04:22,113
so before we dive into more staff
foregoing

71
00:04:23,013 --> 00:04:26,048
I'm gonna do a quick look at this cast
of characters these are some of the

72
00:04:26,048 --> 00:04:27,136
common types the on counter in RM

73
00:04:28,036 --> 00:04:33,055
in these interfaces first of their CD
pick some buffer

74
00:04:33,055 --> 00:04:36,294
see the pics a buffer contains unblock
update have

75
00:04:36,789 --> 00:04:39,792
image data and wrapping that

76
00:04:39,819 --> 00:04:43,300
that buffer data is the CD pick some up
for mapping

77
00:04:43,003 --> 00:04:46,054
and the see the pics above for wrapping
tells you how to access that data

78
00:04:46,081 --> 00:04:50,125
it's got the to mention with the high
it's got the pixel format

79
00:04:51,025 --> 00:04:56,414
everything you need in order to
correctly interpret the the pixel data

80
00:04:56,639 --> 00:04:59,717
next week at the CP pics a buffer pool
see the pics a buffer pool as you to

81
00:05:00,419 --> 00:05:02,600
efficiently recycle CB pixel buffer

82
00:05:02,006 --> 00:05:06,385
backings those those data buffers can be
very expensive to cook constantly

83
00:05:06,979 --> 00:05:08,013
allocate and deallocate

84
00:05:08,319 --> 00:05:12,910
so pixel by purple allows you to to
recycle them

85
00:05:12,091 --> 00:05:14,184
the way picks up a purple works is you
allocate to see the pics a buffer from

86
00:05:15,084 --> 00:05:16,163
the pool

87
00:05:16,919 --> 00:05:19,990
and the see the pics a buffer is a wreck
an object

88
00:05:19,099 --> 00:05:22,184
when everyone releases that CP pics a
buffer the data backing goes back into

89
00:05:23,084 --> 00:05:23,140
the pool

90
00:05:24,004 --> 00:05:27,038
and it's available for reuse next time
you allocate a pixel

91
00:05:27,074 --> 00:05:30,128
pixel buffer from that pool

92
00:05:31,028 --> 00:05:34,047
next thing is that is pixel buffer
attributes

93
00:05:34,047 --> 00:05:37,061
this isn't actually a type like the rest
of the things in this list but it's a

94
00:05:37,061 --> 00:05:37,156
common

95
00:05:38,056 --> 00:05:41,115
com common object you'll see listed nor
interfaces you'll see

96
00:05:42,015 --> 00:05:46,154
requests per pixel paper attributes
dictionaries picks up a fresh beats RCF

97
00:05:46,289 --> 00:05:48,710
dictionary containing said requirements
for

98
00:05:48,071 --> 00:05:52,000
either CB pixel buffer or affix a buffer
pool

99
00:05:52,639 --> 00:05:56,695
this includes the you can list include
several things thus conclude dimensions

100
00:05:57,199 --> 00:05:58,220
that you're requesting

101
00:05:58,022 --> 00:06:02,049
the with them hi this can include a
specific pixel format or a list a pixel

102
00:06:02,049 --> 00:06:03,124
format for you'd like to

103
00:06:04,024 --> 00:06:08,453
to receive and you can include specific
compatibility

104
00:06:08,669 --> 00:06:12,830
flags requesting compatibility with
specific tech display technologies

105
00:06:12,083 --> 00:06:18,572
such as Open GL OpenGL ES or core
animation

106
00:06:19,319 --> 00:06:23,375
are it next week at cm time cm time is
the basic description

107
00:06:23,879 --> 00:06:27,120
description of time that you'll see in
our interfaces this is a

108
00:06:27,012 --> 00:06:31,053
rational representation overtime valium
contains a 64-bit

109
00:06:31,053 --> 00:06:35,592
time value that's the numerator and a
32-bit time scale which is the

110
00:06:36,069 --> 00:06:37,360
denominator

111
00:06:37,036 --> 00:06:39,118
we is the sort of rational
representation so that these time values

112
00:06:40,018 --> 00:06:41,467
can be passed throughout your

113
00:06:41,629 --> 00:06:47,440
media pipeline and you don't have to do
any sort rounding on them

114
00:06:47,044 --> 00:06:50,047
alright next see in video format
description

115
00:06:50,074 --> 00:06:53,105
you'll see this in a bunch for
interfaces and ASEAN video format

116
00:06:54,005 --> 00:06:56,090
description is basically a description
of video data

117
00:06:56,009 --> 00:06:59,838
is contains the dimensions this includes
the pixel format

118
00:07:00,729 --> 00:07:03,798
and there's a set of extensions go along
with the

119
00:07:04,419 --> 00:07:07,472
with the have seen video format
description

120
00:07:07,949 --> 00:07:11,036
these extensions can include information
I hadn't

121
00:07:11,819 --> 00:07:14,830
to in information used for displaying
that

122
00:07:14,083 --> 00:07:17,099
video data such as pixel aspect ratio
and it can

123
00:07:17,099 --> 00:07:20,208
include color space information

124
00:07:21,099 --> 00:07:24,150
and in case a page 264 data the
parameter sets

125
00:07:24,015 --> 00:07:27,072
are included in in these extensions and
we'll talk about that more a little bit

126
00:07:27,072 --> 00:07:29,156
later

127
00:07:30,056 --> 00:07:33,103
all right next to see a black pepper fam
block buffer is

128
00:07:34,003 --> 00:07:39,012
be the basic way that we wrap arbitrary
blocks Data Inc or media

129
00:07:39,012 --> 00:07:42,080
in in general when you encounter video
data compressed video data

130
00:07:42,008 --> 00:07:46,657
in our pipeline it will be wrapped in
cm1 for

131
00:07:47,449 --> 00:07:50,610
RA now if cm sample buffer

132
00:07:50,061 --> 00:07:53,128
you'll see seem simple but for sure a
lot show up a lot more interfaces

133
00:07:54,028 --> 00:07:58,099
these rap samples data at in that case a
video cm

134
00:07:58,099 --> 00:08:01,150
sample buffers can wrap either
compressed video frames or uncompressed

135
00:08:02,005 --> 00:08:03,066
video frames

136
00:08:04,011 --> 00:08:08,037
and seem simple buffers build on several
the type that we talked about here

137
00:08:08,037 --> 00:08:13,366
they contain a CM time the is the
presentation time for the sample

138
00:08:13,699 --> 00:08:16,717
they contain a seem to be a format
description this describes the data

139
00:08:16,879 --> 00:08:19,830
inside the same sample buffer

140
00:08:19,083 --> 00:08:22,542
and family in the case of compressed
video they contain the same block buffer

141
00:08:23,289 --> 00:08:26,400
in ASEAN bloc buffer has the compressed
video data

142
00:08:26,004 --> 00:08:29,513
and if it's an uncompressed image in the
CM sample buffer

143
00:08:29,909 --> 00:08:33,750
uncompressed image may be in a scene
depicts a buffer or it may be an ASEAN

144
00:08:33,075 --> 00:08:33,113
bloc

145
00:08:34,013 --> 00:08:39,059
for are right next week at cm clock

146
00:08:39,059 --> 00:08:43,095
see in clockers is the core media
wrapper around us or subprime

147
00:08:43,095 --> 00:08:46,152
and like the clock on a wall there's no
clocks on welfare

148
00:08:47,052 --> 00:08:50,136
like a clock on the wall times always
moving and it's always increasing

149
00:08:51,036 --> 00:08:56,195
on ASEAN clock me one of the common
clocks that with that you'll see used as

150
00:08:56,519 --> 00:08:57,970
the host time clock

151
00:08:57,097 --> 00:09:00,716
so if you can cm clock get host time
clock

152
00:09:01,589 --> 00:09:05,170
will return o'clock which is based or on
Mak Mak

153
00:09:05,017 --> 00:09:08,076
absolute time so

154
00:09:08,076 --> 00:09:11,137
cm clocks are hard to control I'm you
can't really control them

155
00:09:12,037 --> 00:09:16,085
as a mention they're always moving at
always at a constant rate

156
00:09:16,085 --> 00:09:21,112
so cm time days provides a more
controlled view on to ASEAN clock

157
00:09:22,012 --> 00:09:25,731
so if we go ahead and create a CM clock
based

158
00:09:25,839 --> 00:09:30,480
as CM time days based on host time clock
week and then set the time to time zero

159
00:09:30,048 --> 00:09:33,069
on our time pace now

160
00:09:33,069 --> 00:09:36,167
time zero on our time base maps to the
current time

161
00:09:37,067 --> 00:09:41,476
on the CM clock and you can control the
break

162
00:09:42,079 --> 00:09:46,370
have your time pace so if you wear them
to go infect your time base rate 21

163
00:09:46,037 --> 00:09:49,080
time will begin advancing on the time
days at the same rate at which the clock

164
00:09:49,008 --> 00:09:50,017
is advancing

165
00:09:51,007 --> 00:09:55,136
and same time basis can be created based
on cm clocks where they can be created

166
00:09:55,829 --> 00:09:59,230
based on others the impact this is

167
00:09:59,023 --> 00:10:02,752
iraq let's hop into our first use case

168
00:10:02,959 --> 00:10:06,820
this is the case where you have a stream
of data coming in over the network

169
00:10:06,082 --> 00:10:09,139
and center to video data coming up the
network we can safely assume that the

170
00:10:10,039 --> 00:10:11,125
cat video

171
00:10:12,025 --> 00:10:17,164
and so we've got AB sample buffer
display Blair Witch 2

172
00:10:17,389 --> 00:10:21,480
which takes a street which can take a
sequence have compressed frames

173
00:10:21,048 --> 00:10:24,101
and display in a layer inside your
application

174
00:10:25,001 --> 00:10:28,005
AB sample buffer display where shipped
in maverick's

175
00:10:28,041 --> 00:10:31,045
and its new in Iowa State

176
00:10:31,045 --> 00:10:34,079
so let's take a look inside a be simple
but for display where

177
00:10:34,079 --> 00:10:38,092
as I mentioned it takes a sequencer cm
sample takes a sequence of compressed

178
00:10:38,092 --> 00:10:38,186
frames as input

179
00:10:39,086 --> 00:10:43,124
and these need to be in CM sample papers
internally it's going to have a video

180
00:10:44,024 --> 00:10:45,067
decoder

181
00:10:45,067 --> 00:10:48,075
and will decode the frames and has in to
see the pics on buffers and will have

182
00:10:49,047 --> 00:10:50,142
sequence at CB pixel buffers

183
00:10:51,042 --> 00:10:58,042
cued up ready to display in your
application at the appropriate time

184
00:10:58,459 --> 00:11:01,540
but I mention we were getting our date
of the network a lot of times when

185
00:11:02,269 --> 00:11:03,190
you're getting

186
00:11:03,019 --> 00:11:06,056
come getting a stream compress video of
the network it's going to be in the form

187
00:11:06,056 --> 00:11:08,059
of an elementary stream

188
00:11:08,086 --> 00:11:11,162
and I mention that CM sample AB sample
buffer this way where

189
00:11:12,062 --> 00:11:15,281
1cm sample buffer input

190
00:11:15,839 --> 00:11:18,820
well there's a little bit of work that
has to happen here to convert your

191
00:11:18,082 --> 00:11:22,094
elementary stream data into cm sample
papers

192
00:11:22,094 --> 00:11:25,493
so let's talk about this h264

193
00:11:26,339 --> 00:11:30,120
defines a couple of ways of packaging a
the h264 spec

194
00:11:30,012 --> 00:11:33,023
to find a couple ways of packaging h264
data

195
00:11:33,023 --> 00:11:36,322
the first 1 I'm going to refer to as
elementary stream packaging

196
00:11:36,529 --> 00:11:39,535
this is used in elementary streams
transport streams a lot of things with

197
00:11:39,589 --> 00:11:41,870
streams and learning

198
00:11:41,087 --> 00:11:44,166
next is impact for packaging this is
used in movie files

199
00:11:45,066 --> 00:11:48,185
and MP mp4 files

200
00:11:48,779 --> 00:11:51,804
and in our interface is the deal with CM
sample buffers

201
00:11:52,029 --> 00:11:55,250
core media Navy foundation exclusively
one

202
00:11:55,025 --> 00:12:00,044
the data package this in the impact for
packaging

203
00:12:00,044 --> 00:12:04,049
so let's look closer at add an H 264
stream

204
00:12:04,049 --> 00:12:08,093
and the and h264 stream consists of a
sequence blocks of data

205
00:12:08,093 --> 00:12:11,802
packaged in now units these these now
units can

206
00:12:12,639 --> 00:12:15,684
contained several diff that this is the
network abstraction layer

207
00:12:16,089 --> 00:12:19,108
and these are network abstraction layer
units

208
00:12:19,279 --> 00:12:25,920
these can contain a few different things
for stuff they can contain sample data

209
00:12:25,092 --> 00:12:29,691
so you can have a a single frame a video
could be

210
00:12:30,519 --> 00:12:33,630
packaged in one now you now or

211
00:12:33,063 --> 00:12:38,157
a nap a frame a video could be spread
across several million its

212
00:12:39,057 --> 00:12:43,062
the other thing that millions can can
can contain as parameter sets

213
00:12:43,062 --> 00:12:47,064
the primer sets the sequence primer set
and picture frame percent

214
00:12:47,082 --> 00:12:51,461
are chance updated which the decoder
holds onto and these apply to all

215
00:12:52,199 --> 00:12:55,600
subsequent friends

216
00:12:55,006 --> 00:12:58,605
well until a new printer said arrives

217
00:12:59,199 --> 00:13:03,560
so let's look at elementary stream
packaging elementary stream packaging

218
00:13:03,056 --> 00:13:06,061
in elementary through packaging the
primer sets are included in now units

219
00:13:07,006 --> 00:13:08,041
right inside the street

220
00:13:08,041 --> 00:13:11,048
this is great if you're doing sequential
playback you

221
00:13:11,048 --> 00:13:14,110
reading your primer sets and they apply
to all this all subsequent frames until

222
00:13:15,001 --> 00:13:17,430
new primer sets right

223
00:13:17,529 --> 00:13:20,553
and pick for packaging has the now units
pulled out

224
00:13:20,769 --> 00:13:24,970
and it's in a separate block data and
that's market data is stored in the sea

225
00:13:24,097 --> 00:13:25,104
in video format description

226
00:13:26,067 --> 00:13:29,093
so as I mentioned each cm sample buffer
references

227
00:13:29,093 --> 00:13:32,122
this cm video format description that
means

228
00:13:32,959 --> 00:13:35,978
each primer data have has access to do

229
00:13:36,149 --> 00:13:40,155
to the primer sets the sort of this or
to packaging is

230
00:13:40,209 --> 00:13:43,790
superior for random access enough I'll
it allows you

231
00:13:43,079 --> 00:13:48,106
to jump anywhere and begin decoding at
it and at an iframe

232
00:13:49,006 --> 00:13:52,098
so what do you have to do if you have an
elementary stream coming in

233
00:13:52,098 --> 00:13:56,163
well we've got you've got a couple
you've got your primer sets in now units

234
00:13:57,063 --> 00:14:01,106
and you're going to have to package
those in ASEAN video format description

235
00:14:02,006 --> 00:14:05,012
well we provide a handy utility that
does this for you

236
00:14:05,012 --> 00:14:11,017
see in video format description create
from x264 primer sets

237
00:14:11,062 --> 00:14:14,106
had RA

238
00:14:15,006 --> 00:14:18,038
Sep the next the next difference that we
can talk about between

239
00:14:18,038 --> 00:14:21,041
an elementary stream and and pick for
packaging is

240
00:14:21,068 --> 00:14:25,037
in now unit headers so each now unit
mystery

241
00:14:25,649 --> 00:14:29,160
in an elementary stream I'll have three
or four bytes

242
00:14:29,016 --> 00:14:33,115
start code is the header and an impact
for packaging

243
00:14:33,259 --> 00:14:37,342
we have a wank code sell for each now
unit your stream they're going

244
00:14:38,089 --> 00:14:42,157
you have to strip off thats that star
code and replace it with the linked CXO

245
00:14:42,769 --> 00:14:47,801
that felt like that for now you know
it's not that hard

246
00:14:48,089 --> 00:14:51,100
so let's talk about building a CM sample
buffer from

247
00:14:51,001 --> 00:14:54,005
from your elementary stream first thing
you're going to have to do is take your

248
00:14:54,005 --> 00:14:55,005
now you know

249
00:14:55,005 --> 00:14:58,454
or now units and replace

250
00:14:58,949 --> 00:15:01,994
the start code with the link code:

251
00:15:02,399 --> 00:15:06,690
and Gill wrap that now unit Nancy M
block buffer

252
00:15:06,069 --> 00:15:09,958
when no care for simplicity I'm showing
the single male unit but if you have

253
00:15:10,579 --> 00:15:14,050
a framework consists of several million
ants you need to include all of the nal

254
00:15:14,005 --> 00:15:17,024
units in your cm sample buffer

255
00:15:17,024 --> 00:15:20,041
so you ever seen block buffer you have
your say in PDF format description that

256
00:15:20,041 --> 00:15:21,280
you created from their initial

257
00:15:21,649 --> 00:15:26,410
from your primer sets and throwing a CM
time value there for presentation time

258
00:15:26,041 --> 00:15:27,063
with your frame

259
00:15:27,063 --> 00:15:31,132
and you have everything you need in
order to create a CM sample buffer

260
00:15:31,699 --> 00:15:35,743
using CM sample buffer create

261
00:15:36,139 --> 00:15:40,234
are right let's talk about AB sample
buffer display layer in time

262
00:15:41,089 --> 00:15:44,094
so as we saw all seem simple buffers
have an associated presentation

263
00:15:44,589 --> 00:15:46,350
timestamp

264
00:15:46,035 --> 00:15:50,038
and our video decoders going to be
spitting out CD pixel buffers

265
00:15:50,038 --> 00:15:53,297
each with an associated presentation
timestamp

266
00:15:53,639 --> 00:15:56,680
well how does it know when to display
these frames

267
00:15:56,068 --> 00:15:59,837
by default it will be driven off the
host time clock

268
00:16:00,449 --> 00:16:03,462
well that can be a little bit hard to
manage the first time clock isn't

269
00:16:03,579 --> 00:16:06,720
really under your control so

270
00:16:06,072 --> 00:16:09,100
we allow you to replace the host time
clock with your own path

271
00:16:10,000 --> 00:16:13,569
your own time base to do this you set
the time

272
00:16:13,569 --> 00:16:16,730
yeah in the example here we're creating
a

273
00:16:16,073 --> 00:16:19,162
time days based on the post time clock
and we're setting that is the control

274
00:16:20,062 --> 00:16:23,106
time base under AB sample buffer display
where

275
00:16:24,006 --> 00:16:27,395
here we're setting the time this time 25
which would mean our frame

276
00:16:27,449 --> 00:16:31,060
whose timestamp is five will be
displayed an earlier

277
00:16:31,006 --> 00:16:34,012
and then we go ahead and set the time
base rate to 1%

278
00:16:34,012 --> 00:16:37,161
an hour congress begins moving at the
same rate as their

279
00:16:37,269 --> 00:16:41,368
post host time clock and subsequent
subsequent frames will be displayed at

280
00:16:42,259 --> 00:16:45,328
the appropriate time

281
00:16:45,949 --> 00:16:49,037
RA so providing

282
00:16:49,829 --> 00:16:53,360
the same sample buffer sleepy simple but
for display where that there's really

283
00:16:53,036 --> 00:16:53,093
two

284
00:16:53,093 --> 00:16:57,149
major scenarios that can describe this
first off there's the periodic source

285
00:16:58,049 --> 00:17:01,338
this is the case we getting frames and
basically the same rate

286
00:17:01,779 --> 00:17:06,160
at which they're being displayed in this
in there AB sample buffer spyware

287
00:17:06,016 --> 00:17:10,020
this would be the case for a live
streaming app or

288
00:17:10,056 --> 00:17:15,065
like streaming up with low latency or
videoconferencing scenario

289
00:17:15,569 --> 00:17:19,130
the next case is the unconstrained
source this is the case where you have a

290
00:17:19,013 --> 00:17:20,039
large

291
00:17:20,039 --> 00:17:23,081
at large that seem simple buffers at
your disposal ready to feed and

292
00:17:23,081 --> 00:17:27,177
ABC people AB sample buffer display
layer at one time

293
00:17:28,077 --> 00:17:32,081
this would be the case if you have a
large cache Baffert network data

294
00:17:32,081 --> 00:17:35,168
or if you're reading the same sample
papers from a file

295
00:17:36,068 --> 00:17:39,115
all right let's talk about the first
case this is really simple

296
00:17:40,015 --> 00:17:43,015
friends are coming at them right knee
which they're being displayed you can go

297
00:17:43,015 --> 00:17:44,082
ahead and Justin cue the sample

298
00:17:44,082 --> 00:17:49,117
buffers any with your AB simple but the
display layer as they arrive

299
00:17:50,017 --> 00:17:53,041
you use the enqueue sample buffer couple

300
00:17:53,041 --> 00:17:56,042
are at the unconstrained sources a
little bit more complicated you don't

301
00:17:56,042 --> 00:17:56,050
want to just show

302
00:17:57,022 --> 00:18:01,071
although CF cm sample buffer simply be
simple but for display earlier once

303
00:18:01,071 --> 00:18:04,123
no one will be happy with their what you
wanna do

304
00:18:05,023 --> 00:18:08,050
at the example mister display where can
tell you when

305
00:18:08,005 --> 00:18:13,033
if when it's buffers its internal
buffers are low and it needs more data

306
00:18:13,078 --> 00:18:16,101
and you can ask it when it has enough
data

307
00:18:17,001 --> 00:18:20,019
the way you do this is using their
request

308
00:18:20,019 --> 00:18:23,025
media data when ready on cue

309
00:18:23,025 --> 00:18:26,102
you in you provide a block in this
interface

310
00:18:27,002 --> 00:18:30,048
and AB sample buffer display where will
call your block

311
00:18:30,048 --> 00:18:36,061
every time the its internal cues are low
and needs more data

312
00:18:36,061 --> 00:18:39,093
inside of that block you can go ahead
and loop

313
00:18:39,093 --> 00:18:42,122
well you're asking whether it whether it
has enough data

314
00:18:43,022 --> 00:18:47,087
you use the israeli from our media data
com if it returns true that means that

315
00:18:47,087 --> 00:18:48,123
once more sample papers

316
00:18:49,023 --> 00:18:53,035
so you keep on feat in sample buffer
zone assumes that returns false

317
00:18:53,035 --> 00:18:56,043
means has enough and you can stop Sam

318
00:18:57,015 --> 00:19:00,099
to pretty simple loop to rate

319
00:19:00,099 --> 00:19:04,103
alright let's do a quick summary of what
we talked about with the B sample buffer

320
00:19:05,039 --> 00:19:05,127
display where

321
00:19:06,027 --> 00:19:10,065
at this point you should be able to
create an AB sample buffer display where

322
00:19:10,065 --> 00:19:13,153
you flirt haddock how to convert your
elementary stream

323
00:19:14,053 --> 00:19:17,107
elementary stream h264 data into cm
sample papers that are

324
00:19:18,007 --> 00:19:21,019
that will happily be decompress by AB
sample

325
00:19:21,019 --> 00:19:24,082
efforts play where we've talked about

326
00:19:24,082 --> 00:19:28,089
couple of scenarios about how you would
provide the same sample buffers

327
00:19:28,089 --> 00:19:32,157
to your layer a simple spyware and
finally be talked about using a custom

328
00:19:33,057 --> 00:19:36,136
same time base with the eighty simple
efforts play later

329
00:19:37,036 --> 00:19:40,044
re: let's dive in for second case

330
00:19:40,044 --> 00:19:43,137
this is the case where you have a stream
h264 data coming in over the network

331
00:19:44,037 --> 00:19:47,061
but you don't wanna just displayed an
application you one actually decoders

332
00:19:47,061 --> 00:19:48,062
frames and kept the

333
00:19:48,071 --> 00:19:51,078
get the decompressed pixel buffers

334
00:19:52,041 --> 00:19:56,130
so what we had an AB sample buffer
display where

335
00:19:57,003 --> 00:20:01,054
contains a lot of the pieces we need but
instead of accessing the video decoder

336
00:20:01,081 --> 00:20:02,176
through the AB sample paper display
where

337
00:20:03,076 --> 00:20:07,133
will access it through the BT
decompression session

338
00:20:08,033 --> 00:20:11,104
like the 80 simple but for display where
PT decompression session 1c

339
00:20:12,004 --> 00:20:15,096
cm sample papers as a template

340
00:20:15,096 --> 00:20:18,169
and it will decode the same sample
papers to see me but some papers

341
00:20:19,069 --> 00:20:22,152
and receive those in it and help call
back the %um

342
00:20:23,052 --> 00:20:28,054
so in order to create a PTT
decompression session me a few things

343
00:20:28,072 --> 00:20:30,168
first you need to provide a description
of the source buffers that you'll be

344
00:20:31,068 --> 00:20:31,159
decompressing

345
00:20:32,059 --> 00:20:36,077
this is a CM video format description if
your crew

346
00:20:36,077 --> 00:20:39,080
if you're decompressing from elementary
stream you've created this from the

347
00:20:39,008 --> 00:20:40,029
primer sets

348
00:20:41,001 --> 00:20:44,067
if you just have a CM sample buffer that
you want to decompress you can pull it

349
00:20:44,067 --> 00:20:47,086
straight off the same sample buffer

350
00:20:47,086 --> 00:20:51,148
next you need to describe your
requirements for your help pics buffers

351
00:20:52,048 --> 00:20:56,067
use a pixel buffer attributes dictionary
for this

352
00:20:56,067 --> 00:21:01,096
and finally you need to implement a VT
decompression help call back

353
00:21:01,096 --> 00:21:04,147
alright let's talk about describing your
requirements for that for the output

354
00:21:05,047 --> 00:21:05,140
pixel buffers

355
00:21:06,004 --> 00:21:09,066
here you need to create a pic summer
fresh its dictionary

356
00:21:10,002 --> 00:21:14,053
slip let's look at a scenario where we
want use their output see pics /a

357
00:21:14,053 --> 00:21:17,142
buffers in an open gles render pipeline

358
00:21:18,042 --> 00:21:21,093
really the only requirement here that we
have for output pixel buffers is that

359
00:21:21,093 --> 00:21:23,098
they be open gles compatible

360
00:21:24,043 --> 00:21:27,046
cell we can go ahead and just created

361
00:21:27,046 --> 00:21:31,072
CF dictionary rawness dictionary
specifying the KCB pick some up for

362
00:21:31,072 --> 00:21:32,166
OpenGL ES compatibility key

363
00:21:33,066 --> 00:21:38,077
and said set it to true

364
00:21:38,077 --> 00:21:42,088
so it can be very tempting to when
creating these pics about prejudice

365
00:21:42,088 --> 00:21:44,112
dictionaries to being very specific

366
00:21:45,012 --> 00:21:48,026
that way there's no surprises about what
you get out of the BT decompression

367
00:21:48,026 --> 00:21:48,115
session

368
00:21:49,015 --> 00:21:53,022
but there's some pitfalls here so let's
look at this case where we had

369
00:21:53,022 --> 00:21:57,110
KCB pick some up for OpenGL ES
compatibility key set to true

370
00:21:58,001 --> 00:22:01,092
here a decompression session the decoder
inside for decompression session is

371
00:22:02,001 --> 00:22:04,047
going to be Deacon frames and helping
wavy

372
00:22:04,047 --> 00:22:09,054
see the pics above urs in that BT
decompression session with them

373
00:22:09,054 --> 00:22:12,095
ask is this well it'll ask itself if
this

374
00:22:12,095 --> 00:22:15,168
pick some up for compatible with the
those requested attributes

375
00:22:16,068 --> 00:22:20,091
and the answer is yes that wavy friend
is open gles compatible so it can return

376
00:22:20,091 --> 00:22:23,129
that directly to your call back

377
00:22:24,029 --> 00:22:27,103
but let's say you were possessed to add
be gr8

378
00:22:28,003 --> 00:22:31,007
request here pics about brach abuse

379
00:22:31,043 --> 00:22:36,087
so just like before that decoder inside
for BT decompression session will decode

380
00:22:36,087 --> 00:22:37,092
two-way TV format

381
00:22:38,037 --> 00:22:42,039
and we'll ask whether this this see the
pics a buffer is compatible with the

382
00:22:42,057 --> 00:22:44,099
requested out but requirements

383
00:22:44,099 --> 00:22:47,171
and it is open TLEs compatible but it's
certainly not be gr8

384
00:22:48,071 --> 00:22:52,143
so it will need to do an extra buffer
copy to convert that way the data

385
00:22:53,043 --> 00:22:56,064
complete ERA data

386
00:22:56,064 --> 00:22:59,112
so extra buffer copies are bad they
decrease

387
00:23:00,012 --> 00:23:03,054
efficiency and they can lead to to

388
00:23:03,054 --> 00:23:06,083
decrease battery life so the world story
here is

389
00:23:06,083 --> 00:23:09,157
the don't over specified

390
00:23:10,057 --> 00:23:13,125
all right let's talk about your output
call back

391
00:23:14,025 --> 00:23:19,041
so alpha comeback is where you'll
receive the decoded CB pixel buffers

392
00:23:19,041 --> 00:23:23,070
and think see the pics /a buffers don't
have a built-in timestamp so you'll

393
00:23:23,007 --> 00:23:25,014
receive the presentation timestamp for
that

394
00:23:26,004 --> 00:23:29,018
for that pic sober for here and

395
00:23:29,054 --> 00:23:32,110
if they're errors or the frames drop for
any reason you receive that information

396
00:23:33,001 --> 00:23:34,098
the app called back

397
00:23:35,007 --> 00:23:38,015
and it's important to note that the
output car back will be called for every

398
00:23:38,015 --> 00:23:38,089
single frame

399
00:23:38,089 --> 00:23:41,173
be pushed into the BP decompression
session even if there's an air

400
00:23:42,073 --> 00:23:45,102
even if it's dropped

401
00:23:46,002 --> 00:23:51,034
alright let's talk about providing
frames here BT decompression session

402
00:23:51,034 --> 00:23:56,034
to do that you call Vicki decompression
session decode frame

403
00:23:56,034 --> 00:23:59,067
just like AB sample buffer display layer
you need to provide these

404
00:23:59,067 --> 00:24:02,078
as CM sample buffers

405
00:24:02,078 --> 00:24:06,175
and he need to provide these frames and
decode order

406
00:24:07,075 --> 00:24:10,080
and by default DT campers decompression
session he could frame

407
00:24:11,025 --> 00:24:14,028
operate synchronously this means that
your help call back

408
00:24:14,055 --> 00:24:19,154
will be called before BT decompression
session decode frame returns

409
00:24:20,054 --> 00:24:24,062
if you want a synchronous operation you
can pass em the flag requesting

410
00:24:24,062 --> 00:24:28,071
enable a synchronous decompression

411
00:24:28,071 --> 00:24:31,113
i right let's talk many seconds
decompression them

412
00:24:32,013 --> 00:24:35,071
with a synchronous decompression the
call to be key decompression session

413
00:24:35,071 --> 00:24:35,166
decode frame

414
00:24:36,066 --> 00:24:39,068
returns as soon as that hands the frame
of to the

415
00:24:39,068 --> 00:24:44,145
decoder but decoders often have limited
pipelines for decoding frames

416
00:24:45,045 --> 00:24:48,084
so when the decoders internal pipeline
is full

417
00:24:48,084 --> 00:24:51,115
the call to VT decompression session he
could frame will block

418
00:24:52,015 --> 00:24:56,022
until space opens up in the decoders by
climb

419
00:24:56,022 --> 00:24:59,034
we call this decoder back pressure so

420
00:24:59,034 --> 00:25:02,110
what this means is that even though
you're calling BP decompression

421
00:25:03,001 --> 00:25:06,067
session D could frame and requesting a
synchronous decompression

422
00:25:06,076 --> 00:25:09,143
we will be doing the decompression a
synchronously but the call can still

423
00:25:10,043 --> 00:25:10,101
block

424
00:25:11,001 --> 00:25:16,001
in some cases so be aware its you're
doing it against the compression but the

425
00:25:16,001 --> 00:25:19,022
call can block so don't perform you I
tasks on that

426
00:25:19,022 --> 00:25:22,074
thread re:

427
00:25:22,074 --> 00:25:24,150
if you find yourself in a situation
where you want to ensure that all a

428
00:25:25,005 --> 00:25:27,027
sequence frames have been cleared have
the decoder

429
00:25:27,072 --> 00:25:30,100
you can call DT decompression session

430
00:25:31,000 --> 00:25:34,059
wait for a sinking springs this call
will not return until

431
00:25:34,059 --> 00:25:39,062
all frames have been omitted from the
decompression session

432
00:25:39,089 --> 00:25:43,096
so sometimes will decoding a the coding
sequence a video frames

433
00:25:44,059 --> 00:25:47,092
there will be a change in the same video
format description so let's look at the

434
00:25:47,092 --> 00:25:47,191
case where we had

435
00:25:48,091 --> 00:25:51,092
had a sequencer an elementary stream and
we

436
00:25:52,001 --> 00:25:55,068
created the first format description
that if the first primer sets that we

437
00:25:55,068 --> 00:25:55,160
encountered

438
00:25:56,006 --> 00:26:00,011
now we r format description 1 with our
first spf MPPs

439
00:26:01,001 --> 00:26:04,066
we can go ahead and create RVP
decompression session with that format

440
00:26:04,075 --> 00:26:05,091
description

441
00:26:05,091 --> 00:26:08,185
and decode all the subsequent frames
with that format description attach the

442
00:26:09,085 --> 00:26:10,142
same sample buffer

443
00:26:11,042 --> 00:26:14,094
until we encounter in New a new

444
00:26:14,094 --> 00:26:18,095
SPS MPPs industry then we need to create

445
00:26:18,095 --> 00:26:22,100
a new format description with that new
with the new SBS MPPs

446
00:26:23,000 --> 00:26:26,008
and we have to make sure that the
decompression session can switch between

447
00:26:26,008 --> 00:26:26,082
these former

448
00:26:27,054 --> 00:26:30,133
descriptions so to do that you

449
00:26:31,033 --> 00:26:34,131
call BT decompression session can accept
format description

450
00:26:35,031 --> 00:26:38,090
this will insure asked the decoder
whether it's able to transition from

451
00:26:38,009 --> 00:26:41,046
format description want to format
description to

452
00:26:42,027 --> 00:26:45,063
if the if deter answer is true

453
00:26:45,063 --> 00:26:49,116
yes can't switch can handle the new for
accept the new format description

454
00:26:50,016 --> 00:26:53,043
that means you can pass subsequent
samples with that new format description

455
00:26:53,043 --> 00:26:54,097
attached to them

456
00:26:54,097 --> 00:26:57,163
into the decompression session and
everything will work fine

457
00:26:58,063 --> 00:27:01,105
if it returns false that means the
decompressor the decompressor cannot

458
00:27:02,005 --> 00:27:02,089
transition

459
00:27:02,089 --> 00:27:05,185
from that first format description to
the second format description

460
00:27:06,085 --> 00:27:09,098
and you need to create a new VT
decompression session

461
00:27:09,098 --> 00:27:13,136
and be sure to and pass the new friends
and into that one

462
00:27:14,036 --> 00:27:17,080
and be sure to release that all DT
decompression session when you

463
00:27:17,008 --> 00:27:20,010
when you're no longer using

464
00:27:20,082 --> 00:27:25,085
RA quick summary of what we talked about
with BT decompression session

465
00:27:26,012 --> 00:27:29,026
we talked about creating the BTD
decompression session

466
00:27:29,026 --> 00:27:32,033
and how to make optimal decisions when
creating a pic summer for

467
00:27:32,096 --> 00:27:35,194
your your picks up a fragile its
dictionary for

468
00:27:36,094 --> 00:27:39,168
for specifying your help requirements

469
00:27:40,068 --> 00:27:42,152
we talked about running your
decompression session both synchronously

470
00:27:43,052 --> 00:27:43,133
and a some

471
00:27:44,033 --> 00:27:48,058
synchronously and we talked about
handling changes unseen video format

472
00:27:48,058 --> 00:27:50,083
description

473
00:27:50,083 --> 00:27:53,152
so with that what's happened in Turkey
three

474
00:27:54,052 --> 00:27:57,108
this is the case for you have a stream
of you have a stream of

475
00:27:58,008 --> 00:28:01,075
see the pics /a buffers are frames
coming in from camera

476
00:28:01,075 --> 00:28:06,079
or another source anyone compress those
directly into a movie file

477
00:28:07,015 --> 00:28:10,034
well for this in you may be familiar
with us already

478
00:28:10,034 --> 00:28:14,055
we have a VSS Writer ABS at writer

479
00:28:14,055 --> 00:28:17,130
has an encoder internally and it's going
to be in coding this brings into cm

480
00:28:18,003 --> 00:28:19,037
sample buffers

481
00:28:19,064 --> 00:28:22,086
and it's got some file rating smarts so
it can

482
00:28:22,086 --> 00:28:25,172
write these optimally into a movie file

483
00:28:26,072 --> 00:28:29,126
we're not actually going to talk about
talk more at this point about

484
00:28:30,026 --> 00:28:33,038
a BFF writer but it some

485
00:28:33,038 --> 00:28:35,104
it's an important concept important
thing to bring up in the context of the

486
00:28:36,004 --> 00:28:36,053
stock

487
00:28:36,053 --> 00:28:39,053
so if you want more information on ABS
at writer

488
00:28:39,053 --> 00:28:43,112
you can go back to WWDC 2013

489
00:28:44,012 --> 00:28:48,038
and the top moving to a peak it may be
foundation or 2011

490
00:28:48,038 --> 00:28:53,049
working with media maybe foundation

491
00:28:53,049 --> 00:28:57,117
re: let's just substrate and case for
this is the case for you

492
00:28:58,017 --> 00:29:01,055
have that stream data coming in from
your camera

493
00:29:01,055 --> 00:29:04,103
needn't and you wanna compressor you
don't wanna rating to a movie file

494
00:29:05,003 --> 00:29:09,037
you want direct access to those
compressed sample buffers

495
00:29:09,037 --> 00:29:12,050
so we want to approach our video encoder
through

496
00:29:12,005 --> 00:29:16,084
BT compression session rather than
through the Absa writer

497
00:29:17,029 --> 00:29:22,071
so just like ABS operator BT compression
session pixie pixel buffers has a temper

498
00:29:22,071 --> 00:29:25,073
and it's going to compress those in
return them sample buffers

499
00:29:25,073 --> 00:29:30,154
and we can go ahead and send that
compress data out over the network

500
00:29:31,054 --> 00:29:34,138
so to create a BT come DT compression
session meet a few things

501
00:29:35,038 --> 00:29:39,041
and this is really simple you just need
to specify the dimensions you want for

502
00:29:39,041 --> 00:29:41,114
your compressed out per

503
00:29:42,014 --> 00:29:45,075
you need to tell us what format you
wanna compressed him such as KCM video

504
00:29:45,075 --> 00:29:45,166
codec tape

505
00:29:46,066 --> 00:29:49,071
h264 and

506
00:29:49,071 --> 00:29:53,138
you can actually provide a setup pics by
fracture be it's describing your source

507
00:29:54,038 --> 00:29:58,123
see pics /a buffers that he'll be
sending to the ET compression session

508
00:29:59,023 --> 00:30:04,036
and finally you need to implement a PT
compression out but call back

509
00:30:04,036 --> 00:30:07,064
so you've created a BT compression
session

510
00:30:07,064 --> 00:30:12,128
now you want to configure you configure
VT compression session using PT sessions

511
00:30:13,028 --> 00:30:14,063
set property

512
00:30:14,063 --> 00:30:18,087
in fact you can have a whole sequence
that PT sessions at properties

513
00:30:18,087 --> 00:30:21,185
property of so I'm gonna go through a
few common

514
00:30:22,085 --> 00:30:26,094
properties here and but this is not an
exhaustive list

515
00:30:26,094 --> 00:30:30,143
the first 1 I'm gonna mention is allow
for a mi Orden by default h264

516
00:30:31,043 --> 00:30:34,110
encoder will allow frames to be
pre-ordered that that means the

517
00:30:35,001 --> 00:30:38,008
presentation time simply pass them and
will not necessarily

518
00:30:38,017 --> 00:30:41,028
equal the deco decode order

519
00:30:41,028 --> 00:30:44,033
which they're amid if you

520
00:30:44,033 --> 00:30:48,096
want to disable this behavior you could
pass false to allow free me ordering

521
00:30:48,096 --> 00:30:51,113
next one average bitrate:

522
00:30:52,013 --> 00:30:57,020
this is how you set a target bitrate for
the compressor

523
00:30:57,002 --> 00:31:00,004
h264 entropy mode

524
00:31:00,022 --> 00:31:04,027
using this you can specify CA VLC
compression or came back

525
00:31:04,027 --> 00:31:07,035
compression for your h264 encoder

526
00:31:08,007 --> 00:31:12,010
i right and then there's the real time
property the real fun property allows

527
00:31:12,001 --> 00:31:12,079
you to tell the

528
00:31:12,088 --> 00:31:15,096
encoder that this is a real time
encoding operation

529
00:31:15,096 --> 00:31:18,098
such as Anna its live streaming case

530
00:31:19,016 --> 00:31:22,051
conference in case as opposed to

531
00:31:22,051 --> 00:31:28,118
more of a backgrounder activity like a
trench coat operation

532
00:31:29,018 --> 00:31:32,039
and fine the final when I'm gonna
mention here's the profile level key

533
00:31:32,039 --> 00:31:35,043
this allows you to specify specific
profiles and levels

534
00:31:35,079 --> 00:31:40,081
or specific profiles and allow us to
choose the correct level

535
00:31:40,081 --> 00:31:44,152
and this is definitely not an exhaustive
list there's a lot of a lot of

536
00:31:45,052 --> 00:31:49,069
these options available so go ahead and
look in VT compression property study

537
00:31:49,069 --> 00:31:49,121
each

538
00:31:50,021 --> 00:31:54,038
and see see what we have for you

539
00:31:54,038 --> 00:31:57,079
alright let's talk about providing see
the pics above urs TV decompression

540
00:31:57,079 --> 00:31:58,140
session

541
00:31:59,004 --> 00:32:02,066
use BT compression session and cold
frame to do this

542
00:32:03,002 --> 00:32:07,073
and you need to provide CB pixel buffers

543
00:32:07,073 --> 00:32:11,168
and see the pics ever as i've mentioned
see the pics /a buffers don't have it

544
00:32:12,068 --> 00:32:15,132
presentation timestamp built into them
so as a separate premature

545
00:32:16,032 --> 00:32:19,043
your provide the presentation timestamp

546
00:32:19,043 --> 00:32:25,097
you need to have feed the frames and in
in presentation order

547
00:32:25,097 --> 00:32:29,118
and its were one more note about the
presentation order

548
00:32:30,018 --> 00:32:33,059
day the presentation timestamps must be
increasing

549
00:32:33,059 --> 00:32:36,137
no duplicate presentation timestamps no
timestamp

550
00:32:37,037 --> 00:32:40,113
go backwards and so

551
00:32:41,013 --> 00:32:44,109
compression sessions you become
compression operations usually require a

552
00:32:45,009 --> 00:32:47,020
window frames that they'll operate on

553
00:32:47,002 --> 00:32:51,008
so your output may be delayed so you may
not receive

554
00:32:51,026 --> 00:32:55,042
you compress frame en route to call back
until a certain number frames have been

555
00:32:55,042 --> 00:32:58,048
pushed into the encoder

556
00:32:58,048 --> 00:33:02,070
RA and finally if you reach the end of
the frame for your pass into the

557
00:33:02,007 --> 00:33:03,011
compression session

558
00:33:03,074 --> 00:33:07,150
and you wanna have it admit our the
frames that 3c so far

559
00:33:08,005 --> 00:33:11,104
you can use BT compression session
complete friends are pending frames will

560
00:33:12,049 --> 00:33:14,053
be omitted

561
00:33:14,089 --> 00:33:18,130
re: let's talk about your help call back

562
00:33:19,003 --> 00:33:22,050
so you're up call back as well where
you'll receive your output cm sample

563
00:33:22,077 --> 00:33:22,140
buffers

564
00:33:23,004 --> 00:33:26,082
these contain the compressed frames

565
00:33:27,018 --> 00:33:31,047
if there were any errors a truck frames
you receive that information here

566
00:33:31,047 --> 00:33:34,091
and final thing frames will be omitted
in pea coat order

567
00:33:34,091 --> 00:33:37,160
so you provided frames to the VT
compression session presentation order

568
00:33:38,006 --> 00:33:43,051
and they'll be omitted and decode order

569
00:33:44,005 --> 00:33:48,038
RA well saying if compressed a buncha
friends

570
00:33:48,038 --> 00:33:52,077
there now compressed it in CM sample
papers which means that they're

571
00:33:52,077 --> 00:33:55,156
using impact for packaging and you wanna
send as

572
00:33:56,056 --> 00:33:59,062
that out of the network which means imy

573
00:33:59,062 --> 00:34:03,131
you may need to switch these over to
elementary stream packaging

574
00:34:04,031 --> 00:34:08,840
well once again you're going to have to
do a little bit of work

575
00:34:09,119 --> 00:34:12,320
so we talked about the primer sets
before

576
00:34:12,032 --> 00:34:15,041
the so the primer sets will

577
00:34:15,329 --> 00:34:19,360
in your and pick for package which h264
will be in the sea in video format

578
00:34:19,639 --> 00:34:21,240
description

579
00:34:21,024 --> 00:34:24,079
so the first thing you're going to have
to do is extract those parameter sets

580
00:34:24,079 --> 00:34:28,173
and package them as now units to send
out over the network

581
00:34:29,073 --> 00:34:33,108
well we provide a handy utility for that
too

582
00:34:34,008 --> 00:34:40,080
cm video format description get h264
parameter set index

583
00:34:40,008 --> 00:34:43,049
RA and the next thing that you need to
do is

584
00:34:44,021 --> 00:34:47,036
upset at what we did with the B sample
buffer display where

585
00:34:47,036 --> 00:34:50,101
are now units are are all going to have
my

586
00:34:51,001 --> 00:34:54,630
headers and you're going to need to
convert dazzling

587
00:34:54,639 --> 00:34:58,800
headers into Star codes

588
00:34:58,008 --> 00:35:01,054
so as you extract each now unit from the
compressed data

589
00:35:02,026 --> 00:35:07,072
inside the same sample buffer convert
those headers on the now units

590
00:35:07,072 --> 00:35:10,131
alright quick summary a that what we
talked about with the PT compression

591
00:35:11,031 --> 00:35:12,069
session

592
00:35:12,069 --> 00:35:15,132
we talked about creating the BT
compression session

593
00:35:16,032 --> 00:35:21,089
we talked about how to configure it
using the PT sessions that property call

594
00:35:21,089 --> 00:35:23,187
and we talked about how you would
provide see the pics /a buffers to the

595
00:35:24,087 --> 00:35:26,178
compression session

596
00:35:27,078 --> 00:35:31,139
and finally we talked about converting
those seem simple buffers into an h264

597
00:35:32,039 --> 00:35:33,111
elementary stream

598
00:35:34,011 --> 00:35:37,062
packaging re: and with that

599
00:35:37,062 --> 00:35:42,101
I'd like to him things after Eric so you
can talk a monthly pass

600
00:35:43,001 --> 00:35:46,064
good morning everyone my name is there
turnquest on the core media engineer

601
00:35:46,064 --> 00:35:49,162
and today I want to talk about
multitasking coding so as a media

602
00:35:50,062 --> 00:35:50,118
engineer

603
00:35:51,018 --> 00:35:54,051
we often do it two opposing forces
quality verses

604
00:35:54,051 --> 00:35:57,054
bitrate: so quality is how pristine the
images

605
00:35:57,081 --> 00:36:00,163
we all know we've seen great quality
video and we really don't like seeing

606
00:36:01,063 --> 00:36:04,082
bad quality video bit rate is how much
data

607
00:36:04,082 --> 00:36:10,098
per time is in the upper media file so
let's say we're preparing some content

608
00:36:10,098 --> 00:36:13,160
if you're like me you go for
high-quality first so great we have high

609
00:36:14,006 --> 00:36:15,053
quality

610
00:36:16,007 --> 00:36:19,071
now in this case what happens with the
bitrate unfortunately

611
00:36:19,071 --> 00:36:22,109
if you have high quality you also tend
to have a high bitrate

612
00:36:23,009 --> 00:36:26,091
that's okay but not what we wanted for
streaming this content or storing it on

613
00:36:26,091 --> 00:36:27,189
a server

614
00:36:28,089 --> 00:36:31,160
black case you wanna low bit-rate but
the quality isn't gonna stay

615
00:36:32,006 --> 00:36:36,049
this high unfortunately that's also
going to go down as well

616
00:36:37,003 --> 00:36:40,039
so we've got we've all seen this as
balking cutter artifacts or an output

617
00:36:40,039 --> 00:36:42,073
image that doesn't really even look like
the source

618
00:36:42,073 --> 00:36:45,112
we don't want this either ideally want
to me like this

619
00:36:46,012 --> 00:36:50,023
high-quality and low bit-rate in order
to achieve that goal we've got a

620
00:36:50,023 --> 00:36:57,023
multi-pass according to a B foundation
and video toolbox

621
00:36:59,049 --> 00:37:02,056
so first off what is more the passing
coating

622
00:37:03,019 --> 00:37:06,060
what's your overview what single passing
cutting his first so this is what David

623
00:37:06,006 --> 00:37:08,058
covered in his portion of the talk

624
00:37:09,012 --> 00:37:12,058
was single passing coating your friends
coming in going into the encoder and

625
00:37:12,058 --> 00:37:12,152
being admitted

626
00:37:13,052 --> 00:37:16,061
in this case we're going to movie file
then once you're done a pending all the

627
00:37:17,042 --> 00:37:17,130
samples

628
00:37:18,003 --> 00:37:21,089
were finished hour left with a row to a
movie file

629
00:37:22,016 --> 00:37:25,073
simple enough let's see how multipass
differs

630
00:37:25,073 --> 00:37:28,128
to uncompress friends coming in going
into the compression session

631
00:37:29,028 --> 00:37:33,033
being omitted as compressed samples are
gonna change things up a little bit

632
00:37:33,078 --> 00:37:36,121
we're gonna have our frame database this
will store the compressed samples and

633
00:37:37,021 --> 00:37:40,094
lowers random access and replacement
which is important for multipass

634
00:37:40,094 --> 00:37:43,102
ever going to have our anchor database
missile store

635
00:37:44,002 --> 00:37:47,019
frame analysis

636
00:37:47,019 --> 00:37:50,077
so we're done a pending for one pass in
the a.m being cuddled aside

637
00:37:50,077 --> 00:37:53,089
I think I can actually do better in
another pass I can tweak the primers a

638
00:37:53,089 --> 00:37:56,187
little bit to get better quality

639
00:37:57,087 --> 00:38:00,120
it will require some samples and you go
through and send those samples against

640
00:38:01,002 --> 00:38:03,073
the encoder

641
00:38:03,091 --> 00:38:07,100
and then it may decide I'm done or on
actually are I want more passes in this

642
00:38:08,000 --> 00:38:11,032
case let's assume that we're finished

643
00:38:11,032 --> 00:38:14,047
so we no longer need the encoder
database or the compression session

644
00:38:14,047 --> 00:38:17,054
but we're left with this frame database
we want a movie file

645
00:38:17,054 --> 00:38:21,133
so we need one more step there's a final
copy from the frame database

646
00:38:22,033 --> 00:38:25,036
to the up a movie file and that's it

647
00:38:25,036 --> 00:38:29,101
we have in multi-path encoded video
track on a movie file

648
00:38:30,001 --> 00:38:33,080
call let's go over some encoder features

649
00:38:33,008 --> 00:38:37,009
my first point is I wanna make no dove
is that Davis said that single passes

650
00:38:37,081 --> 00:38:38,099
hardware-accelerated

651
00:38:38,099 --> 00:38:40,181
and multi-path is also
hardware-accelerated you're not losing

652
00:38:41,081 --> 00:38:46,086
any hardware acceleration there

653
00:38:46,086 --> 00:38:49,105
second point is a multi-pass has
knowledge at the future

654
00:38:50,005 --> 00:38:54,014
now it's not some crazy time traveling
video encoder bonus points were filed

655
00:38:54,014 --> 00:38:55,080
that enhancement request

656
00:38:55,008 --> 00:38:59,040
arm it allows our is able to see your
entire contact

657
00:39:00,012 --> 00:39:03,100
sign single-pass as friends come in
thinker have to make assumptions about

658
00:39:04,000 --> 00:39:05,077
what might come next

659
00:39:05,077 --> 00:39:08,092
and multi-path it already seen all your
content so I can make much better

660
00:39:08,092 --> 00:39:11,129
decisions there

661
00:39:12,029 --> 00:39:15,087
third it can change decisions that it's
made so in single pass

662
00:39:15,087 --> 00:39:20,095
soon as a friend amid is omitted that's
it can take no longer change

663
00:39:21,067 --> 00:39:24,099
jerry can no longer change its mind
about what it omitted

664
00:39:24,099 --> 00:39:27,102
multipass because the frame database
supports replacement

665
00:39:28,029 --> 00:39:33,110
each passing Gautrain change its mind
about how to achieve of more quality

666
00:39:34,001 --> 00:39:37,062
and as a result of this you really get
optimal quality per Bette so sorta like

667
00:39:37,071 --> 00:39:37,143
having a

668
00:39:38,043 --> 00:39:41,094
very awesome custom encoder for your
contact

669
00:39:41,094 --> 00:39:44,130
so thats how multipass works and some
and features

670
00:39:45,003 --> 00:39:51,056
let's talk about new API's so first off
it's like about the V Foundation

671
00:39:51,083 --> 00:39:54,097
in a V Foundation we have a new AV after
tax for session property

672
00:39:54,097 --> 00:39:58,113
we have new path descriptions for ABS a
writer and poet and we never use IEDs

673
00:39:59,013 --> 00:40:02,038
reader output so first was governor
overview

674
00:40:02,038 --> 00:40:07,082
ABS an extra session and ABS an extra
session going from a source file

675
00:40:07,082 --> 00:40:10,146
decoding them then per for performing
some operation on those uncompressed

676
00:40:11,046 --> 00:40:13,138
offers something like scaling or color
conversion

677
00:40:14,038 --> 00:40:17,136
enter and cutting them in writing into a
movie file on this case what is a BS in

678
00:40:18,036 --> 00:40:20,043
extra session provide

679
00:40:20,043 --> 00:40:23,122
what does all this for you its easiest
way to transcode media on I was an

680
00:40:24,022 --> 00:40:26,066
hour's 10

681
00:40:26,066 --> 00:40:30,072
so let's see what we've added here Sony
yesterday for a session model passes are

682
00:40:31,026 --> 00:40:31,111
taken care of

683
00:40:32,011 --> 00:40:35,068
for you automatically there's no work
the have to do to send the samples

684
00:40:35,068 --> 00:40:37,114
between passes

685
00:40:38,014 --> 00:40:41,050
and also it falls back to single pass a
multi-faceted and supported

686
00:40:41,005 --> 00:40:45,021
so if you choose a preset these the
codec for multi battered and supported

687
00:40:45,066 --> 00:40:48,066
don't worry are you single pass

688
00:40:48,066 --> 00:40:51,101
and we have one new property set this TS
and you're on a Mac opted in a

689
00:40:52,001 --> 00:40:52,066
multi-pass

690
00:40:52,066 --> 00:40:57,095
and that's it so for large majority view
this is all you need

691
00:40:57,095 --> 00:41:01,123
neck for talk about ABS writer save your
ass writer you're coming from I

692
00:41:02,023 --> 00:41:06,034
compressed samples you want to compress
them to write them to a movie file

693
00:41:06,034 --> 00:41:09,085
you might be coming from Open GL Open GL
yes context

694
00:41:09,085 --> 00:41:12,151
in this case was a BS writer provide

695
00:41:13,051 --> 00:41:19,130
wraps this portion going from the
encoder to the open the file

696
00:41:20,003 --> 00:41:23,021
another use case it simmers ABS extra
session

697
00:41:23,048 --> 00:41:26,109
re going from a source movie file to a
destination up a movie file

698
00:41:27,009 --> 00:41:31,045
and modifying the buffers in some way on
this case you're gonna use an ABS a

699
00:41:31,045 --> 00:41:33,047
reader output an ABS a writer and poet

700
00:41:33,047 --> 00:41:37,145
you're responsible for sending samples
from one to the other

701
00:41:38,045 --> 00:41:42,045
let's go over new ABS a writer input
API's

702
00:41:42,045 --> 00:41:45,103
so like a view of the extra session you
need to enable multipass

703
00:41:46,003 --> 00:41:50,047
so said the CS and you're automatically
often

704
00:41:50,047 --> 00:41:53,112
then after done a pending samples you
need a marked the current passes

705
00:41:54,012 --> 00:41:55,037
finished

706
00:41:55,037 --> 00:41:58,070
so what is this deal well this triggers
the encoder analysis

707
00:41:58,007 --> 00:42:02,013
internees to decide if I need to perform
multiple passes

708
00:42:03,003 --> 00:42:06,010
and if so what time ranges so the anchor
might say I wanna see the entire

709
00:42:07,000 --> 00:42:08,018
sequence again

710
00:42:08,018 --> 00:42:11,024
I wanna see subsets the sequence

711
00:42:11,024 --> 00:42:15,113
so housing her talk about what time
ranges wants the next pass

712
00:42:16,013 --> 00:42:19,088
work through ABS writer input path
description so in this case

713
00:42:19,088 --> 00:42:23,145
we have time from zero 23 but not the
sample a time three

714
00:42:24,045 --> 00:42:28,064
and samples from five to seven but not
the sample at times

715
00:42:28,064 --> 00:42:31,159
so passes corruption is the encoder
encoders request for media and the next

716
00:42:32,059 --> 00:42:33,065
pass

717
00:42:33,065 --> 00:42:38,082
and may contain the entire sequence or
subset of the sequence

718
00:42:38,082 --> 00:42:41,163
on a path description you can create the
time range is that the cutters requested

719
00:42:42,063 --> 00:42:47,097
by calling source time ranges

720
00:42:47,097 --> 00:42:52,128
all right let's talk about how a bf
writer input uses path descriptions

721
00:42:53,028 --> 00:42:56,077
so when you trigger the encoder analysis
think attorneys reply with what is

722
00:42:56,077 --> 00:42:59,135
what decisions it's made you provide a
block on this method

723
00:43:00,035 --> 00:43:04,054
to allow the encoder to to give you an
answer so this book is called blinker

724
00:43:04,054 --> 00:43:07,108
makes a decision about the next pass

725
00:43:08,008 --> 00:43:11,040
in that block you can get the new path
description encourage decision about

726
00:43:11,004 --> 00:43:13,006
what content and wants for the next pass

727
00:43:13,042 --> 00:43:17,045
with the %uh that works on a sample

728
00:43:17,072 --> 00:43:22,106
so here's our sample we have our block
all back to you provide

729
00:43:23,006 --> 00:43:27,021
inside a call back you call current path
description this async odor what time

730
00:43:27,021 --> 00:43:30,085
ranges once for the next pass

731
00:43:30,085 --> 00:43:34,108
if the past is non mil meaning the
encoder wants data for another pass

732
00:43:35,008 --> 00:43:39,031
you reconfigure your source so this is
where the source will send samples

733
00:43:39,031 --> 00:43:42,067
to the ABS writer input and then use you
prepare the

734
00:43:42,067 --> 00:43:45,086
ABS a writer input for the next pass
already familiar with

735
00:43:45,086 --> 00:43:48,165
request media data when ready on cue

736
00:43:49,065 --> 00:43:52,138
if the passes mill I'm using color is
finished passes

737
00:43:53,038 --> 00:43:57,107
when you're done you can mark your input
is finished

738
00:43:58,007 --> 00:44:01,053
all right let's say you're going from a
source media file I was our second

739
00:44:01,053 --> 00:44:02,080
example

740
00:44:02,008 --> 00:44:06,023
so in new APIs for ABS a reader output
you can prepare your source for

741
00:44:06,095 --> 00:44:06,173
multi-path

742
00:44:07,073 --> 00:44:11,135
by saying supports random access equals
yes

743
00:44:12,035 --> 00:44:15,080
then when the coder what's neat I'm
Rangers you need to reconfigure your ABS

744
00:44:15,008 --> 00:44:19,034
your output to deliver those time ranges
so that's reset for reading time ranges

745
00:44:20,006 --> 00:44:23,031
within an iterative time ranges

746
00:44:23,031 --> 00:44:26,127
finally when all passes have completed
become our configuration is final

747
00:44:27,027 --> 00:44:30,105
this allows the ABS rerouted to
transition to its completed States

748
00:44:31,005 --> 00:44:34,006
organs are tearing itself down

749
00:44:34,006 --> 00:44:38,041
right now there's a couple shortcuts you
can use if you're using ABS return ABS

750
00:44:38,041 --> 00:44:41,049
writer in combination together

751
00:44:41,049 --> 00:44:45,105
so you can enable ABS a reader output if
the if the asset writer input supports

752
00:44:46,005 --> 00:44:47,008
multi pass

753
00:44:47,008 --> 00:44:54,008
so if the encoder supports multi pass we
need a sport random access on the source

754
00:44:54,034 --> 00:44:57,100
then you can reconfigure your source to
deliver samples for the ABS a writer and

755
00:44:58,000 --> 00:44:58,046
poet

756
00:44:58,046 --> 00:45:01,102
so with the reader output call re
separating time ranges with the path

757
00:45:02,002 --> 00:45:04,080
descriptions time ranges

758
00:45:04,008 --> 00:45:08,065
let's go over that in the sample sunset
delivering for an arbitrary source we

759
00:45:09,037 --> 00:45:11,091
now want to deliver for ABS rear output

760
00:45:11,091 --> 00:45:18,091
we call re separating time ranges with
the past scription source time ranges

761
00:45:21,028 --> 00:45:25,041
grant so that's the new API a foundation
for multipass let's talk next about

762
00:45:25,041 --> 00:45:26,115
video toolbox

763
00:45:27,015 --> 00:45:30,110
so video toolbox are in Kotor frame
analysis database

764
00:45:31,001 --> 00:45:34,008
we like to call this are RBT multipass
storage

765
00:45:34,008 --> 00:45:37,014
we also have additions to BT compression
session which David introducing his

766
00:45:38,004 --> 00:45:39,041
portion the talk

767
00:45:39,077 --> 00:45:44,116
and decompress frame database or as we
call it BT frames I'll

768
00:45:45,016 --> 00:45:49,024
so let's go over the architecture but
this time are placing your

769
00:45:49,024 --> 00:45:52,025
the frame database and incur data base
with the objects

770
00:45:52,025 --> 00:45:59,025
but we actually use so in this case we r
BT frame silo an RBT multipass storage

771
00:45:59,078 --> 00:46:03,134
we're done with this past week owner
wants to see samples again

772
00:46:04,034 --> 00:46:09,089
were sending in those samples that have
requests

773
00:46:09,089 --> 00:46:12,102
they were finished and we can tear down
DVD multi bass storage in the

774
00:46:13,002 --> 00:46:17,058
compression session

775
00:46:17,058 --> 00:46:20,060
and look for their frames I'll so this
is where we need to perform the copy

776
00:46:20,006 --> 00:46:24,087
from the frame silo to the up a movie
file

777
00:46:25,041 --> 00:46:28,047
right we have a problem with the file

778
00:46:28,047 --> 00:46:31,061
so first off let's cover what DVD
multipass tortures

779
00:46:31,061 --> 00:46:34,154
so this is the encoder analysis is a
pretty simple API

780
00:46:35,054 --> 00:46:39,109
first you create the storage and then
you close the file once your

781
00:46:40,009 --> 00:46:44,038
finished so that the on that's all the
API that you need to use

782
00:46:44,038 --> 00:46:47,039
the data stored in this is private to
the encoder and you don't have to worry

783
00:46:47,039 --> 00:46:49,093
about it

784
00:46:49,093 --> 00:46:52,191
national talk about additions to be
decompression session

785
00:46:53,091 --> 00:46:56,098
so first you need to tell the BT
compression session any colour about

786
00:46:57,061 --> 00:47:01,127
your BT multipass storage you can do
that by setting a property

787
00:47:02,027 --> 00:47:05,063
this will tell the encoder to use
multipass and use this

788
00:47:05,063 --> 00:47:09,137
BT multipass orange for its frame
analysis

789
00:47:10,037 --> 00:47:13,118
actually got a couple functions for
multipass

790
00:47:14,018 --> 00:47:18,045
to call begin past before you attended
any frames

791
00:47:18,045 --> 00:47:22,046
after donna pending frames for that pass
a call impasse

792
00:47:22,046 --> 00:47:27,081
and pass also asked the encoder if
another path can be performed

793
00:47:27,081 --> 00:47:30,124
so if another if the encoder want
another path to be performed you need to

794
00:47:31,024 --> 00:47:32,050
ask you what I ranges

795
00:47:32,005 --> 00:47:35,036
have samples wash wax pass that's called
the

796
00:47:35,081 --> 00:47:38,153
BT compression session get time ranges
for next pass and give an account in

797
00:47:39,053 --> 00:47:42,642
Assyria time ranges

798
00:47:43,119 --> 00:47:48,760
now talk about the BT France our
services the compressed frame store

799
00:47:48,076 --> 00:47:51,099
so like the other objects you created

800
00:47:51,099 --> 00:47:56,153
and then you you wanna add samples to
this BT frames I'll

801
00:47:57,053 --> 00:48:00,080
so frames automatically be replaced if
they have the same

802
00:48:00,008 --> 00:48:03,099
presentation time stamp and how this
data is stored is abstracted away from

803
00:48:04,071 --> 00:48:04,108
you

804
00:48:05,008 --> 00:48:07,084
and you don't need to worry about it
it's a convenient database for you to

805
00:48:07,084 --> 00:48:09,090
use

806
00:48:09,009 --> 00:48:12,075
then you can prepare the BT frame seller
for the next pass is optimized the

807
00:48:13,056 --> 00:48:14,129
storage

808
00:48:15,029 --> 00:48:19,104
for the next pass

809
00:48:20,004 --> 00:48:23,031
finally let's talk about the copy from
the VT frame silo

810
00:48:23,031 --> 00:48:27,064
to the app a movie file so you can
retrieve samples

811
00:48:27,064 --> 00:48:30,108
forgiven time range this allows you to
get a sample

812
00:48:31,008 --> 00:48:35,009
in a book called back that you provide
in added to route that movie file

813
00:48:35,018 --> 00:48:38,034
right that's the new video toolbox API's

814
00:48:38,034 --> 00:48:42,034
so want to close with a couple
considerations

815
00:48:42,034 --> 00:48:45,090
so we talked about how multipass works
and what API's you can use in

816
00:48:45,009 --> 00:48:48,101
AB foundation a video two walks we need
to talk about your use cases in your

817
00:48:49,082 --> 00:48:51,124
priority in your app

818
00:48:52,024 --> 00:48:55,153
so if you're performing a real-time
encoding

819
00:48:55,369 --> 00:48:59,240
you should be using single pass real
time in cody has very specific deadlines

820
00:48:59,024 --> 00:48:59,031
have how much

821
00:48:59,094 --> 00:49:02,133
compression can take and multi-pass will
perform warn

822
00:49:03,033 --> 00:49:09,061
passes over the time range so you single
pass in these cases

823
00:49:09,061 --> 00:49:13,072
you're concerned about using the minimum
not a power during coating

824
00:49:13,072 --> 00:49:16,073
you single pass water passes will take
more

825
00:49:16,082 --> 00:49:20,103
power and as will the encoder in-house

826
00:49:21,003 --> 00:49:24,059
you're concerned with using the minimum
amount of temporary storage during the

827
00:49:24,059 --> 00:49:26,148
encoder transcode operation

828
00:49:27,048 --> 00:49:30,145
you single pass the encoder analysis
storage and the frame database will use

829
00:49:31,045 --> 00:49:34,116
more storage than the output media file

830
00:49:35,016 --> 00:49:39,051
however if you're concerned about having
the best quality for your content

831
00:49:39,051 --> 00:49:42,103
what he passes a great option

832
00:49:43,003 --> 00:49:46,039
if you want to be as close to the target
bitrate you said on the BT compression

833
00:49:46,039 --> 00:49:48,132
session or ass writers possible

834
00:49:49,032 --> 00:49:52,032
use multipass multipass can see all

835
00:49:52,032 --> 00:49:55,046
the portions are your source media and
so can allocate bits

836
00:49:55,046 --> 00:50:00,121
only where it needs to very smart in a
sense

837
00:50:01,021 --> 00:50:04,030
if it's okay to take longer in your app
so if it's OK for the encoder transfer

838
00:50:05,011 --> 00:50:08,039
operation to take longer for better
quality

839
00:50:08,039 --> 00:50:13,055
multipass is a good option but that the
biggest takeaways in your app

840
00:50:13,055 --> 00:50:17,092
you need experiments you needed think
about your use cases and your users and

841
00:50:17,092 --> 00:50:22,165
if they're willing to wait longer for
better quality

842
00:50:23,065 --> 00:50:26,072
that's the thing about contact

843
00:50:27,035 --> 00:50:30,133
so if you want your app has low quality
are low-complexity content

844
00:50:31,033 --> 00:50:36,041
the abyss like a title sequence or a
static image sequence

845
00:50:37,013 --> 00:50:40,019
all single pass a multi-pass are gonna
both give you great quality here

846
00:50:40,073 --> 00:50:42,158
but multipass will give you much better
call you in single pass these are both

847
00:50:43,058 --> 00:50:45,145
pretty easy to encode

848
00:50:46,045 --> 00:50:49,102
that was talk about high complexity
contact think this is classic

849
00:50:50,002 --> 00:50:53,065
Inc under stress tests water fire
explosions

850
00:50:53,065 --> 00:50:56,111
we all love to do this but single-pass

851
00:50:57,011 --> 00:51:00,083
and multi-pass Argos both gonna do well
but more to Bass Pro I won't do much

852
00:51:00,083 --> 00:51:01,169
better than single past user

853
00:51:02,069 --> 00:51:08,069
this kind of content is hard for
encoders to income

854
00:51:08,069 --> 00:51:12,091
words more got a better decision well
that's in varying complexity

855
00:51:12,091 --> 00:51:16,113
so think of this as a feature length
movie or documentary in Final Cut Pro

856
00:51:17,013 --> 00:51:20,032
or anime movie trailer might have low
complexity

857
00:51:20,032 --> 00:51:23,079
regions a title sequence high complexity
transitions

858
00:51:23,079 --> 00:51:26,092
because there's a lot of different kinds
of content will be passing able to

859
00:51:26,092 --> 00:51:28,095
analyze the sections and really give you

860
00:51:29,022 --> 00:51:32,030
the best quality for bed

861
00:51:32,003 --> 00:51:35,069
again the messages with your content you
need experiment

862
00:51:35,096 --> 00:51:38,097
so you know your content and you should
know if multipass

863
00:51:38,097 --> 00:51:42,098
will give you a good benefit and and use
cases

864
00:51:43,007 --> 00:51:46,806
so let's go over what we talked about
today AB Foundation provides powerful

865
00:51:46,869 --> 00:51:48,710
APIs operate on media

866
00:51:48,071 --> 00:51:53,080
and for most viewed these are the API's
you will be using

867
00:51:53,008 --> 00:51:56,103
now when you need the extra power video
toolbox API's provided direct media

868
00:51:57,075 --> 00:52:00,083
media access if you fall into one did
use cases the david talked about

869
00:52:01,055 --> 00:52:06,093
this is a good I way to is that it's a
box

870
00:52:06,093 --> 00:52:09,099
finally multipath can provide
substantial call you improvements

871
00:52:10,053 --> 00:52:13,108
but you need to think about your app
your use cases and your users

872
00:52:14,008 --> 00:52:17,010
before you enable

873
00:52:17,001 --> 00:52:20,089
so for more information here's our
evangelism email we have the foundation

874
00:52:20,098 --> 00:52:22,105
documentation and a programming guide

875
00:52:23,005 --> 00:52:26,060
we can answer your questions on the
developer forums

876
00:52:26,006 --> 00:52:28,091
for those %uh view they're watching
online /a a lot of the socks already

877
00:52:29,045 --> 00:52:30,100
happened if you're here live

878
00:52:31,000 --> 00:52:35,015
so these are talks might be interested
in thanks everyone have a good rest your

879
00:52:35,015 --> 00:52:35,040
day

